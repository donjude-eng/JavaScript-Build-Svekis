!(function () {
  var __webpack_modules__ = {
      6918: function (e, t, n) {
        (n = [t, n(8422), n(5438), n(2584), n(4738)]),
          void 0 ===
            (n = function (e, n, o, s, a) {
              "use strict";
              function i(e) {
                return e && e.__esModule ? e : { default: e };
              }
              function r(e) {
                return (r =
                  "function" == typeof Symbol &&
                  "symbol" == typeof Symbol.iterator
                    ? function (e) {
                        return typeof e;
                      }
                    : function (e) {
                        return e &&
                          "function" == typeof Symbol &&
                          e.constructor === Symbol &&
                          e !== Symbol.prototype
                          ? "symbol"
                          : typeof e;
                      })(e);
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.System = t.Settings = t.State = t.Source = t.Status = void 0),
                (s = i(s)),
                (a = i(a));
              var l,
                c = {};
              function p(e, n) {
                e &&
                e.settings &&
                e.collections &&
                e.components &&
                e.constants &&
                e.locales &&
                e.layouts &&
                e.pages
                  ? (e.settings.ssl &&
                      "https:" !== location.protocol &&
                      location.replace(
                        "https:".concat(
                          location.href.substring(location.protocol.length)
                        )
                      ),
                    (k.source = e),
                    (k.settings = e.settings),
                    (function () {
                      var e,
                        t = [];
                      for (e in k.settings.app.login.sso)
                        k.settings.app.login.sso.hasOwnProperty(e) &&
                          k.settings.app.login.sso[e] &&
                          t.push(k.settings.app.login.sso[e]);
                      k.settings.app.login.default ||
                        1 !== t.length ||
                        (k.settings.app.login.redirect = t[0]);
                    })(),
                    (t.Settings = w = k.settings),
                    (t.Source = _ = k.source),
                    (t.Status = E = k.status),
                    (t.State = I = k.state),
                    (k.state.system.project = e.settings.project),
                    (k.state.system.environment = e.settings.environment),
                    (k.state.system.version = e.settings.version),
                    (window.project = e.settings.project),
                    (window.version = e.settings.version),
                    delete k.settings.project,
                    delete k.settings.environment,
                    delete k.settings.version,
                    delete k.source.settings,
                    delete k.source.app,
                    -1 === k.settings["base-api"].indexOf("http") &&
                      (-1 < k.settings["base-api"].indexOf(":") &&
                        (k.settings["base-api"] = ""
                          .concat(location.protocol, "//")
                          .concat(location.hostname)
                          .concat(k.settings["base-api"])),
                      -1 === k.settings["base-api"].indexOf(":") &&
                        (k.settings["base-api"] = ""
                          .concat(location.protocol, "//")
                          .concat(location.hostname, ":")
                          .concat(location.port, "/")
                          .concat(k.settings["base-api"]))),
                    (k.settings.log || k.settings.debug) &&
                      ((window.APP = k), (window.SYSTEM = O)),
                    k.settings.storage &&
                      k.settings.storage.login &&
                      h(k.settings.storage.login) &&
                      (k.status.logged = !0),
                    (k.status.settings = !0),
                    (k.paths.components.window = {
                      list: [["system", "window"]],
                    }),
                    (k.paths.components.document = {
                      list: [["system", "document"]],
                    }),
                    (k.paths.components.body = { list: [["system", "body"]] }),
                    (k.state.dom.system.window = {
                      element: window,
                      id: "window",
                      events: {},
                      collection: {},
                      path: ["system", "window"],
                    }),
                    (k.state.dom.system.document = {
                      element: document,
                      id: "document",
                      events: {},
                      path: ["system", "document"],
                    }),
                    (k.state.dom.system.body = {
                      element: document.body,
                      id: "body",
                      events: {},
                      path: ["system", "body"],
                    }),
                    k.settings.app["preload-collection"] &&
                      (k.state.dom.system.window.collectionId =
                        k.settings.app["preload-collection"]),
                    s.default.init(
                      k.settings,
                      k.source,
                      k.state,
                      k.status,
                      O,
                      k.paths
                    ),
                    document.head.addEventListener(
                      "DOMNodeInserted",
                      function (e) {
                        e.target instanceof HTMLStyleElement &&
                          document.head.removeChild(e.target);
                      }
                    ),
                    n
                      ? ((k.state.language =
                          k.source.locales[k.settings.router.lang.default]),
                        (k.state.router.lang = k.settings.router.lang.default))
                      : s.default.publish("DATA_PRELOAD"))
                  : console.error("FATAL ERROR: INVALID SETTINGS");
              }
              function d(e, t, n) {
                var s =
                  3 < arguments.length && void 0 !== arguments[3]
                    ? arguments[3]
                    : {};
                return new Promise(function (i, r) {
                  var l,
                    c,
                    p,
                    d,
                    u,
                    m = new XMLHttpRequest(),
                    b = (0, a.default)(t);
                  if ("GET" === e && s.cache) {
                    var S =
                      ((c = b),
                      (p = s.cache),
                      (d = new Date(Date.now()).getTime()),
                      (u = h(c, p.type)) && u.expire >= d
                        ? (S = (0, o.copy)(u.data))
                        : u && u.expire < d && f(c, p.type),
                      S);
                    if (S) return i(S), !0;
                  }
                  y("start", b),
                    s.timeout &&
                      (l = setTimeout(function () {
                        clearTimeout(l), m.abort();
                      }, s.timeout)),
                    (m.onload = function () {
                      var n = m.getAllResponseHeaders(),
                        a = {};
                      n.trim()
                        .split(/[\r\n]+/)
                        .forEach(function (e) {
                          e = (t = e.split(": ")).shift();
                          var t = t.join(": ");
                          a[e] = t;
                        });
                      var c,
                        p,
                        d,
                        u = {
                          status: m.status,
                          headers: a,
                          response: (function (e) {
                            var t = e.responseText;
                            try {
                              t = JSON.parse(e.responseText);
                            } catch (n) {
                              t = e.response;
                            }
                            return t;
                          })(m),
                          cacheId: b,
                        };
                      clearTimeout(l),
                        y("stop", b),
                        200 <= m.status && m.status < 300
                          ? (v({ url: t, response: m.responseText }),
                            "GET" === e &&
                              s.cache &&
                              ((c = b),
                              (p = u),
                              (d = s.cache),
                              ((n = {}).expire =
                                new Date(Date.now()).getTime() + d.time),
                              (n.data = (0, o.copy)(p)),
                              g(c, n, d.type)),
                            i(u))
                          : r(u);
                    }),
                    (m.onerror = function () {
                      y("stop", b),
                        r({ status: m.status, response: "Request Error." });
                    }),
                    (m.onabort = function () {
                      y("stop", b),
                        r({ status: m.status, response: "Request Timeout." });
                    }),
                    m.open(e, t, !0),
                    s.headers
                      ? s.headers.forEach(function (e) {
                          m.setRequestHeader(e.type, e.info);
                        })
                      : m.setRequestHeader(
                          "Content-Type",
                          "application/json; charset=UTF-8"
                        ),
                    s.authorization &&
                      m.setRequestHeader("Authorization", s.authorization),
                    m.send(n);
                });
              }
              function u() {
                var e = ["parentalTimeout", "refreshTokens"];
                Object.keys(c).forEach(function (t) {
                  -1 === e.indexOf(t) && clearInterval(c[t]);
                }),
                  (c = {});
              }
              function m(e, t) {
                return (
                  t ||
                  (e &&
                    k.settings.storage &&
                    k.settings.storage.data &&
                    k.settings.storage.data[e] &&
                    k.settings.storage.data[e].type) ||
                  "storage"
                );
              }
              function h(e, t) {
                var n,
                  s,
                  a = Array.isArray(e) ? ((s = e.shift()), e) : ((s = e), !1);
                if (
                  ("local" === (t = m(s, t))
                    ? (n = localStorage.getItem(s))
                    : "session" === t
                    ? (n = sessionStorage.getItem(s))
                    : "cookie" === t
                    ? (n = (function (e) {
                        for (
                          var t = "".concat(e, "="),
                            n = document.cookie.split(";"),
                            o = 0;
                          o < n.length;
                          o += 1
                        ) {
                          for (var s = n[o]; " " === s.charAt(0); )
                            s = s.substring(1);
                          if (0 === s.indexOf(t))
                            return s.substring(t.length, s.length);
                        }
                      })(s))
                    : k[t] && (n = k[t][s]),
                  n)
                ) {
                  if ("local" === t || "session" === t || "cookie" === t)
                    try {
                      n = JSON.parse(n);
                    } catch (s) {
                      b("SYSTEM", "Get item from storage fail. Invalid JSON", {
                        key: e,
                        type: t,
                        result: n,
                      });
                    }
                  "collections" === t && !a && n.response && (n = n.response),
                    (n = (0, o.findInObject)(n, a));
                }
                return n;
              }
              function g(e, t, n) {
                var o, s, a;
                (t = JSON.stringify(t)),
                  "local" === (n = m(e, n))
                    ? localStorage.setItem(e, t)
                    : "session" === n
                    ? sessionStorage.setItem(e, t)
                    : "cookie" === n
                    ? ((o = e),
                      (s = t),
                      (a = new Date()).setTime(a.getTime() + 31536e6),
                      (a = "expires=".concat(a.toUTCString())),
                      (document.cookie = ""
                        .concat(o, "=")
                        .concat(s, ";")
                        .concat(a, ";path=/")))
                    : k[n] && (k[n][e] = JSON.parse(t));
              }
              function f(e, t) {
                var n;
                "local" === (t = m(e, t))
                  ? localStorage.removeItem(e)
                  : "session" === t
                  ? sessionStorage.removeItem(e)
                  : "cookie" === t
                  ? ((n = e),
                    (document.cookie = "".concat(
                      n,
                      "=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/"
                    )))
                  : k[t] && delete k[t][e];
              }
              function y(e, t) {
                var n, o;
                k.settings.debug &&
                  ((n = k.state.logger),
                  (o = new Date()),
                  n.trace.push({ time: o.toISOString(), uri: t, action: e }),
                  "start" === e
                    ? ((n.requests[t] = {}),
                      (n.requests[t].start = o.getTime()))
                    : n.requests[t] &&
                      ((n.requests[t].end = o.getTime()),
                      (n.requests[t].duration = "".concat(
                        n.requests[t].end - n.requests[t].start,
                        " ms"
                      ))),
                  k.settings.debug &&
                    (console.log("Request ".concat(e, ": ").concat(t)),
                    console.log(n.requests[t])));
              }
              function v(e) {
                var t;
                k.settings.debug &&
                  ((t = k.state.logger),
                  (e.time = new Date().toISOString()),
                  t.trace.push(e));
              }
              function b(e, t, n) {
                var o = k.state.logger,
                  a = k.state.router.page,
                  i = k.settings.router.page.error;
                (t = n ? { msg: t, details: n } : t),
                  o.trace.push("ERROR ".concat(e)),
                  (o.errors[e] = o.errors[e] || []),
                  o.errors[e].push(t),
                  !k.status.error &&
                    i &&
                    a !== i &&
                    k.source.pages[i] &&
                    s.default.publish("ROUTER_PARSE"),
                  (k.status.error = !0),
                  console.error(t);
              }
              function S() {
                var e = h("token-expire");
                h("remember") &&
                  e &&
                  1e4 < (e = 1e3 * e - Date.now()) &&
                  (0 < (e = 3e4 < e ? e - 3e4 : e - 5e3)
                    ? setTimeout(function () {
                        R.publish("DATA_FETCH", null, {
                          collectionId: "session",
                          component: I.dom.system.window,
                        });
                      }, e)
                    : R.publish("DATA_FETCH", null, {
                        collectionId: "session",
                        component: I.dom.system.window,
                      }));
              }
              function T() {
                var e = k.settings.storage.data;
                e &&
                  Object.keys(e).forEach(function (t) {
                    e[t].preserve || f(t);
                  }),
                  sessionStorage.clear(),
                  (k.status.logged = !1),
                  k.settings.router.page.login
                    ? s.default.publish("ROUTER_NAVIGATE", null, {
                        reset: !0,
                        page: k.settings.router.page.login,
                        params: { logout: !0 },
                      })
                    : s.default.publish("ROUTER_PARSE");
              }
              var E,
                _,
                I,
                w,
                k = {
                  paths: {
                    components: {},
                    collections: {},
                    events: {},
                    translations: {},
                  },
                  settings: {},
                  source: {
                    collections: null,
                    components: null,
                    constants: null,
                    locales: null,
                    layouts: null,
                    pages: null,
                  },
                  state: {
                    system: {},
                    logger: {
                      events: [],
                      errors: {},
                      warnings: {},
                      requests: {},
                      trace: [],
                    },
                    router: {
                      title: "",
                      path: "/",
                      layout: null,
                      page: null,
                      id: null,
                      lang: null,
                      url: null,
                      newLayout: !1,
                      params: {},
                      segments: [],
                    },
                    dom: { system: {}, layout: {}, page: {} },
                    language: {},
                  },
                  storage: {},
                  collections: {},
                  status: {
                    application: null,
                    router: null,
                    model: null,
                    dom: null,
                    layout: null,
                    page: null,
                    settings: null,
                  },
                },
                O = {};
              Object.defineProperties(O, {
                publish: {
                  value: s.default.publish,
                  configurable: !0,
                  writable: !1,
                },
                binding: {
                  value: function (e, t, n, o) {
                    var s, a;
                    n &&
                      ((s = n.type),
                      (a = n.action),
                      s &&
                        a &&
                        ("class" === s &&
                          ("add" === a && e.classList.add(t),
                          "remove" === a && e.classList.remove(t),
                          "toggle" === a && e.classList.toggle(t),
                          "replace" === a && e.classList.replace(t, n.replace)),
                        "attribute" === s &&
                          ("set" === a && e.setAttribute(n.attribute, t),
                          "remove" === a && e.removeAttribute(t)),
                        "style" === s &&
                          ("add" === a &&
                            (e.style[n.style] = t + (n.unit || "")),
                          "remove" === a && (e.style[n.style] = "")),
                        "text" === s &&
                          ("add" === a &&
                            ((n = document.createTextNode(t)),
                            e.appendChild(n)),
                          "set" === a && (e.textContent = t),
                          "remove" === a &&
                            e.childNodes.forEach(function (t) {
                              3 === t.nodeType && e.removeChild(t);
                            }),
                          "clear" === a && (e.innerHTML = "")),
                        "html" === s && "set" === a && (e.innerHTML = t),
                        "append" === s &&
                          ((o.noAppend = !0),
                          "small" === a &&
                            k.state.system.responsive.small &&
                            (o.noAppend = !1)),
                        "noAppend" === s &&
                          "small" === a &&
                          k.state.system.responsive.small &&
                          (o.noAppend = !0)));
                  },
                  configurable: !0,
                  writable: !1,
                },
                translate: {
                  value: function e(t) {
                    var n,
                      o,
                      s =
                        1 < arguments.length && void 0 !== arguments[1]
                          ? arguments[1]
                          : {},
                      a = "";
                    return (
                      t &&
                        ((a = t.join(".")),
                        "string" ==
                          typeof (n = (function e(t, n, o, s, a) {
                            var i = ((a = 4 < arguments.length ? a : void 0) ||
                              o)[
                              t[
                                (s =
                                  3 < arguments.length && void 0 !== s ? s : 0)
                              ]
                            ];
                            return "object" === r(i) && t[s + 1]
                              ? e(t, n, o, s + 1, i)
                              : (n &&
                                  i &&
                                  (n.context &&
                                    ((i =
                                      a[
                                        "".concat(t[s], "_").concat(n.context)
                                      ]) ||
                                      "function" != typeof n.context ||
                                      (i = n.context(t[s], a))),
                                  Object.keys(n).forEach(function (e) {
                                    "context" !== e &&
                                      "lastTranslation" !== e &&
                                      (i = i.replace(
                                        "__".concat(e, "__"),
                                        n[e]
                                      ));
                                  })),
                                i);
                          })(t, s, k.state.language)) && (a = n),
                        "string" != typeof n &&
                          ((o = s),
                          "index" !== (t = (n = t)[0]) &&
                            (o.lastTranslation = n[1] || n[0]),
                          (n =
                            (n[0] = "index") !== t
                              ? n
                              : o.lastTranslation || n.join(".")),
                          (a = Array.isArray(n) ? e(n, s) : n))),
                      a
                    );
                  },
                  configurable: !0,
                  writable: !1,
                },
                request: { value: d, configurable: !0, writable: !1 },
                interval: {
                  value: function (e, t, n, o) {
                    c[t] = setInterval(function () {
                      s.default.publish(o || "INTERVAL", e);
                    }, n);
                  },
                  configurable: !0,
                  writable: !1,
                },
                timeout: {
                  value: function (e, t, n, o) {
                    c[t] && clearInterval(c[t]),
                      (c[t] = setTimeout(function () {
                        clearInterval(c[t]),
                          s.default.publish(o || "TIMEOUT", e);
                      }, n));
                  },
                  configurable: !0,
                  writable: !1,
                },
                count: {
                  value: function (e, t, n, o) {
                    var a = 0;
                    c[t] = setInterval(function () {
                      a === n
                        ? ((a = 0),
                          clearInterval(c[t]),
                          s.default.publish("COUNT_READY", e))
                        : ((a += 1), s.default.publish("COUNTING", e, a));
                    }, o);
                  },
                  configurable: !0,
                  writable: !1,
                },
                checkTimer: {
                  value: function (e) {
                    return c[e];
                  },
                  configurable: !0,
                  writable: !1,
                },
                clearTimer: {
                  value: function (e) {
                    clearInterval(c[e]), delete c[e];
                  },
                  configurable: !0,
                  writable: !1,
                },
                clearAllTimers: { value: u, configurable: !0, writable: !1 },
                getItem: { value: h, configurable: !0, writable: !1 },
                setItem: { value: g, configurable: !0, writable: !1 },
                removeItem: { value: f, configurable: !0, writable: !1 },
                clearItems: {
                  value: function (e) {
                    "local" === (e = m(!1, e))
                      ? localStorage.clear()
                      : "session" === e
                      ? sessionStorage.clear()
                      : k[e] && (k[e] = {});
                  },
                  configurable: !0,
                  writable: !1,
                },
                trace: { value: v, configurable: !0, writable: !1 },
                error: { value: b, configurable: !0, writable: !1 },
                warning: {
                  value: function (e, t, n) {
                    var o = k.state.logger;
                    (n = n ? { msg: t, details: n } : t),
                      (t = new Date()),
                      o.trace.push({ time: t.toISOString(), group: e, log: n }),
                      (o.warnings[e] = o.warnings[e] || []),
                      o.warnings[e].push(n),
                      k.settings.debug && console.warn(n);
                  },
                  configurable: !0,
                  writable: !1,
                },
                reset: {
                  value: function (e) {
                    var t = k.state,
                      n = t.logger;
                    "all" === e &&
                      ((k.paths.collections = {}),
                      (t.dom.layout = {}),
                      (t.dom.page = {})),
                      ("page" !== e && "all" !== e) ||
                        ((n.errors = {}),
                        (n.warnings = {}),
                        (n.requests = {}),
                        (n.events = []),
                        u());
                  },
                  configurable: !0,
                  writable: !1,
                },
                token: {
                  value: function () {
                    S();
                  },
                  configurable: !0,
                  writable: !1,
                },
                ready: {
                  value: function () {
                    S(),
                      (E.application = !0),
                      s.default.publish("ROUTER_PARSE");
                  },
                  configurable: !0,
                  writable: !1,
                },
                unauthorize: {
                  value: function () {
                    h("remember")
                      ? s.default.publish("DATA_FETCH", null, {
                          collectionId: k.settings.app["autologin-collection"],
                          component: k.state.dom.system.window,
                        })
                      : T();
                  },
                  configurable: !0,
                  writable: !1,
                },
                login: {
                  value: function () {
                    S(),
                      (k.status.logged = !0),
                      s.default.publish("ROUTER_NAVIGATE", null, {
                        page: k.settings.router.page.default,
                      });
                  },
                  configurable: !0,
                  writable: !1,
                },
                logout: { value: T, configurable: !0, writable: !1 },
                component: {
                  value: function (e, t) {
                    var n = !1,
                      s = k.paths.components,
                      a = Array.isArray(e) ? e[0] : e;
                    return (
                      s[a] &&
                        (1 === s[a].list.length
                          ? ((n = (0, o.findInObject)(
                              k.state.dom,
                              s[a].list[0]
                            )),
                            Array.isArray(e) &&
                              n.components[e[1]] &&
                              (n = n.components[e[1]]))
                          : t
                          ? (n = (0, o.findInObject)(k.state.dom, s[a].list[t]))
                          : ((n = []),
                            s[a].list.forEach(function (e) {
                              (e = (0, o.findInObject)(k.state.dom, e)) &&
                                n.push(e);
                            }),
                            1 === n.length
                              ? (n = n[0])
                              : n.length || (n = !1))),
                      n
                    );
                  },
                  configurable: !0,
                  writable: !1,
                },
                getComponent: {
                  value: function (e) {
                    for (var t = e.length - 1, n = 0, s = 0; s < t; s += 1)
                      (n += 1), e.splice(n, 0, "components"), (n += 1);
                    return (0, o.findInObject)(k.state.dom, e);
                  },
                  configurable: !0,
                  writable: !1,
                },
                getSource: {
                  value: function (e, t) {
                    var n = !1;
                    return (
                      k.source[e] &&
                        k.source[e][t] &&
                        (n = (0, o.copy)(k.source[e][t])),
                      n
                    );
                  },
                  configurable: !0,
                  writable: !1,
                },
                sendLogs: {
                  value: function () {
                    var e = [],
                      t = ["EVENTS_REGISTER"];
                    k.state.logger.trace.forEach(function (n) {
                      var o = {};
                      if (
                        (n.time && (o.time = n.time),
                        n.uri && (o.uri = n.uri),
                        n.response && (o.response = n.response),
                        n.group && (o.group = n.group),
                        n.log && (o.log = n.log),
                        n.event)
                      ) {
                        if (-1 !== t.indexOf(n.event)) return;
                        o.event = n.event;
                      }
                      n.action && (o.action = n.action),
                        n.target instanceof Element &&
                          n.target._reference &&
                          n.target._reference.component &&
                          (o.target = n.target._reference.component.id),
                        n.data &&
                          ((o.data = {}),
                          n.data.page && (o.data.page = n.data.page),
                          n.data.collectionId &&
                            (o.data.collectionId = n.data.collectionId),
                          n.data.options && (o.data.options = n.data.options)),
                        e.push(JSON.stringify(o));
                    }),
                      k.settings.app &&
                        k.settings.app.endpoints &&
                        k.settings.app.endpoints.logger &&
                        d(
                          "POST",
                          k.settings.app.endpoints.logger,
                          JSON.stringify({ s: e.join(",\n"), f: "log-trace-3" })
                        );
                  },
                  configurable: !0,
                  writable: !1,
                },
              }),
                (window.init = function (e) {
                  l ||
                    (0 < Object.keys(n.settings).length
                      ? p((0, o.copy)(n.settings), e)
                      : d("GET", "/settings.json").then(p),
                    (l = !0));
                }),
                (t.Settings = w),
                (t.State = I),
                (t.Source = _),
                (t.Status = E);
              var R = O;
              t.System = R;
            }.apply(t, n)) || (e.exports = n);
      },
      2402: function (e, t, n) {
        (n = [
          t,
          n(9067),
          n(7443),
          n(8724),
          n(5351),
          n(6215),
          n(5836),
          n(6290),
          n(5855),
          n(8272),
          n(7384),
          n(6364),
          n(5861),
          n(8876),
          n(8015),
          n(2685),
          n(9672),
          n(9191),
          n(3916),
          n(5343),
          n(7030),
          n(6417),
          n(5438),
        ]),
          void 0 ===
            (n = function (
              e,
              n,
              o,
              s,
              a,
              i,
              r,
              l,
              c,
              p,
              d,
              u,
              m,
              h,
              g,
              f,
              y,
              v,
              b,
              S,
              T,
              E,
              _
            ) {
              "use strict";
              function I(e) {
                return e && e.__esModule ? e : { default: e };
              }
              function w(e) {
                return (w =
                  "function" == typeof Symbol &&
                  "symbol" == typeof Symbol.iterator
                    ? function (e) {
                        return typeof e;
                      }
                    : function (e) {
                        return e &&
                          "function" == typeof Symbol &&
                          e.constructor === Symbol &&
                          e !== Symbol.prototype
                          ? "symbol"
                          : typeof e;
                      })(e);
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = void 0),
                (n = I(n)),
                (o = I(o)),
                (s = I(s)),
                (a = I(a)),
                (i = I(i)),
                (r = I(r)),
                (l = I(l)),
                (c = I(c)),
                (p = I(p)),
                (d = I(d)),
                (u = I(u)),
                (m = I(m)),
                (h = I(h)),
                (g = I(g)),
                (f = I(f)),
                (y = I(y)),
                (v = I(v)),
                (b = I(b)),
                (S = I(S)),
                (T = I(T)),
                (E = I(E));
              var k = {};
              (k.utils = n.default),
                (k.tpapp = o.default),
                (k.stripe = s.default),
                (k.storage = a.default),
                (k.sources = i.default),
                (k.selected = r.default),
                (k.season = l.default),
                (k.prm = c.default),
                (k.parental = p.default),
                (k["maui-config"] = d.default),
                (k["image-url"] = u.default),
                (k.favorites = m.default),
                (k.epg = h.default),
                (k.customer = g.default),
                (k.asset = f.default);
              var O,
                R,
                x,
                A,
                P,
                C,
                D,
                L,
                N = {};
              function M(e) {
                var t = e.data,
                  n = e.all,
                  o = e.index,
                  s = e.response,
                  a = e.collectionId,
                  i = e.collection,
                  r = e.component,
                  l = e.isError,
                  c = e.isSuccess,
                  p = e.isStatus,
                  d = e.newData;
                return new Promise(function (e) {
                  var u,
                    m,
                    h,
                    g,
                    f = p && p.response,
                    y = l && l.response,
                    v = c && c.response,
                    b = ((v = f || y || v || i.response), Object.keys(v)),
                    S = Object.keys(v)[o],
                    T = v[S],
                    E = T.default || null,
                    I = T.transform ? [T.transform] : T.transforms;
                  (u = E),
                    (m = r),
                    (h = T.api),
                    (g = d),
                    new Promise(function (e) {
                      var t;
                      h
                        ? ((t = {}),
                          h.options &&
                            h.options.id &&
                            "parsed" === h.options.id.source &&
                            (t.id = g[h.options.id.key]),
                          h.options && t.id
                            ? U(
                                h.collectionId,
                                m,
                                !1,
                                !!t.id && t,
                                h.override
                              ).then(e)
                            : e(u))
                        : e(u);
                    }).then(function (p) {
                      return (
                        p !== E && p.length < 2 && (p = p[0]),
                        !0 !== T && (T.options = T.options || {}),
                        !0 === T && (p = (0, _.findInObject)(t, [S])),
                        T.field &&
                          (p = (0, _.findInObject)(
                            T.header ? s.headers : t,
                            T.field
                          )),
                        T.fields &&
                          ((p = []),
                          T.fields.forEach(function (e) {
                            p.push(
                              (0, _.findInObject)(T.header ? s.headers : t, e)
                            );
                          })),
                        T.content && (p = t),
                        I &&
                          I.forEach(function (e) {
                            var t, o;
                            k[e] &&
                              (((t = T.transform
                                ? T.options || {}
                                : T.options[e] || {}).all = n),
                              (t.params = i.params),
                              (o = t.action ? [t.action] : t.actions)
                                ? o.forEach(function (o) {
                                    var s = t.action ? t : t[o] || {};
                                    (s.all = n),
                                      (s.params = i.params),
                                      (p = k[e]({
                                        data: p,
                                        action: o,
                                        options: s,
                                        fallback: E,
                                        component: r,
                                        parsed: d,
                                      }));
                                  })
                                : ((o = t || {}),
                                  (p = k[e]({
                                    data: p,
                                    options: o,
                                    fallback: E,
                                    component: r,
                                    parsed: d,
                                  }))));
                          }),
                        (d[S] = p || E),
                        o !== b.length - 1
                          ? M({
                              data: t,
                              all: n,
                              index: o + 1,
                              response: s,
                              collectionId: a,
                              collection: i,
                              component: r,
                              isError: l,
                              isSuccess: c,
                              newData: d,
                            }).then(function () {
                              e(d);
                            })
                          : void e(d)
                      );
                    });
                });
              }
              function H(e, t, n, o, s, a, i) {
                return new Promise(function (r) {
                  var l = o.response || o,
                    c = t.transformContent,
                    p = i && i.contentPath,
                    d = s && s.contentPath,
                    u = a && a.contentPath;
                  if (
                    ((p = p || d || u || t.contentPath) &&
                      l &&
                      p.forEach(function (e) {
                        l = l[e] || !1;
                      }),
                    l && p && c && k[c] && (l = k[c](l)),
                    (d = "object" === w(l) && 0 === Object.keys(l).length),
                    (u = Array.isArray(l) && 0 === l.length),
                    l)
                  )
                    if (d || u) r(null);
                    else if (
                      ((p = i && i.response),
                      (c = s && s.response),
                      (d = a && a.response),
                      (u = t.response && 0 < Object.keys(t.response).length),
                      p || c || d || u)
                    ) {
                      if (
                        !(u = p || c || d || u) ||
                        !u.content ||
                        !0 !== u.content
                      )
                        return (function e(t) {
                          var n = t.data,
                            o = t.index,
                            s = t.response,
                            a = t.collectionId,
                            i = t.collection,
                            r = t.component,
                            l = t.isError,
                            c = t.isSuccess,
                            p = t.isStatus,
                            d = t.result;
                          return new Promise(function (t) {
                            var u = p || l || c || i;
                            M({
                              data: (!u.content && n[o]) || n,
                              all: n.length || 1,
                              index: 0,
                              response: s,
                              collectionId: a,
                              collection: i,
                              component: r,
                              isError: l,
                              isSuccess: c,
                              isStatus: p,
                              newData: {},
                            }).then(function (m) {
                              var h = Array.isArray(n);
                              if (
                                (h ? (d = d || []).push(m) : (d = m),
                                h && !u.content && o !== n.length - 1)
                              )
                                return e({
                                  data: n,
                                  index: o + 1,
                                  response: s,
                                  collectionId: a,
                                  collection: i,
                                  component: r,
                                  isError: l,
                                  isSuccess: c,
                                  isStatus: p,
                                  result: d,
                                }).then(t);
                              t(d);
                            });
                          });
                        })({
                          data: l,
                          index: 0,
                          response: o,
                          collectionId: e,
                          collection: t,
                          component: n,
                          isError: s,
                          isSuccess: a,
                          isStatus: i,
                        }).then(r);
                      r(l);
                    } else r(l);
                  else r(null);
                });
              }
              function U(e, t, n, o, s) {
                return new Promise(function (a) {
                  var i,
                    r,
                    l,
                    c,
                    p,
                    d,
                    u,
                    m,
                    h = P[e] ? (0, _.copy)(P[e]) : {};
                  (!h.provider && !h.collectionId) || "static" === h.provider
                    ? (t && (i = (0, _.deepOverride)(h, t.collection)),
                      H(e, i, t, i.data || {}).then(a))
                    : (n
                        ? (n.provider && (i = n),
                          n.collectionId &&
                            !(i = (0, _.copy)(P[n.collectionId])).provider &&
                            i.collectionId &&
                            ((n = i), (i = (0, _.copy)(P[i.collectionId]))),
                          n.reply && (i.reply = n.reply))
                        : (i = h.collectionId
                            ? (0, _.copy)(P[h.collectionId])
                            : h),
                      (r = (n || h).api),
                      t && (i = (0, _.deepOverride)(i, t.collection)),
                      s && (i = (0, _.deepOverride)(i, s)),
                      (l = i.provider),
                      (m = (function (e) {
                        var t = {};
                        if (e) {
                          if ((t = (0, _.copy)(e)).transform) {
                            var n = void 0 !== t.default ? t.default : null,
                              o = t.options || {},
                              s = o.action;
                            return (
                              k[t.transform] &&
                                (t = k[t.transform]({
                                  data: n,
                                  action: s,
                                  options: o,
                                })),
                              t
                            );
                          }
                          Object.keys(e).forEach(function (n) {
                            var o, s, a, i;
                            (t[n] = e[n]),
                              "object" === w(e[n]) &&
                                null !== e[n] &&
                                (void 0 !== e[n].default ||
                                  e[n].transform ||
                                  e[n].transforms) &&
                                ((o =
                                  void 0 !== e[n].default
                                    ? e[n].default
                                    : null),
                                (s = e[n].options || {}),
                                (a = s.action),
                                (i = e[n].transform
                                  ? [e[n].transform]
                                  : e[n].transforms),
                                (t[n] = o),
                                i &&
                                  i.forEach(function (e) {
                                    k[e] &&
                                      (t[n] = k[e]({
                                        data: o,
                                        action: a,
                                        options: s,
                                      }));
                                  })),
                              (null !== t[n] && void 0 !== t[n]) || delete t[n];
                          });
                        }
                        return t;
                      })(i.params)),
                      (d = i.options ? (0, _.copy)(i.options) : {}),
                      (c = o ? (0, _.deepOverride)(d, o) : d),
                      (u = i.transform ? [i.transform] : i.transforms) &&
                        u.forEach(function (e) {
                          k[e] &&
                            (p = k[e]({
                              data: i.url,
                              action: c.action,
                              options: c,
                            }));
                        }),
                      p && (i.url = p),
                      N[l] && "function" == typeof N[l] && "" !== i.url
                        ? ((d = i.data),
                          (u = c.private && R.logged),
                          (!c.private && !d) || u
                            ? (i.cache && (c.cache = i.cache),
                              N[l](i.method, i.url, m, c).then(
                                function (o) {
                                  var s = i.reply && i.reply.success;
                                  o.cacheId &&
                                    c.cache &&
                                    ((t.settings = t.settings || {}),
                                    (t.settings.cache = c.cache),
                                    (t.settings.cache.key = o.cacheId)),
                                    H(e, i, t, o, !1, s).then(function (t) {
                                      i.reply &&
                                        i.reply.success &&
                                        i.reply.success.event &&
                                        (((!i.reply.success.passThrough || r) &&
                                          i.reply.success.passThrough) ||
                                          x.publish(
                                            i.reply.success.event,
                                            null,
                                            i.reply.success.data || t
                                          )),
                                        (function () {
                                          var s = n && n.collectionId,
                                            i = h && h.collectionId;
                                          (i = s || i || e),
                                            (o.response = t),
                                            x.setItem(i, o, "collections"),
                                            r ? U(e, !1, r).then(a) : a(t);
                                        })();
                                    });
                                },
                                function (n) {
                                  var o = i.reply && i.reply.error,
                                    s =
                                      i.reply &&
                                      i.reply.error &&
                                      i.reply.error.status &&
                                      n.status &&
                                      i.reply.error.status[n.status];
                                  o && !o.contentPath && o.response,
                                    x.setItem(e, n, "collections"),
                                    H(e, i, t, n, o, !1, s).then(function (t) {
                                      var l, c;
                                      o
                                        ? ((l = s && s.event),
                                          (c = t && t.error ? t.error : t),
                                          x.publish(
                                            l || i.reply.error.event,
                                            null,
                                            (s && s.data) || c || (o && o.data)
                                          ),
                                          o.passThrough &&
                                            r &&
                                            U(e, !1, r).then(a))
                                        : r
                                        ? U(e, !1, r).then(a)
                                        : 403 === n.status
                                        ? x.publish("UNAUTHORIZE")
                                        : a(t);
                                    });
                                }
                              ))
                            : d
                            ? ((m = i.reply && i.reply.success),
                              H(e, i, t, d, !1, m).then(function (t) {
                                i.reply
                                  ? (i.reply.success &&
                                      x.publish(
                                        i.reply.success.event,
                                        null,
                                        i.reply.success.data || t
                                      ),
                                    r && U(e, !1, r).then(a))
                                  : r
                                  ? U(e, !1, r).then(a)
                                  : a(t);
                              }))
                            : a(null))
                        : (a(null),
                          x.warning(
                            "DATA",
                            'Missing Provider "'.concat(l, '"')
                          )));
                });
              }
              function Y(e) {
                var t = e.detail,
                  n = t.component,
                  o = t.collectionId || n.collectionId;
                (e = t.override),
                  o
                    ? n
                      ? (n.id &&
                          ((D[o] = D[o] || []),
                          -1 === D[o].indexOf(n.id) && D[o].push(n.id)),
                        e &&
                          (n.collection = (0, _.deepOverride)(n.collection, e)),
                        U(o, n).then(function (e) {
                          !(function (e, t) {
                            var n = (l = e && e.collection) && l.state,
                              o = l && l.options,
                              s = l && l.params;
                            if (n) {
                              var a = void 0 !== n.dataPage;
                              if (
                                ((t = a && 1 < n.visiblePage && !t ? [] : t),
                                o && s && t)
                              ) {
                                var i,
                                  r = a && n.dataPage < s.page,
                                  l = a && n.dataPage > s.page;
                                if (
                                  ((n.dataNext = !0),
                                  (n.dataPrev = !1),
                                  o.maxItems
                                    ? ((n.dataNext = !1),
                                      s.size < o.maxItems &&
                                        t.length === s.size &&
                                        (n.dataNext = !0),
                                      t.length > o.maxItems &&
                                        ((n.dataMore = !0),
                                        (t = t.slice(0, o.maxItems))))
                                    : t.length < s.size && (n.dataNext = !1),
                                  (n.dataPage = s.page),
                                  !a)
                                )
                                  if (o.initialItems > o.visibleItems) {
                                    var c = o.initialItems / o.visibleItems;
                                    n.dataPages = [];
                                    for (var p = 0; p < c; p += 1)
                                      n.dataPages.push(p);
                                    i = !0;
                                  } else n.dataPages = [n.dataPage];
                                r &&
                                  ((e.cache = e.cache.concat(t)),
                                  n.dataPages.push(n.dataPage),
                                  (n.dataRemove = t.length),
                                  e.cache.length > o.memoryItems &&
                                    (e.cache.splice(0, s.size),
                                    n.dataPages.shift(),
                                    (n.dataPrev = !0))),
                                  l &&
                                    ((e.cache = t.concat(e.cache)),
                                    n.dataPages.unshift(n.dataPage),
                                    e.cache.length > o.memoryItems &&
                                      (e.cache.splice(
                                        -Math.abs(n.dataRemove),
                                        n.dataRemove
                                      ),
                                      n.dataPages.pop(),
                                      (n.dataRemove = s.size)),
                                    0 < s.page && (n.dataPrev = !0)),
                                  r ||
                                    l ||
                                    ((e.cache = t),
                                    i || (n.dataPages = [n.dataPage]));
                              } else e && (e.cache = t);
                            } else e && (e.cache = t);
                          })(n, e),
                            n &&
                              !n.system &&
                              x.publish("DOM_RENDER", null, { component: n });
                        }))
                      : x.warning("DATA", "Missing component", t)
                    : x.warning("DATA", "Missing collection ID", t);
              }
              (N.prm = y.default),
                (N.multirights = v.default),
                (N.edge = b.default),
                (N.default = S.default),
                (N.cache = T.default),
                (N.analytics = E.default),
                (E = {}),
                Object.defineProperties(E, {
                  init: {
                    value: function (e, t, n, o, s, a) {
                      O ||
                        ((x = s),
                        (A = n),
                        (R = o),
                        (C = a),
                        (P = t.collections),
                        (D = C.collections),
                        (L = e),
                        (R.model = !0),
                        (O = !0));
                    },
                    configurable: !0,
                    writable: !1,
                  },
                  preload: {
                    value: function () {
                      (0, _.setSupportedDRM)().finally(function () {
                        if (
                          (x.reset("all"),
                          (D = C.collections),
                          (n = L.app["preload-collection"]))
                        ) {
                          var e = !!P[n] && (0, _.copy)(P[n]);
                          if (e) {
                            var t = e.options && e.options.private && R.logged,
                              n = e.options && !e.options.private;
                            if (t || !e.options || n)
                              return (
                                x.publish("DATA_FETCH", null, {
                                  component: A.dom.system.window,
                                }),
                                !0
                              );
                          }
                        }
                        x.publish("PRELOAD_READY");
                      });
                    },
                    configurable: !0,
                    writable: !1,
                  },
                  fetch: { value: Y, configurable: !0, writable: !1 },
                  fetchAll: {
                    value: function (e) {
                      var t = e.detail,
                        n = t.static,
                        o = t.api,
                        s = t.tag;
                      Object.keys(D).forEach(function (e) {
                        var a, i, r, l, c;
                        P[e] &&
                          ((l = P[e].provider && "static" === P[e].provider),
                          (a = (n && !P[e].provider) || l),
                          (r =
                            !!(i =
                              o &&
                              P[e].provider &&
                              "static" !== P[e].provider) &&
                            "GET" !== P[e].method),
                          (l = s && P[e].tags && -1 < P[e].tags.indexOf(s)),
                          (c = -1 < ["parental"].indexOf(s)),
                          (a || i || !t || l) &&
                            !r &&
                            0 < D[e].length &&
                            D[e].forEach(function (t) {
                              var n;
                              t &&
                                ((n = x.component(t)),
                                Array.isArray(n)
                                  ? n.forEach(function (t) {
                                      (n.clearData = c),
                                        e === t.collectionId &&
                                          ((A.system.componentList =
                                            A.system.componentList || []),
                                          A.system.componentList.push(
                                            t.path.join(",")
                                          ),
                                          t.source.collection &&
                                            ((t.collection = (0, _.copy)(
                                              t.source.collection
                                            )),
                                            (t.collection.state = {})),
                                          Y({
                                            detail: {
                                              collectionId: e,
                                              component: t,
                                              override: {
                                                options: { reset: !0 },
                                              },
                                            },
                                          }));
                                    })
                                  : n &&
                                    ((n.clearData = c),
                                    e === n.collectionId &&
                                      ((A.system.componentList =
                                        A.system.componentList || []),
                                      A.system.componentList.push(
                                        n.path.join(",")
                                      ),
                                      n.source.collection &&
                                        ((n.collection = (0, _.copy)(
                                          n.source.collection
                                        )),
                                        (n.collection.state = {})),
                                      Y({
                                        detail: {
                                          collectionId: e,
                                          component: n,
                                          override: { options: { reset: !0 } },
                                        },
                                      }))));
                            }));
                      });
                    },
                    configurable: !0,
                    writable: !1,
                  },
                }),
                (t.default = E);
            }.apply(t, n)) || (e.exports = n);
      },
      3287: function (e, t, n) {
        (n = [
          t,
          n(9067),
          n(7443),
          n(8724),
          n(5351),
          n(6215),
          n(5836),
          n(6290),
          n(5855),
          n(8272),
          n(7384),
          n(6364),
          n(5861),
          n(8876),
          n(8015),
          n(2685),
          n(5438),
        ]),
          void 0 ===
            (n = function (e, n, o, s, a, i, r, l, c, p, d, u, m, h, g, f, y) {
              "use strict";
              function v(e) {
                return e && e.__esModule ? e : { default: e };
              }
              function b(e) {
                return (b =
                  "function" == typeof Symbol &&
                  "symbol" == typeof Symbol.iterator
                    ? function (e) {
                        return typeof e;
                      }
                    : function (e) {
                        return e &&
                          "function" == typeof Symbol &&
                          e.constructor === Symbol &&
                          e !== Symbol.prototype
                          ? "symbol"
                          : typeof e;
                      })(e);
              }
              function S(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for (var n = 0, o = new Array(t); n < t; n++) o[n] = e[n];
                return o;
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = void 0),
                (n = v(n)),
                (o = v(o)),
                (s = v(s)),
                (a = v(a)),
                (i = v(i)),
                (r = v(r)),
                (l = v(l)),
                (c = v(c)),
                (p = v(p)),
                (d = v(d)),
                (u = v(u)),
                (m = v(m)),
                (h = v(h)),
                (g = v(g)),
                (f = v(f));
              var T = {};
              (T.utils = n.default),
                (T.tpapp = o.default),
                (T.stripe = s.default),
                (T.storage = a.default),
                (T.sources = i.default),
                (T.selected = r.default),
                (T.season = l.default),
                (T.prm = c.default),
                (T.parental = p.default),
                (T["maui-config"] = d.default),
                (T["image-url"] = u.default),
                (T.favorites = m.default),
                (T.epg = h.default),
                (T.customer = g.default),
                (T.asset = f.default);
              var E,
                _,
                I,
                w,
                k,
                O,
                R,
                x,
                A,
                P,
                C,
                D,
                L,
                N,
                M,
                H = [];
              function U() {
                var e = I.constants.media;
                e &&
                  ((R.system.responsive = {}),
                  Object.keys(e).forEach(function (t) {
                    var n = matchMedia(e[t]).matches;
                    (R.system.responsive[t] = n),
                      O.breakpoints[t] &&
                        n &&
                        (R.system.breakpoint = parseInt(
                          O.breakpoints[t].replace("px", ""),
                          10
                        ));
                  }));
              }
              function Y(e, t, n) {
                var o,
                  s = e.collectionId;
                t && (e.data = t),
                  !e.isSet &&
                    s &&
                    A[s] &&
                    A[s].provider &&
                    "static" !== A[s].provider &&
                    e.collection &&
                    (e.collection.state = {}),
                  e.source.behavior &&
                    ((s = (o = e).source.behavior),
                    (o.events = {}),
                    s.forEach(function (e) {
                      e.events.forEach(function (t) {
                        Object.keys(e.handlers).forEach(function (n) {
                          var s = e.handlers[n] || {},
                            a = e.state;
                          (o.events[t] = o.events[t] || {}),
                            (o.events[t].handlers = o.events[t].handlers || {}),
                            (o.events[t].handlersList =
                              o.events[t].handlersList || []),
                            o.events[t].handlersList.push(n),
                            (o.events[t].handlers[n] =
                              o.events[t].handlers[n] || {}),
                            (o.events[t].handlers[n].options = s),
                            (o.events[t].responsive = e.responsive),
                            (o.events[t].handlers[n].state = a);
                        }),
                          k.publish("EVENTS_REGISTER", null, {
                            event: t,
                            component: o,
                            target: o.element,
                          });
                      });
                    })),
                  (function (e) {
                    var t = e.source.bindings,
                      n = e.component || e;
                    (e.noAppend = !1),
                      n.refresh
                        ? e.element.classList.contains(e.id) ||
                          ((e.element.className = e.id),
                          e.origin && e.element.classList.add(e.origin))
                        : (function (e, t, n) {
                            (function (e) {
                              return (
                                (function (e) {
                                  if (Array.isArray(e)) return S(e);
                                })(e) ||
                                (function (e) {
                                  if (
                                    "undefined" != typeof Symbol &&
                                    Symbol.iterator in Object(e)
                                  )
                                    return Array.from(e);
                                })(e) ||
                                (function (e, t) {
                                  if (e) {
                                    if ("string" == typeof e) return S(e, t);
                                    var n = Object.prototype.toString
                                      .call(e)
                                      .slice(8, -1);
                                    return (
                                      "Object" === n &&
                                        e.constructor &&
                                        (n = e.constructor.name),
                                      "Map" === n || "Set" === n
                                        ? Array.from(e)
                                        : "Arguments" === n ||
                                          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(
                                            n
                                          )
                                        ? S(e, t)
                                        : void 0
                                    );
                                  }
                                })(e) ||
                                (function () {
                                  throw new TypeError(
                                    "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                                  );
                                })()
                              );
                            })(e.attributes).forEach(function (t) {
                              return e.removeAttribute(t.name);
                            }),
                              (e.className = t),
                              n && e.classList.add(n);
                          })(e.element, e.id, e.origin),
                      [
                        "settings",
                        "root",
                        "current",
                        "parent",
                        "parentSettings",
                      ].forEach(function (o) {
                        t &&
                          Object.keys(t).forEach(function (s) {
                            var a = t[s],
                              i = e.data;
                            "settings" === s && (i = n.settings),
                              "root" === s && (i = n.data),
                              "parent" === s &&
                                (i =
                                  n.parent &&
                                  n.parent.component &&
                                  n.parent.component.data),
                              "parentSettings" === s &&
                                (i = n.parent && n.parent.settings),
                              o === s &&
                                Object.keys(a).forEach(function (t) {
                                  var o, s;
                                  (null == i && "null" === t) ||
                                  (i && "default" === t)
                                    ? F(a[t], e, null, n)
                                    : i &&
                                      ((o = a[t]),
                                      "number" ==
                                        typeof (s =
                                          i[t] && "object" === b(i[t])
                                            ? (0, y.copy)(i[t])
                                            : i[t]) &&
                                        0 === s &&
                                        (s = "0"),
                                      Object.keys(o).forEach(function (t) {
                                        !1 === s && (s = null),
                                          !0 === s && (s = "true");
                                        var a,
                                          i =
                                            "default" === t &&
                                            s &&
                                            null !== s &&
                                            !1 !== s,
                                          r = s && t === s,
                                          l =
                                            "null" === t &&
                                            null === (s && null === s);
                                        s &&
                                          "object" === b(s) &&
                                          !Array.isArray(s) &&
                                          ((a = s.transform
                                            ? [s.transform]
                                            : s.transforms)
                                            ? a.forEach(function (t) {
                                                var n;
                                                T[t] &&
                                                  ((n = s.options),
                                                  (s = T[t]({
                                                    action: n.action,
                                                    options: n,
                                                    component: e,
                                                  })) || (l = !0));
                                              })
                                            : void 0 !== s.default
                                            ? null ===
                                                (s =
                                                  void 0 !== s[n.state]
                                                    ? s[n.state]
                                                    : s.default) && (l = !0)
                                            : (s = null)),
                                          (i || l || r) &&
                                            (Array.isArray(o[t])
                                              ? F(o[t], e, s, n)
                                              : (e.noAppend = !0));
                                      }));
                                });
                          });
                      });
                  })(e),
                  (function (e, t) {
                    var n, o;
                    e.element.parentElement ||
                      ((o = e.isRepeat),
                      (n = e.collectionId || e.settings),
                      (!o || (o && e.data)) &&
                        !e.noAppend &&
                        ((o =
                          R.system.responsive.touch &&
                          R.system.browser &&
                          R.system.browserVersion &&
                          "Safari" === R.system.browser &&
                          R.system.browserVersion.split(".")[0] < 13),
                        n &&
                          t &&
                          !o &&
                          e.element.setAttribute(
                            "style",
                            "display:none !important"
                          ),
                        e.parentElement.appendChild(e.element))),
                      e.noAppend &&
                        e.element.parentElement &&
                        e.parentElement.removeChild(e.element);
                  })(e, n),
                  e.source.qa &&
                    "debug" === R.system.environment &&
                    e.element.setAttribute("qa", e.source.qa),
                  e.isSet ||
                    ((e.isSet = !0),
                    k.publish("COMPONENT_SET", e.element, !1, !0),
                    n &&
                      ((n =
                        e.collectionId &&
                        A[e.collectionId] &&
                        A[e.collectionId].method &&
                        "GET" !== A[e.collectionId].method),
                      ((!e.collectionId && e.settings) || n) && H.push(e)));
              }
              function F(e, t, n, o) {
                e.forEach(function (e) {
                  var s,
                    a,
                    i = e.value || n;
                  void 0 !== e.translate &&
                    ((a =
                      o.settings && o.settings.translateId
                        ? o.settings.translateId
                        : o.id),
                    (s = [e.translateId || a, i]),
                    (a = "object" === b(e.translate) ? e.translate : {}),
                    e.translate && (i = k.translate(s, a)),
                    (a = t.pathIndex || 0),
                    (w.translations[t.id] = w.translations[t.id] || [a]),
                    -1 === w.translations[t.id].indexOf(a) &&
                      w.translations[t.id].push(a)),
                    k.binding(t.element, i, e, t);
                });
              }
              function G(e, t, n) {
                var o, s;
                t && !e.components && (e.components = {}),
                  e.components[t] ||
                    ((s = n.element || "div"),
                    (o = document.createElement(s)),
                    "a" !== n.element ||
                      n.draggable ||
                      o.addEventListener("dragstart", function (e) {
                        e.preventDefault();
                      }),
                    (e.components[t] = {
                      id: t,
                      element: o,
                      state: n.state || "default",
                      components: {},
                      parent: e,
                      source: n,
                      parentElement: e.element,
                      pageComponent: e.pageComponent,
                      path: e.path ? e.path.slice(0) : [],
                    }),
                    n.collectionId &&
                      ((e.components[t].collectionId = n.collectionId),
                      (e.components[t].collection = {})),
                    n.collection &&
                      (e.components[t].collection = (0, y.copy)(n.collection)),
                    n.origin && (e.components[t].origin = n.origin),
                    n.system && (e.components[t].system = n.system),
                    n.settings && (e.components[t].settings = n.settings),
                    e.id ||
                      e.components[t].path.push(
                        e.pageComponent ? "page" : "layout"
                      ),
                    e.components[t].path.push("components"),
                    e.components[t].path &&
                      (e.components[t].path.push(t),
                      (s = e.components[t].path),
                      ((n = w.components)[t] = n[t] || {}),
                      (n[t].check = n[t].check || []),
                      (n[t].index = n[t].index || {}),
                      (n[t].list = n[t].list || []),
                      -1 === n[t].check.indexOf(s.toString())
                        ? (n[t].check.push(s.toString()),
                          n[t].list.push(s),
                          1 < n[t].list.length &&
                            (e.components[t].pathIndex = n[t].list.length - 1),
                          (n[t].index[s.toString()] =
                            e.components[t].pathIndex || 0))
                        : (e.components[t].pathIndex =
                            n[t].index[s.toString()])),
                    (o._reference = e.components[t]));
              }
              function z(e, t, n, o) {
                var s = ("layout" === e ? L : N).source,
                  a = "layout" === e ? L : N;
                t && ((s = t.source), (a = t.content)),
                  s.layout.forEach(function (t) {
                    t.forEach(function (t) {
                      var i,
                        r,
                        l = !1;
                      0 === t.indexOf("&") &&
                        ((l = !0), (t = t.replace("&", ""))),
                        "&" !== t[0] &&
                          ((r = !!x[t] && (0, y.copy)(x[t])),
                          (i = (function (e) {
                            var t,
                              n = !1;
                            if (e && e.component) {
                              if (
                                (n =
                                  !!x[e.component] &&
                                  (0, y.copy)(x[e.component]))
                              ) {
                                for (var o in ((n.origin = e.component), e))
                                  e.hasOwnProperty(o) &&
                                    ((t = e[o]),
                                    (n[o] =
                                      "settings" === o
                                        ? Object.assign(n[o] || {}, t)
                                        : t));
                                delete n.component;
                              }
                            } else n = e;
                            return n;
                          })((s.content && s.content[t]) || r)),
                          (r = t),
                          s.content &&
                            s.content[t] &&
                            s.content[t].collectionId &&
                            i.collectionId !== s.content[t].collectionId &&
                            (i.collectionId = s.content[t].collectionId),
                          o && i.collection && (t += a.index),
                          i &&
                            (G(a, t, i),
                            (t = a.components[t]),
                            l && ((t.isRepeat = !0), (t.index = 0)),
                            !n ||
                              i.collectionId ||
                              i.settings ||
                              (t.component = n),
                            o && i.collectionId && (t.origin = r),
                            Y(t, null, !0),
                            i.layout
                              ? z(
                                  e,
                                  { source: i, content: t },
                                  (!i.collectionId && !i.settings && n) || t,
                                  !1
                                )
                              : delete t.components,
                            "layout" === e &&
                              !0 === i.content &&
                              (N.parent = t)));
                    });
                  });
              }
              function q(e, t, n, o) {
                var s = R.router.lang,
                  a = O.router.head,
                  i = "";
                e && e[n]
                  ? ((i = "object" === b(e[n]) ? e[n][s] || "" : e[n] || ""),
                    (t[n] = i))
                  : ((i = "object" === b(a[n]) ? a[n][s] || "" : a[n] || ""),
                    o && L[n] && (i = L[n])),
                  "title" === n
                    ? (document.title = i)
                    : (o = document.querySelector(
                        'meta[name="'.concat(n, '"]')
                      ))
                    ? o.setAttribute("content", i)
                    : (((o = document.createElement("meta")).name = n),
                      (o.content = i),
                      document.getElementsByTagName("head")[0].appendChild(o));
              }
              function V(e, t, n) {
                q(n, t, "title", "page" === e),
                  q(n, t, "description", "page" === e),
                  q(n, t, "keywords", "page" === e);
              }
              function j() {
                k.publish("EVENTS_RESET");
                var e = M.page,
                  t = (0, y.copy)(C[e]);
                V("page", N, t.head),
                  (document.body.className = e),
                  (N.name = e),
                  (N.source = t.content),
                  (N.element = N.parent.element),
                  (N.element.innerHTML = ""),
                  (N.pageComponent = !0),
                  (N.components = {}),
                  z("page"),
                  _.page || (_.page = !0),
                  setTimeout(function () {
                    H.forEach(function (e) {
                      B({ detail: { component: e } });
                    }),
                      (H = []),
                      k.publish("PAGE_READY");
                  }, 0);
              }
              function B(e) {
                var t = e.detail;
                (e = t.component) &&
                  (0, y.findInObject)(R.dom, e.path) &&
                  -1 === ["window", "document", "body"].indexOf(e.id) &&
                  ((function (e, t) {
                    var n = e.cache,
                      o = e.collection,
                      s = o && o.state,
                      a = o && o.options,
                      i = o && o.params;
                    if (o && s && a && i && n && !a.reset)
                      if (e.data) t || (e.data = n);
                      else {
                        if (
                          ((o =
                            n.length > a.initialItems
                              ? n.slice(0, a.initialItems)
                              : n),
                          (s.visiblePrev = !1),
                          n.length > o.length && (s.visibleNext = !0),
                          n.length === o.length &&
                            s.dataNext &&
                            (s.visibleNext = !0),
                          (s.visiblePages = [0]),
                          (s.visiblePage = 0),
                          a.initialItems > a.visibleItems)
                        ) {
                          var r = a.initialItems / a.visibleItems;
                          s.visiblePages = [];
                          for (var l = 0; l < r; l += 1) s.visiblePages.push(l);
                          s.visiblePage = r - 1;
                        }
                        a.initialItems > a.visibleItems &&
                          ((t = a.initialItems / a.visibleItems - 1),
                          (i.page = t),
                          (i.size = a.visibleItems)),
                          (e.data = o);
                      }
                    else e.data = n;
                  })(e, t.noPagination),
                  k.publish("COMPONENT_RENDER", e.element),
                  (function e(t, n, o, s) {
                    var a = o && t.collectionId,
                      i = !1;
                    (o = o || t),
                      n
                        ? Array.isArray(n) && 0 < n.length && t.isRepeat
                          ? ((i = !0),
                            o.clearData &&
                              t.parent.components &&
                              1 < Object.keys(t.parent.components).length &&
                              Object.keys(t.parent.components).forEach(
                                function (e) {
                                  0 !== t.parent.components[e].index &&
                                    (t.parent.components[e].element
                                      .parentElement &&
                                      t.parent.components[
                                        e
                                      ].element.parentElement.removeChild(
                                        t.parent.components[e].element
                                      ),
                                    delete t.parent.components[e]);
                                }
                              ),
                            n.forEach(function (n, s) {
                              var a = n.id || s + 1,
                                i = t.id + a,
                                r = t.parent.components[i];
                              r ||
                                (G(t.parent, i, t.source),
                                ((r = t.parent.components[i]).id = t.id),
                                (r.isRepeat = !0),
                                (r.index = a),
                                n.id && (r.mapIndex = s + 1),
                                (r.component = o),
                                r.source.layout &&
                                  z(
                                    r.pageComponent ? "page" : "layout",
                                    { source: r.source, content: r },
                                    o,
                                    !0
                                  )),
                                Y(r, n),
                                r.components &&
                                  (Object.keys(r.components).forEach(function (
                                    t
                                  ) {
                                    e(r.components[t], n, o, !0);
                                  }),
                                  r.events &&
                                    !r.collectionId &&
                                    k.publish("COMPONENT_READY", r.element));
                            }))
                          : (a && (n = null), Y(t, n))
                        : Y(t),
                      t.components &&
                        !i &&
                        (Object.keys(t.components).forEach(function (a) {
                          t.components[a] &&
                            !t.components[a].collectionId &&
                            (((!t.components[a].index ||
                              0 !== t.components[a].index) &&
                              t.components[a].index) ||
                              e(t.components[a], n, o, s));
                        }),
                        t.events &&
                          t.id !== o.id &&
                          !t.collectionId &&
                          k.publish("COMPONENT_READY", t.element));
                  })(e, e.data),
                  (e.clearData = !1),
                  (e.refresh = !1),
                  k.publish("COMPONENT_READY", e.element, !1, !0),
                  k.publish("COMPONENTS_READY"));
              }
              function W(e) {
                Y(e.detail.component), k.publish("REFRESH_PAGE_SCROLL");
              }
              (f = {}),
                Object.defineProperties(f, {
                  init: {
                    value: function (e, t, n, o, s, a) {
                      E ||
                        ((_ = o),
                        (R = n),
                        (w = a),
                        (k = s),
                        (O = e),
                        (x = (I = t).components),
                        (A = I.collections),
                        (P = I.layouts),
                        (C = I.pages),
                        (N = R.dom.page),
                        (L = R.dom.layout),
                        (M = R.router),
                        (D = document.body),
                        (_.dom = !0),
                        U(),
                        (E = !0));
                    },
                    configurable: !0,
                    writable: !1,
                  },
                  layout: {
                    value: function () {
                      k.publish("EVENTS_RESET"),
                        (N = R.dom.page),
                        (L = R.dom.layout),
                        Array.from(D.childNodes).forEach(function (e) {
                          "SCRIPT" !== e.nodeName && D.removeChild(e);
                        });
                      var e = M.page,
                        t = (0, y.copy)(C[e]).layout,
                        n = P[t];
                      n && n.body && n.body.layout
                        ? (V("layout", L, n.head),
                          (document.documentElement.className = t),
                          (L.name = t),
                          (L.source = n.body),
                          (L.element = D),
                          (L.pageComponent = !1),
                          (L.components = {}),
                          z("layout"),
                          (_.layout = !0),
                          j())
                        : k.error(
                            "DOM",
                            "Layout for page ".concat(e, " not found.")
                          );
                    },
                    configurable: !0,
                    writable: !1,
                  },
                  page: { value: j, configurable: !0, writable: !1 },
                  render: { value: B, configurable: !0, writable: !1 },
                  paginate: {
                    value: function (e) {
                      (e = e.detail.component) &&
                        (0, y.findInObject)(R.dom, e.path) &&
                        -1 === ["window", "document", "body"].indexOf(e.id) &&
                        (function (e) {
                          var t,
                            n,
                            o,
                            s,
                            a = e.cache,
                            i = e.collection,
                            r = i && i.state,
                            l = i && i.options,
                            c = i && i.params;
                          i &&
                            r &&
                            l &&
                            c &&
                            a &&
                            !l.reset &&
                            e.data &&
                            ((r.append = !1),
                            (r.prepend = !1),
                            r.visibleAppend
                              ? r.dataNext
                                ? ((r.visibleAppend = !1),
                                  (r.visiblePage += 1),
                                  r.visiblePages.push(r.visiblePage),
                                  (r.append = !0),
                                  l.domItems &&
                                    e.data.length === l.domItems &&
                                    ((n =
                                      e.components["scroll-wrapper"].components
                                        .scroll),
                                    (o = r),
                                    (s = l.visibleItems),
                                    Object.keys(n.components).forEach(function (
                                      e,
                                      t
                                    ) {
                                      o &&
                                        n.components[e].element.parentElement &&
                                        (o.append &&
                                          t <= s &&
                                          (n.components[
                                            e
                                          ].parentElement.removeChild(
                                            n.components[e].element
                                          ),
                                          delete n.components[e]),
                                        o.prepend &&
                                          s < t &&
                                          (n.components[
                                            e
                                          ].parentElement.removeChild(
                                            n.components[e].element
                                          ),
                                          delete n.components[e]));
                                    }),
                                    e.components[
                                      "scroll-wrapper"
                                    ].iscroll.refresh(),
                                    r.visiblePages.shift(),
                                    (r.visiblePrev = !0)),
                                  (c.page =
                                    r.dataPages[r.dataPages.length - 1] + 1),
                                  k.publish(
                                    "DATA_FETCH",
                                    null,
                                    { component: e },
                                    !0
                                  ))
                                : ((r.visibleNext = !1),
                                  a.length > e.data.length &&
                                    ((i =
                                      (t =
                                        (r.visiblePage + 1) * l.visibleItems -
                                        r.dataPages[0] * c.size) +
                                      l.visibleItems),
                                    0 < (i = a.slice(t, i)).length &&
                                      ((e.data = e.data.concat(i)),
                                      (r.visibleAppend = !1),
                                      (r.visiblePage += 1),
                                      r.visiblePages.push(r.visiblePage),
                                      (r.append = !0),
                                      e.data.length < a.length &&
                                        (r.visibleNext = !0),
                                      k.publish(
                                        "DOM_RENDER",
                                        null,
                                        { component: e, noPagination: !0 },
                                        !0
                                      ))))
                              : r.visiblePrepend &&
                                (r.dataPrev
                                  ? ((r.visiblePrepend = !1),
                                    (r.visiblePage = r.visiblePages[0] - 1),
                                    r.visiblePages.unshift(r.visiblePage),
                                    (r.prepend = !0),
                                    l.domItems &&
                                      e.data.length === l.domItems &&
                                      ((l =
                                        e.components["scroll-wrapper"]
                                          .components.scroll.components),
                                      (e.scrollToElement = Object.keys(l)[1]),
                                      r.visiblePages.pop(),
                                      (r.visibleNext = !0)),
                                    (c.page = r.dataPages[0] - 1),
                                    (e.clearData = !0),
                                    k.publish(
                                      "DATA_FETCH",
                                      null,
                                      { component: e },
                                      !0
                                    ))
                                  : (r.visiblePrev = !1)));
                        })(e);
                    },
                    configurable: !0,
                    writable: !1,
                  },
                  refresh: { value: W, configurable: !0, writable: !1 },
                  resize: {
                    value: function () {
                      var e = JSON.stringify(R.system.responsive);
                      U(),
                        e !== JSON.stringify(R.system.responsive) &&
                          k.publish("BREAKPOINT_CHANGED");
                    },
                    configurable: !0,
                    writable: !1,
                  },
                  parse: {
                    value: function (e) {
                      z(e.detail);
                    },
                    configurable: !0,
                    writable: !1,
                  },
                  header: {
                    value: function (e) {
                      (e = e.detail), V("page", N, e);
                    },
                    configurable: !0,
                    writable: !1,
                  },
                  parseComponent: {
                    value: function (e) {
                      (e = e.detail.componentId),
                        (e = k.component(e)) &&
                          z(
                            e.pageComponent ? "page" : "layout",
                            { source: e.source, content: e },
                            e
                          );
                    },
                    configurable: !0,
                    writable: !1,
                  },
                  translate: {
                    value: function () {
                      Object.keys(w.translations).forEach(function (e) {
                        w.translations[e].forEach(function (t) {
                          (t = k.component(e, t)) &&
                            W({ detail: { component: t } });
                        });
                      });
                    },
                    configurable: !0,
                    writable: !1,
                  },
                }),
                (t.default = f);
            }.apply(t, n)) || (e.exports = n);
      },
      2584: function (module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__,
          __WEBPACK_AMD_DEFINE_RESULT__,
          __WEBPACK_AMD_DEFINE_ARRAY__ = [
            exports,
            __webpack_require__(7113),
            __webpack_require__(2402),
            __webpack_require__(3287),
            __webpack_require__(5438),
            __webpack_require__(8406),
            __webpack_require__(8703),
            __webpack_require__(8785),
            __webpack_require__(7797),
            __webpack_require__(7058),
            __webpack_require__(6510),
            __webpack_require__(7680),
            __webpack_require__(2756),
            __webpack_require__(7814),
            __webpack_require__(6983),
            __webpack_require__(6259),
            __webpack_require__(2668),
            __webpack_require__(9757),
            __webpack_require__(9275),
            __webpack_require__(5083),
            __webpack_require__(3275),
            __webpack_require__(4740),
            __webpack_require__(1527),
            __webpack_require__(1650),
            __webpack_require__(158),
            __webpack_require__(9002),
            __webpack_require__(209),
          ],
          __WEBPACK_AMD_DEFINE_RESULT__ = function (
            _exports,
            _router,
            _data,
            _dom,
            _helpers,
            _validate,
            _series,
            _scroll2,
            _purchase,
            _prm,
            _playerui,
            _player,
            _playback,
            _parental,
            _modal,
            _links,
            _image,
            _form,
            _error,
            _epg,
            _dropdown,
            _component,
            _collection,
            _buttons,
            _auth,
            _asset,
            _analytics
          ) {
            "use strict";
            function _interopRequireDefault(e) {
              return e && e.__esModule ? e : { default: e };
            }
            Object.defineProperty(_exports, "__esModule", { value: !0 }),
              (exports.default = void 0),
              (_router = _interopRequireDefault(_router)),
              (_data = _interopRequireDefault(_data)),
              (_dom = _interopRequireDefault(_dom)),
              (_validate = _interopRequireDefault(_validate)),
              (_series = _interopRequireDefault(_series)),
              (_scroll2 = _interopRequireDefault(_scroll2)),
              (_purchase = _interopRequireDefault(_purchase)),
              (_prm = _interopRequireDefault(_prm)),
              (_playerui = _interopRequireDefault(_playerui)),
              (_player = _interopRequireDefault(_player)),
              (_playback = _interopRequireDefault(_playback)),
              (_parental = _interopRequireDefault(_parental)),
              (_modal = _interopRequireDefault(_modal)),
              (_links = _interopRequireDefault(_links)),
              (_image = _interopRequireDefault(_image)),
              (_form = _interopRequireDefault(_form)),
              (_error = _interopRequireDefault(_error)),
              (_epg = _interopRequireDefault(_epg)),
              (_dropdown = _interopRequireDefault(_dropdown)),
              (_component = _interopRequireDefault(_component)),
              (_collection = _interopRequireDefault(_collection)),
              (_buttons = _interopRequireDefault(_buttons)),
              (_auth = _interopRequireDefault(_auth)),
              (_asset = _interopRequireDefault(_asset)),
              (_analytics = _interopRequireDefault(_analytics));
            var Handlers = {};
            (Handlers.validate = _validate.default),
              (Handlers.series = _series.default),
              (Handlers.scroll = _scroll2.default),
              (Handlers.purchase = _purchase.default),
              (Handlers.prm = _prm.default),
              (Handlers.playerui = _playerui.default),
              (Handlers.player = _player.default),
              (Handlers.playback = _playback.default),
              (Handlers.parental = _parental.default),
              (Handlers.modal = _modal.default),
              (Handlers.links = _links.default),
              (Handlers.image = _image.default),
              (Handlers.form = _form.default),
              (Handlers.error = _error.default),
              (Handlers.epg = _epg.default),
              (Handlers.dropdown = _dropdown.default),
              (Handlers.component = _component.default),
              (Handlers.collection = _collection.default),
              (Handlers.buttons = _buttons.default),
              (Handlers.auth = _auth.default),
              (Handlers.asset = _asset.default),
              (Handlers.analytics = _analytics.default);
            var instance,
              System,
              Paths,
              State,
              Environment,
              Logger,
              Settings,
              Register,
              orientationChanged = !1;
            function _keyDown(e) {
              var t = Settings.mapping[e.which || e];
              publish("KEY_DOWN", null, e), t && publish(t, null, e);
            }
            function _click(e) {
              publish("DOCUMENT_CLICK", null, e);
            }
            function _mousemove(e) {
              publish("DOCUMENT_MOUSEMOVE", null, e);
            }
            function _touchstart(e) {
              publish("DOCUMENT_TOUCHSTART", null, e);
            }
            function _touchend(e) {
              publish("DOCUMENT_TOUCHEND", null, e);
            }
            function _resize(e) {
              publish("DOM_RESIZE", null, e),
                orientationChanged &&
                  ((orientationChanged = !1),
                  publish("DOM_ORIENTATION_CHANGE", null, e));
            }
            function _orientationchange() {
              orientationChanged = !0;
            }
            function _scroll(e) {
              publish("PAGE_SCROLL", null, e);
            }
            function _registerDefaults(event, target, module, method, async) {
              var component = State.dom.system[target],
                handler;
              "Events" === module && (handler = eval(method)),
                "Router" === module && (handler = _router.default[method]),
                "Data" === module && (handler = _data.default[method]),
                "Dom" === module && (handler = _dom.default[method]),
                "System" === module && (handler = System[method]),
                method ||
                  Object.keys(module).forEach(function (e) {
                    var t = module[e] || {},
                      n = module.state;
                    (component.events[event] = component.events[event] || {}),
                      (component.events[event].handlers =
                        component.events[event].handlers || {}),
                      (component.events[event].handlersList =
                        component.events[event].handlersList || []),
                      component.events[event].handlersList.push(e),
                      (component.events[event].handlers[e] =
                        component.events[event].handlers[e] || {}),
                      (component.events[event].handlers[e].options = t),
                      (component.events[event].responsive = module.responsive),
                      (component.events[event].handlers[e].state = n);
                  }),
                register({
                  detail: {
                    event: event,
                    component: component,
                    target: component.element,
                    handler: handler,
                  },
                }),
                (component.events[event] = component.events[event] || {}),
                (component.events[event].async = async);
            }
            function _defaultEvents() {
              var e, t;
              Settings.events &&
                ((e = Settings.events.system),
                (t = Settings.events.project),
                Object.keys(e).forEach(function (t) {
                  _registerDefaults(
                    t,
                    e[t].target,
                    e[t].handler,
                    e[t].method,
                    e[t].async
                  );
                }),
                Object.keys(t).forEach(function (e) {
                  _registerDefaults(
                    e,
                    t[e].target,
                    t[e].handler,
                    t[e].method,
                    t[e].async
                  );
                }));
            }
            function _dispatch(e, t, n) {
              n
                ? setTimeout(function () {
                    e.dispatchEvent(t);
                  }, 0)
                : e.dispatchEvent(t);
            }
            function _checkState(e, t) {
              var n = !0;
              return e && t && t.state && t.state !== e && (n = !1), n;
            }
            function _checkEvent(e) {
              var t = e.type,
                n = Register[t];
              n &&
                Object.keys(n).forEach(function (o) {
                  n[o].forEach(function (n) {
                    var s,
                      a,
                      i = (0, _helpers.findInObject)(
                        State.dom,
                        Paths.components[o].list[n]
                      ),
                      r = e.target;
                    i &&
                      i.events &&
                      i.events[t] &&
                      i.element === r &&
                      ((s = i.events[t].handlers),
                      (a = i.events[t].responsive),
                      i.events[t].handlersList.forEach(function (n) {
                        var o = s[n],
                          l = _checkState(o.state, r._reference),
                          c = o.options || {};
                        a &&
                          Object.keys(a).forEach(function (e) {
                            State.system.responsive[e] &&
                              a[e][n] &&
                              (c = a[e][n] || {});
                          }),
                          l &&
                            (Settings.debug &&
                              ((l = {
                                event: t,
                                component: i.index ? i.id + i.index : i.id,
                                handler: n,
                              }),
                              o.state && (l.state = o.state),
                              e.detail &&
                                0 < Object.keys(e.detail).length &&
                                (l.details = e.detail),
                              Logger.push(l)),
                            Handlers[n] &&
                              Handlers[n]({
                                element: r,
                                component: r._reference,
                                rootComponent:
                                  (r._reference && r._reference.component) ||
                                  r._reference,
                                options: c,
                                action: c.action,
                                state: o.state,
                                event: e,
                                details: e.detail,
                              }));
                      }));
                  });
                });
            }
            function _subscribe(e, t, n) {
              (n || window).addEventListener(e, t);
            }
            function _unsubscribe(e, t, n) {
              (n || window).removeEventListener(e, t);
            }
            function init(e, t, n, o, s, a) {
              instance ||
                ((Paths = a),
                (System = s),
                (Logger = (State = n).logger.events),
                (Settings = e),
                (Environment = State.system.environment),
                (Register = Paths.events),
                _defaultEvents(),
                (o.events = !0),
                _router.default.init(e, t, n, o, s),
                _dom.default.init(e, t, n, o, s, a),
                _data.default.init(e, t, n, o, s, a),
                (instance = !0));
            }
            function publish(e, t, n, o) {
              var s;
              e &&
                ((s = new CustomEvent(e, { bubbles: !1, detail: n || {} })),
                System.trace({ event: e, target: t, data: n }),
                Register[e]
                  ? Object.keys(Register[e]).forEach(function (n) {
                      Register[e][n].forEach(function (a) {
                        (a = (0, _helpers.findInObject)(
                          State.dom,
                          Paths.components[n].list[a]
                        )),
                          t && a && a.element === t
                            ? _dispatch(
                                t,
                                s,
                                (a.events[e] && a.events[e].async) || o
                              )
                            : !t &&
                              a &&
                              a.events &&
                              _dispatch(a.element, s, a.events[e].async || o);
                      });
                    })
                  : _dispatch(t || window, s, o));
            }
            function register(e) {
              var t = (s = e.detail).event,
                n = s.component,
                o = s.target,
                s =
                  ((e = n.index ? n.id + n.index : n.id),
                  s.handler || _checkEvent);
              (n = n.pathIndex || 0),
                (Register[t] = Register[t] || {}),
                (Register[t][e] = Register[t][e] || [n]),
                -1 === Register[t][e].indexOf(n)
                  ? (Register[t][e].push(n),
                    "keydown" === t && "stb" === Environment
                      ? (window.sendKeyEvent = _keyDown)
                      : _subscribe(t, s, o))
                  : (_unsubscribe(t, s, o), _subscribe(t, s, o));
            }
            function reset() {
              Logger = State.logger.events;
            }
            var Events = {};
            Object.defineProperties(Events, {
              init: { value: init, configurable: !0, writable: !1 },
              reset: { value: reset, configurable: !0, writable: !1 },
              register: { value: register, configurable: !0, writable: !1 },
              publish: { value: publish, configurable: !0, writable: !1 },
            });
            var _default = Events;
            exports.default = _default;
          }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__);
        void 0 === __WEBPACK_AMD_DEFINE_RESULT__ ||
          (module.exports = __WEBPACK_AMD_DEFINE_RESULT__);
      },
      5438: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              function o(e) {
                return (o =
                  "function" == typeof Symbol &&
                  "symbol" == typeof Symbol.iterator
                    ? function (e) {
                        return typeof e;
                      }
                    : function (e) {
                        return e &&
                          "function" == typeof Symbol &&
                          e.constructor === Symbol &&
                          e !== Symbol.prototype
                          ? "symbol"
                          : typeof e;
                      })(e);
              }
              var s;
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t._getUuid = p),
                (t._getBrowser = d),
                (t._getVersion = u),
                (t._getOS = m),
                (t.hasService = function (e) {
                  var t = n.System.getItem("services");
                  return !!Array.isArray(t) && -1 !== t.indexOf(e);
                }),
                (t.isMobileSafari = function () {
                  var e = !!a.match(/iP(ad|hone)/i),
                    t = !!a.match(/WebKit/i);
                  return e && t && !a.match(/CriOS/i);
                }),
                (t.setFallbackStreamRules = h),
                (t.dummyComponent = function () {
                  return {
                    cache: {},
                    collection: {},
                    collectionId: "",
                    element: null,
                    id: "window",
                    path: [],
                  };
                }),
                (t.setDRM = g),
                (t.setSupportedDRM = function () {
                  var e = new bitmovin.player.Player(
                    document.body,
                    n.Settings.app.player.config
                  );
                  return e.getSupportedDRM().then(g).then(e.destroy.bind(e));
                }),
                (t.getDevice = function () {
                  return s || {};
                }),
                (t.generateDevice = function (e, t) {
                  var o,
                    a = t.key,
                    i = t.type;
                  return (
                    a &&
                      ((o = n.System.getItem(a, i)),
                      (t = p()),
                      o
                        ? ((s = e = o),
                          (n.State.system.browser = s.browser),
                          (n.State.system.browserVersion = s.version),
                          (n.State.system.os = s.os))
                        : ((s = {
                            browser: d(),
                            version: u(),
                            os: m(),
                            uuid: t,
                            identifier: t,
                            deviceInfo: {
                              deviceType: "cloud_client",
                              appVersion: "1.0.0",
                              networkType: "Broadband",
                              deviceModel: m(),
                              deviceName: m(),
                              deviceOs: m(),
                              playerType: n.Settings.app.player.drm
                                ? "Webplayer-".concat(n.Settings.app.player.drm)
                                : "Webplayer",
                              dhcp: !0,
                              casId: t,
                              mac: t.split("-").join("").substring(0, 12),
                              uuid: t,
                            },
                          }),
                          (n.State.system.browser = s.browser),
                          (n.State.system.browserVersion = s.version),
                          (n.State.system.os = s.os),
                          n.System.setItem(a, s, i),
                          (e = s))),
                    e
                  );
                }),
                (t.paramsBuilder = function (e, t) {
                  var n = "";
                  if (0 < Object.keys(e).length)
                    for (var o in ((n = "?"), e))
                      e.hasOwnProperty(o) &&
                        (1 < n.length && (n += "&"),
                        (n += t
                          ? encodeURI("".concat(o, "=").concat(e[o]))
                          : "".concat(o, "=").concat(e[o])));
                  return n;
                }),
                (t.findInObject = function (e, t) {
                  var n = e;
                  return (
                    t &&
                      (Array.isArray(t)
                        ? t.forEach(function (e) {
                            n = !(!n || void 0 === n[e]) && n[e];
                          })
                        : (n = n[t])),
                    n
                  );
                }),
                (t.deepOverride = f),
                (t.copy = y),
                (t.getRequestSize = function (e) {
                  var t = 5;
                  return (
                    Object.keys(e).forEach(function (o) {
                      n.State.system.responsive[o] && (t = e[o].count || e[o]);
                    }),
                    t
                  );
                }),
                (t.undefinedDefault = v),
                (t.setStripe = function (e) {
                  var t = e.component,
                    n = e.title,
                    o = e.header,
                    s = e.seeAll,
                    a = e.headerIcon,
                    i = e.headerSvg,
                    r = e.allPage,
                    l = e.page,
                    c = e.info,
                    p = e.bigInfo,
                    d = e.progress,
                    u = e.orientation,
                    m = e.style,
                    h = e.effect,
                    g = e.size,
                    y = e.scrollItems,
                    b = e.tags,
                    S = e.provider,
                    T = e.url,
                    E = e.contentPath,
                    _ = e.contentID,
                    I = e.contentType,
                    w = e.responseType,
                    k = e.groupBy,
                    O = e.searchText,
                    R = e.visibleItems,
                    x = e.initialItems,
                    A = e.domItems,
                    P = e.memoryItems,
                    C = e.maxItems,
                    D = e.mode;
                  t.collection || (t.collection = {}),
                    (R = v(R, 5)),
                    (x = v(x, 2 * R)),
                    (A = v(A, 3 * R)),
                    (e = !!C && C + 1),
                    (C = {
                      url: v(T, t.collection.url),
                      params: {
                        page: 0,
                        size: e || x,
                        contentID: _ || null,
                        contentType: I || null,
                        searchText: O || null,
                      },
                      options: {
                        visibleItems: R,
                        initialItems: x,
                        domItems: C || A,
                        memoryItems: e || P || A,
                        maxItems: C,
                      },
                    }),
                    l && (C.response = { pageId: { default: l } }),
                    S && (C.provider = S),
                    k && (C.params.groupBy = k),
                    E && (C.contentPath = E),
                    (t.settings = {
                      title: n || !1,
                      header: o || !1,
                      seeAll: s || !1,
                      headerIcon: a || null,
                      headerSvg: i || null,
                      allPage: r || !1,
                      info: c || !1,
                      bigInfo: p || !1,
                      progress: d || !1,
                      orientation: u || "portrait",
                      style: m || "frame",
                      effect: h || !1,
                      size: g || "medium",
                      scrollItems: y || 1,
                      tags: b || !1,
                      mode: D || !1,
                      responseType: w || "",
                    }),
                    (t.settings.style = "zoom"),
                    "circle" === t.settings.effect &&
                      (t.settings.orientation = "square"),
                    "easter" === t.settings.effect &&
                      (t.settings.orientation = "portrait"),
                    (t.collection = f(t.collection, C));
                }),
                (t.formatSubtitle = function (e, t, o) {
                  var s = [],
                    a = n.System.translate(["index", "season-short"]),
                    i = n.System.translate(["index", "episode-short"]);
                  return (
                    0 < t && s.push(a + (t < 10 ? "0".concat(t) : t)),
                    0 < e && s.push(i + (e < 10 ? "0".concat(e) : e)),
                    2 === s.length && (s = [s.join(" ")]),
                    o && s.push(o),
                    s
                  );
                }),
                (t.stringInsert = function (e, t) {
                  if ("string" == typeof e && Array.isArray(t))
                    return e.replace(/{(\d+)}/g, function (e, n) {
                      return void 0 !== t[n] ? t[n] : "";
                    });
                  n.System.error(
                    "SYSTEM",
                    "stringInsert fail. Invalid arguments",
                    e,
                    t
                  );
                }),
                (t.saveComponentToHistory = function (e) {
                  var t = e.component;
                  (e = e.rootComponent) &&
                    b({ component: e.id, item: t.id + t.index }, "focusData");
                }),
                (t.getHistoryData = function (e) {
                  return history.state && history.state.data
                    ? e
                      ? history.state.data[e]
                      : history.state.data
                    : null;
                }),
                (t.removeHistoryData = function (e) {
                  var t;
                  history.state &&
                    history.state.data &&
                    ((t = history.state),
                    e ? delete t.data[e] : delete t.data,
                    history.replaceState(t, t.title, t.url));
                }),
                (t.setHistoryData = b),
                (t.transformDate = function (e, t) {
                  return (e = new Date(e.getTime())).setDate(t), e;
                }),
                (t.transformTime = function (e, t, n) {
                  return (e = new Date(e.getTime())).setHours(t, n, 0, 0), e;
                }),
                (t.formatTime = function (e, t) {
                  return (
                    (t.hourCycle = n.Settings.app.localization.hourCycle),
                    e.toLocaleTimeString(n.State.router.lang, t)
                  );
                }),
                (t.formatDate = function (e, t) {
                  return (
                    (t.hourCycle = n.Settings.app.localization.hourCycle),
                    e.toLocaleDateString(n.State.router.lang, t)
                  );
                }),
                (t.waitFrames = function (e) {
                  return new Promise(function (t) {
                    !(function e(n, o) {
                      o === n
                        ? t()
                        : S(function () {
                            return e(n + 1, o);
                          });
                    })(0, e);
                  });
                }),
                (t.offsetTop = function (e) {
                  for (var t = 0; e.parentElement; )
                    (t += e.offsetTop), (e = e.parentElement);
                  return t;
                }),
                (t.analyticsTune = function (e) {
                  var t = n.Source.constants["content-types"],
                    o = n.System.component("playback"),
                    s = n.System.component("playback-schedule"),
                    a = n.System.component("player");
                  (o.data.contentType === t.tv_channel && !s.data) ||
                    ("in" === e
                      ? (a.data.tuneInTime = Date.now())
                      : ((a.data.tuneOutDuration = Math.round(
                          (Date.now() - a.data.tuneInTime) / 1e3
                        )),
                        (a.data.duration = 0),
                        a.player &&
                          (a.data.duration = Math.round(
                            a.player.isLive()
                              ? a.player.getTimeShift() -
                                  a.player.getMaxTimeShift()
                              : a.player.getCurrentTime()
                          ))),
                    o.data.contentType === t.tv_channel
                      ? (((s = y(s.data[0])).contentType = o.data.contentType),
                        n.System.publish(
                          "in" === e ? "TUNE_IN" : "TUNE_OUT",
                          null,
                          { prm: a.data, playback: s }
                        ))
                      : n.System.publish(
                          "in" === e ? "START_PLAYING" : "STOP_PLAYING",
                          null,
                          { prm: a.data, playback: o.data }
                        ));
                }),
                (t.rAF = S);
              var a = navigator.userAgent,
                i = {
                  WindowsPC: [
                    /windows nt 10\.0/i,
                    /windows nt 6\.3/i,
                    /windows nt 6\.2/i,
                    /windows nt 6\.1/i,
                    /windows nt 6\.\d+/i,
                    /windows nt 6\.0/i,
                    /windows nt 5\.2/i,
                    /windows nt 5\.1/i,
                    /windows nt 5\.0/i,
                    /windows phone 8\./,
                  ],
                  iPad: /\(iPad.*os (\d+)[._](\d+)/i,
                  iPhone: /\(iPhone.*os (\d+)[._](\d+)/i,
                  Macintosh: [
                    /os x 10[._]0/i,
                    /os x 10[._]1(\D|$)/i,
                    /os x 10[._]2/i,
                    /os x 10[._]3/i,
                    /os x 10[._]4/i,
                    /os x 10[._]5/i,
                    /os x 10[._]6/i,
                    /os x 10[._]7/i,
                    /os x 10[._]8/i,
                    /os x 10[._]9/i,
                    /os x 10[._]10/i,
                    /os x 10[._]11/i,
                    /os x 10[._]12/i,
                    /os x/i,
                  ],
                  Android: /android/i,
                },
                r = {
                  Edge: /edge/i,
                  Chromium: /chromium|crios/i,
                  Chrome: /chrome/i,
                  Safari: /safari/i,
                  IE: /msie|trident/i,
                  Opera: /opera|OPR/i,
                  Firefox: /firefox/i,
                },
                l = {
                  Edge: /Edge\/([\d\w\.\-]+)/i,
                  Firefox: /firefox\/([\d\w\.\-]+)/i,
                  IE: /msie\s([\d\.]+[\d])|trident\/\d+\.\d+;.*[rv:]+(\d+\.\d)/i,
                  Chrome: /chrome\/([\d\w\.\-]+)/i,
                  Chromium: /(?:chromium|crios)\/([\d\w\.\-]+)/i,
                  Safari: /version\/([\d\w\.\-]+)/i,
                  Opera: /version\/([\d\w\.\-]+)|OPR\/([\d\w\.\-]+)/i,
                },
                c =
                  window.requestAnimationFrame ||
                  window.webkitRequestAnimationFrame ||
                  window.mozRequestAnimationFrame ||
                  window.oRequestAnimationFrame ||
                  window.msRequestAnimationFrame ||
                  function (e) {
                    window.setTimeout(e, 1e3 / 60);
                  };
              function p() {
                return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(
                  /[018]/g,
                  function (e) {
                    return (
                      e ^
                      (crypto.getRandomValues(new Uint8Array(1))[0] &
                        (15 >> (e / 4)))
                    ).toString(16);
                  }
                );
              }
              function d() {
                var e;
                return (
                  Object.keys(r).forEach(function (t) {
                    r[t].test(a) && !e && (e = t);
                  }),
                  e || "Unknown"
                );
              }
              function u() {
                var e;
                return (
                  Object.keys(l).forEach(function (t) {
                    l[t].test(a) && !e && (e = RegExp.$1);
                  }),
                  e || "0.0.0"
                );
              }
              function m() {
                var e;
                return (
                  Object.keys(i).forEach(function (t) {
                    Array.isArray(i[t])
                      ? e ||
                        (i[t].filter(function (e) {
                          return e.test(a);
                        }).length &&
                          (e = t))
                      : i[t].test(a) && !e && (e = t);
                  }),
                  e || "WindowsPC"
                );
              }
              function h() {
                var e = {},
                  t = n.Source.constants["drm-types"],
                  o =
                    n.Settings.app.player.drm === t.widevine &&
                    n.System.getItem(["providers", t.widevine]) &&
                    n.System.getItem(["device", "deviceInfo", "vuid"]);
                (e[t.fairplay] = {
                  protocols: ["hls"],
                  priority: { "hls-none": 0 },
                }),
                  (e[t.widevine] = {
                    protocols: ["hls", "dash"],
                    priority: {
                      "hls-none": o ? 2 : 0,
                      "dash-none": 1,
                      "dash-widevine": o ? 0 : 2,
                    },
                  }),
                  (e[t.playready] = {
                    protocols: ["hls", "dash"],
                    priority: { "hls-none": 0, "dash-none": 1 },
                  }),
                  n.System.setItem("fallbackStreamRules", e);
              }
              function g(e) {
                for (
                  var t = {
                      widevine: "widevine",
                      fairplay: "apple.fps",
                      playready: "playready",
                    },
                    o = 0;
                  o < e.length;
                  o += 1
                ) {
                  for (
                    var s = e[o], a = Object.keys(t), i = null, r = 0;
                    r < a.length;
                    r += 1
                  )
                    if (-1 !== s.indexOf(t[a[r]])) {
                      i = a[r];
                      break;
                    }
                  if (i) {
                    n.Settings.app.player.drm = i;
                    break;
                  }
                }
                h();
              }
              function f(e, t) {
                return (
                  t &&
                    (0 === Object.keys(e).length
                      ? (e = Object.assign(e, t))
                      : (Object.keys(t).forEach(function (n) {
                          e[n] || (e[n] = t[n]);
                        }),
                        Object.keys(e).forEach(function (n) {
                          null !== e[n] && "object" === o(e[n])
                            ? void 0 !== t[n] &&
                              ("object" !== o(t[n]) || Array.isArray(t[n])
                                ? (e[n] = t[n])
                                : (e[n] = f(e[n], t[n])))
                            : (Object.keys(t).forEach(function (n) {
                                e[n] || (e[n] = t[n]);
                              }),
                              (e[n] = (void 0 !== t[n] ? t : e)[n]));
                        }))),
                  e
                );
              }
              function y(e) {
                var t = e;
                try {
                  t = JSON.parse(JSON.stringify(e));
                } catch (t) {
                  n.System.error("SYSTEM", "Copy object fail", e);
                }
                return t;
              }
              function v(e, t) {
                return void 0 !== e ? e : t;
              }
              function b(e, t) {
                var n = history.state;
                n &&
                  (t
                    ? ((n.data = n.data || {}), (n.data[t] = e))
                    : e
                    ? (n.data = e)
                    : delete n.data,
                  history.replaceState(n, n.title, n.url));
              }
              function S(e) {
                c(e);
              }
            }.apply(t, n)) || (e.exports = n);
      },
      6219: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = void 0),
                (e = {
                  log: function (e) {
                    setTimeout(function () {
                      var t,
                        o = n.Settings.app["logz-io"];
                      o.enabled &&
                        ((t = o.url),
                        (o = o.token),
                        n.Settings.debug && console.info("Logz Sent", e),
                        n.System.request(
                          "POST",
                          t + "?token=" + o,
                          JSON.stringify(e),
                          {
                            headers: [
                              { type: "Content-Type", info: "text/plain" },
                            ],
                          }
                        ));
                    });
                  },
                }),
                (t.default = e);
            }.apply(t, n)) || (e.exports = n);
      },
      4738: function (e, t, n) {
        var o;
        void 0 ===
          (o = function () {
            "use strict";
            function s(e, t) {
              var n = (65535 & e) + (65535 & t);
              return (((e >> 16) + (t >> 16) + (n >> 16)) << 16) | (65535 & n);
            }
            function a(e, t, n, o, a, i) {
              return s(
                ((i = s(s(t, e), s(o, i))) << (a = a)) | (i >>> (32 - a)),
                n
              );
            }
            function i(e, t, n, o, s, i, r) {
              return a((t & n) | (~t & o), e, t, s, i, r);
            }
            function r(e, t, n, o, s, i, r) {
              return a((t & o) | (n & ~o), e, t, s, i, r);
            }
            function l(e, t, n, o, s, i, r) {
              return a(t ^ n ^ o, e, t, s, i, r);
            }
            function c(e, t, n, o, s, i, r) {
              return a(n ^ (t | ~o), e, t, s, i, r);
            }
            function p(e, t) {
              var n, o, a, p;
              (e[t >> 5] |= 128 << t % 32),
                (e[14 + (((t + 64) >>> 9) << 4)] = t);
              for (
                var d = 1732584193,
                  u = -271733879,
                  m = -1732584194,
                  h = 271733878,
                  g = 0;
                g < e.length;
                g += 16
              )
                (d = i(
                  (n = d),
                  (o = u),
                  (a = m),
                  (p = h),
                  e[g],
                  7,
                  -680876936
                )),
                  (h = i(h, d, u, m, e[g + 1], 12, -389564586)),
                  (m = i(m, h, d, u, e[g + 2], 17, 606105819)),
                  (u = i(u, m, h, d, e[g + 3], 22, -1044525330)),
                  (d = i(d, u, m, h, e[g + 4], 7, -176418897)),
                  (h = i(h, d, u, m, e[g + 5], 12, 1200080426)),
                  (m = i(m, h, d, u, e[g + 6], 17, -1473231341)),
                  (u = i(u, m, h, d, e[g + 7], 22, -45705983)),
                  (d = i(d, u, m, h, e[g + 8], 7, 1770035416)),
                  (h = i(h, d, u, m, e[g + 9], 12, -1958414417)),
                  (m = i(m, h, d, u, e[g + 10], 17, -42063)),
                  (u = i(u, m, h, d, e[g + 11], 22, -1990404162)),
                  (d = i(d, u, m, h, e[g + 12], 7, 1804603682)),
                  (h = i(h, d, u, m, e[g + 13], 12, -40341101)),
                  (m = i(m, h, d, u, e[g + 14], 17, -1502002290)),
                  (d = r(
                    d,
                    (u = i(u, m, h, d, e[g + 15], 22, 1236535329)),
                    m,
                    h,
                    e[g + 1],
                    5,
                    -165796510
                  )),
                  (h = r(h, d, u, m, e[g + 6], 9, -1069501632)),
                  (m = r(m, h, d, u, e[g + 11], 14, 643717713)),
                  (u = r(u, m, h, d, e[g], 20, -373897302)),
                  (d = r(d, u, m, h, e[g + 5], 5, -701558691)),
                  (h = r(h, d, u, m, e[g + 10], 9, 38016083)),
                  (m = r(m, h, d, u, e[g + 15], 14, -660478335)),
                  (u = r(u, m, h, d, e[g + 4], 20, -405537848)),
                  (d = r(d, u, m, h, e[g + 9], 5, 568446438)),
                  (h = r(h, d, u, m, e[g + 14], 9, -1019803690)),
                  (m = r(m, h, d, u, e[g + 3], 14, -187363961)),
                  (u = r(u, m, h, d, e[g + 8], 20, 1163531501)),
                  (d = r(d, u, m, h, e[g + 13], 5, -1444681467)),
                  (h = r(h, d, u, m, e[g + 2], 9, -51403784)),
                  (m = r(m, h, d, u, e[g + 7], 14, 1735328473)),
                  (d = l(
                    d,
                    (u = r(u, m, h, d, e[g + 12], 20, -1926607734)),
                    m,
                    h,
                    e[g + 5],
                    4,
                    -378558
                  )),
                  (h = l(h, d, u, m, e[g + 8], 11, -2022574463)),
                  (m = l(m, h, d, u, e[g + 11], 16, 1839030562)),
                  (u = l(u, m, h, d, e[g + 14], 23, -35309556)),
                  (d = l(d, u, m, h, e[g + 1], 4, -1530992060)),
                  (h = l(h, d, u, m, e[g + 4], 11, 1272893353)),
                  (m = l(m, h, d, u, e[g + 7], 16, -155497632)),
                  (u = l(u, m, h, d, e[g + 10], 23, -1094730640)),
                  (d = l(d, u, m, h, e[g + 13], 4, 681279174)),
                  (h = l(h, d, u, m, e[g], 11, -358537222)),
                  (m = l(m, h, d, u, e[g + 3], 16, -722521979)),
                  (u = l(u, m, h, d, e[g + 6], 23, 76029189)),
                  (d = l(d, u, m, h, e[g + 9], 4, -640364487)),
                  (h = l(h, d, u, m, e[g + 12], 11, -421815835)),
                  (m = l(m, h, d, u, e[g + 15], 16, 530742520)),
                  (d = c(
                    d,
                    (u = l(u, m, h, d, e[g + 2], 23, -995338651)),
                    m,
                    h,
                    e[g],
                    6,
                    -198630844
                  )),
                  (h = c(h, d, u, m, e[g + 7], 10, 1126891415)),
                  (m = c(m, h, d, u, e[g + 14], 15, -1416354905)),
                  (u = c(u, m, h, d, e[g + 5], 21, -57434055)),
                  (d = c(d, u, m, h, e[g + 12], 6, 1700485571)),
                  (h = c(h, d, u, m, e[g + 3], 10, -1894986606)),
                  (m = c(m, h, d, u, e[g + 10], 15, -1051523)),
                  (u = c(u, m, h, d, e[g + 1], 21, -2054922799)),
                  (d = c(d, u, m, h, e[g + 8], 6, 1873313359)),
                  (h = c(h, d, u, m, e[g + 15], 10, -30611744)),
                  (m = c(m, h, d, u, e[g + 6], 15, -1560198380)),
                  (u = c(u, m, h, d, e[g + 13], 21, 1309151649)),
                  (d = c(d, u, m, h, e[g + 4], 6, -145523070)),
                  (h = c(h, d, u, m, e[g + 11], 10, -1120210379)),
                  (m = c(m, h, d, u, e[g + 2], 15, 718787259)),
                  (u = c(u, m, h, d, e[g + 9], 21, -343485551)),
                  (d = s(d, n)),
                  (u = s(u, o)),
                  (m = s(m, a)),
                  (h = s(h, p));
              return [d, u, m, h];
            }
            function d(e) {
              for (var t = "", n = 32 * e.length, o = 0; o < n; o += 8)
                t += String.fromCharCode((e[o >> 5] >>> o % 32) & 255);
              return t;
            }
            function u(e) {
              var t = [];
              for (t[(e.length >> 2) - 1] = void 0, o = 0; o < t.length; o += 1)
                t[o] = 0;
              for (var n = 8 * e.length, o = 0; o < n; o += 8)
                t[o >> 5] |= (255 & e.charCodeAt(o / 8)) << o % 32;
              return t;
            }
            function m(e) {
              for (
                var t, n = "0123456789abcdef", o = "", s = 0;
                s < e.length;
                s += 1
              )
                (t = e.charCodeAt(s)),
                  (o += n.charAt((t >>> 4) & 15) + n.charAt(15 & t));
              return o;
            }
            function h(e) {
              return unescape(encodeURIComponent(e));
            }
            function g(e) {
              return d(p(u((e = h(e))), 8 * e.length));
            }
            function f(e, t) {
              return (function (e, t) {
                var n,
                  o = u(e),
                  s = [],
                  a = [];
                for (
                  s[15] = a[15] = void 0,
                    16 < o.length && (o = p(o, 8 * e.length)),
                    n = 0;
                  n < 16;
                  n += 1
                )
                  (s[n] = 909522486 ^ o[n]), (a[n] = 1549556828 ^ o[n]);
                return (
                  (t = p(s.concat(u(t)), 512 + 8 * t.length)),
                  d(p(a.concat(t), 640))
                );
              })(h(e), h(t));
            }
            function y(e, t, n) {
              return t ? (n ? f(t, e) : m(f(t, e))) : n ? g(e) : m(g(e));
            }
            void 0 ===
              (o = function () {
                return y;
              }.call(t, n, t, e)) || (e.exports = o);
          }.apply(t, [])) || (e.exports = o);
      },
      7113: function (e, t, n) {
        (n = [t, n(6219)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              var o, s, a, i, r, l, c, p, d, u, m;
              function h(e) {
                return window.location.search.match(
                  new RegExp("(\\?|&)".concat(e, "(\\[\\])?=([^&]*)"))
                )[3];
              }
              function g(e, t, n, o, s, a) {
                var i = window.location.hostname.split(".")[0],
                  r = l.lang.place,
                  c = l.page.place,
                  p = l.id.place,
                  d = ["token"],
                  u = "",
                  m = "";
                return (
                  (m = e),
                  l.hash && (m += "#"),
                  r &&
                    n &&
                    ("subdomain" === r &&
                      3 === i.length &&
                      (m = m.replace(i, n)),
                    "folder" === r && (m += "".concat(n, "/")),
                    "params" === r &&
                      (u = (-1 < u.indexOf("?")
                        ? "".concat(u, "&lang=")
                        : "".concat(u, "?lang=")
                      ).concat(n))),
                  c &&
                    t &&
                    ("folder" === c &&
                      ((m += t), (m += o ? "/" : l.html ? ".html" : "")),
                    "params" === c &&
                      (u = (-1 < u.indexOf("?")
                        ? "".concat(u, "&page=")
                        : "".concat(u, "?page=")
                      ).concat(t))),
                  a &&
                    o &&
                    a.forEach(function (e) {
                      m += "".concat(e, "/");
                    }),
                  p &&
                    o &&
                    ("folder" === p && ((m += o), l.html && (m += ".html")),
                    "params" === p &&
                      (u = (-1 < u.indexOf("?")
                        ? "".concat(u, "&id=")
                        : "".concat(u, "?id=")
                      ).concat(o))),
                  s &&
                    Object.keys(s).forEach(function (e) {
                      -1 === d.indexOf(e) &&
                        (u = (-1 < u.indexOf("?")
                          ? "".concat(u, "&")
                          : "".concat(u, "?")
                        )
                          .concat(e, "=")
                          .concat(s[e]));
                    }),
                  (m += u)
                );
              }
              function f(e) {
                var t = {};
                return (
                  e.token && (t.token = e.token),
                  e.logout && (t.logout = e.logout),
                  t
                );
              }
              function y(e) {
                i.publish("EXIT_PAGE", null, p.page);
                var t,
                  n = l.page.default,
                  o = l.page.login,
                  s = l.page.error,
                  a =
                    ((w = window.location).port && ":".concat(w.port),
                    (S = "".concat(w.origin, "/") || 0),
                    l.hash ? S + w.pathname.substr(1) : S),
                  y =
                    ((k = (l.hash
                      ? window.location.hash
                      : window.location.pathname
                    )
                      .replace("#", "")
                      .replace(".html", "")),
                    l.hash ? k : k.substr(1)),
                  v =
                    ((b = O = y.split("/")),
                    (v = window.location.hostname.split(".")[0]),
                    (w = l.lang.default),
                    (S = l.lang.place),
                    (k = w),
                    l.lang.remember &&
                      ((k = i.getItem("language") || k),
                      i.setItem("language", k)),
                    S &&
                      ("subdomain" === S && 3 === v.length && (k = v),
                      "folder" === S &&
                        (k = -1 !== l.languages.indexOf(b[0]) ? b[0] : w),
                      "params" === S && (k = h("lang") || w)),
                    l.lang.remember && i.setItem("language", k),
                    k),
                  b =
                    ((b = O),
                    (k = S = l.page.default),
                    (w = l.page.place) &&
                      ("folder" === w &&
                        (k = b["folder" === l.lang.place ? 1 : 0] || S),
                      "params" === w && (k = h("page") || S)),
                    -1 < k.indexOf("?") && (k = k.split("?")[0]),
                    k);
                (e = Object.assign(
                  e || {},
                  ((w = O[O.length - 1]),
                  (t = {}),
                  ((w =
                    "" !== window.location.search
                      ? window.location.search
                      : w.split("?")[1])
                    ? w.replace("?", "").split("&")
                    : []
                  ).forEach(function (e) {
                    e && ((e = e.split("=")), (t[e[0]] = e[1]));
                  }),
                  t)
                )),
                  c[b] ||
                    (r.pages && r.pages[v] && r.pages[v][b]
                      ? (b = r.pages[v][b])
                      : (O = [(b = n)])),
                  o &&
                    !d.logged &&
                    c[b] &&
                    !c[b].public &&
                    ((e = f(e)), (O = [(b = o)])),
                  s && d.error && c[s] && ((e = f(e)), (O = [(b = s)]));
                var S,
                  T,
                  E,
                  _,
                  I,
                  w =
                    ((S = O),
                    (n = k = l.id.default),
                    (w = l.id.place) &&
                      ("folder" === w &&
                        ((o = 0),
                        (s = 1),
                        "folder" === l.lang.place && ((o += 1), (s += 1)),
                        "folder" === l.page.place && ((o += 1), (s += 1)),
                        S.length > s && (o = S.length - 1),
                        (n = S[o] || k)),
                      "params" === w && (n = h("id") || k)),
                    -1 < n.indexOf("?") && (n = n.split("?")[0]),
                    n),
                  k =
                    ((T = b),
                    (E = v),
                    (_ = w),
                    (I = []),
                    O.forEach(function (e) {
                      -1 < e.indexOf("?") && (e = e.split("?")[0]),
                        e !== T && e !== E && e !== _ && I.push(e);
                    }),
                    I),
                  O =
                    ((n = g(a, b, v, w, e, k)),
                    l.head && l.head[v]
                      ? l.haed[v].title
                      : l.head.title || document.title);
                (O = c[b].head && c[b].head[v] ? c[b].haed[v].title : O),
                  (O = c[b].head ? c[b].haed.title : O),
                  (p.baseURL = a),
                  (p.title = O),
                  (p.newLayout = p.layout !== c[b].layout),
                  (p.layout = c[b].layout || "default"),
                  (p.page = b),
                  (p.id = w),
                  (p.lang = v),
                  (p.params = (function (e) {
                    for (var t in e)
                      e.hasOwnProperty(t) && (e[t] = decodeURIComponent(e[t]));
                    return e;
                  })(e)),
                  (p.path = y),
                  (p.segments = k || []),
                  (p.url = n),
                  (u.language = m[p.lang] || {});
              }
              function v(e) {
                p.newLayout
                  ? (i.publish("DOM_LAYOUT"),
                    i.publish("LAYOUT_CHANGED"),
                    i.publish("ENTER_PAGE", null, p.page))
                  : (i.reset("page"),
                    i.publish("DOM_PAGE"),
                    i.publish("PAGE_CHANGED"),
                    i.publish("ENTER_PAGE", null, p.page),
                    n.default.log({ event: "PAGE_LOADED", page: e }));
              }
              function b(e) {
                if (e.state && e.state.page && null === p.page)
                  return "This is special case for the stupid browser Safari. Safari must die!";
                y(),
                  d.logged ||
                  p.params.token ||
                  p.params.logout ||
                  !r.app.login.redirect
                    ? (a ||
                        (history.state &&
                          history.state.data &&
                          (p.data = history.state.data),
                        history.replaceState(p, p.title, p.url),
                        (a = !0)),
                      v(p.page))
                    : location.replace(r.app.login.redirect);
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = void 0),
                (n = (o = n) && o.__esModule ? o : { default: o }),
                (e = {}),
                Object.defineProperties(e, {
                  init: {
                    value: function (e, t, o, a, h) {
                      s ||
                        ((d = a),
                        (i = h),
                        (l = (r = e).router),
                        (p = (u = o).router),
                        (c = t.pages),
                        (m = t.locales),
                        (window.onpopstate = b),
                        (p.layout = !1),
                        (d.router = !0),
                        (s = !0),
                        n.default.log({ event: "APP_LOADED" }));
                    },
                    configurable: !0,
                    writable: !1,
                  },
                  parse: { value: b, configurable: !0, writable: !1 },
                  navigate: {
                    value: function (e) {
                      var t,
                        n,
                        o,
                        s = e.detail,
                        a = s.page;
                      a &&
                        ((t = s.segments),
                        (n = s.id),
                        (o = s.params),
                        (e = g(p.baseURL, a, p.lang, n, o, t)),
                        !c[a] &&
                          r.pages &&
                          r.pages[p.lang] &&
                          r.pages[p.lang][a] &&
                          (a = r.pages[p.lang][a]),
                        c[a] && e !== p.url
                          ? (i.publish("BEFORE_CHANGE_PAGE"),
                            history.pushState(
                              {},
                              c[a].title || p.title,
                              g(p.baseURL, a, p.lang, n, o, t)
                            ),
                            y(o),
                            history.replaceState(p, p.title, p.url),
                            s.reset
                              ? ((p.layout = !1), i.publish("DATA_PRELOAD"))
                              : v(a))
                          : i.warning(
                              "ROUTER",
                              'Missing Page "'.concat(a, '".')
                            ));
                    },
                    configurable: !0,
                    writable: !1,
                  },
                  changeUrl: {
                    value: function (e) {
                      var t,
                        n,
                        o = e.detail,
                        s = o.page;
                      s &&
                        ((t = o.segments),
                        (n = o.id),
                        (e = o.params),
                        (o = g(p.baseURL, s, p.lang, n, e, t)),
                        !c[s] &&
                          r.pages &&
                          r.pages[p.lang] &&
                          r.pages[p.lang][s] &&
                          (s = r.pages[p.lang][s]),
                        c[s] && o !== p.url
                          ? (history.replaceState(
                              {},
                              c[s].title || p.title,
                              g(p.baseURL, s, p.lang, n, e, t)
                            ),
                            y(e),
                            history.replaceState(p, p.title, p.url))
                          : i.warning(
                              "ROUTER",
                              'Missing Page "'.concat(s, '".')
                            ));
                    },
                    configurable: !0,
                    writable: !1,
                  },
                  language: {
                    value: function (e) {
                      var t = e.detail;
                      (e = t.lang) &&
                      -1 < l.languages.indexOf(e) &&
                      e !== p.lang
                        ? (history.pushState(
                            {},
                            p.title,
                            g(p.baseURL, p.page, e, p.id, p.params, p.segments)
                          ),
                          y(),
                          history.replaceState(p, p.title, p.url),
                          i.publish("DOM_TRANSLATE"))
                        : (e && -1 !== l.languages.indexOf(e)) ||
                          i.warning("ROUTER", "Language change error", t);
                    },
                    configurable: !0,
                    writable: !1,
                  },
                  back: {
                    value: function () {
                      p.page !== l.page.default
                        ? history.back(-1)
                        : i.warning("ROUTER", "Trying to go back");
                    },
                    configurable: !0,
                    writable: !1,
                  },
                }),
                (t.default = e);
            }.apply(t, n)) || (e.exports = n);
      },
      3254: function (e, t, n) {
        (n = [t, n(5438)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              function o(e) {
                return (o =
                  "function" == typeof Symbol &&
                  "symbol" == typeof Symbol.iterator
                    ? function (e) {
                        return typeof e;
                      }
                    : function (e) {
                        return e &&
                          "function" == typeof Symbol &&
                          e.constructor === Symbol &&
                          e !== Symbol.prototype
                          ? "symbol"
                          : typeof e;
                      })(e);
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = void 0);
              var s = (function () {
                var e = {},
                  t = document.createElement("div").style,
                  n = (function () {
                    for (
                      var e = ["t", "webkitT", "MozT", "msT", "OT"],
                        n = 0,
                        o = e.length;
                      n < o;
                      n++
                    )
                      if (e[n] + "ransform" in t)
                        return e[n].substr(0, e[n].length - 1);
                    return !1;
                  })();
                function s(e) {
                  return (
                    !1 !== n &&
                    ("" === n ? e : n + e.charAt(0).toUpperCase() + e.substr(1))
                  );
                }
                (e.getTime =
                  Date.now ||
                  function () {
                    return new Date().getTime();
                  }),
                  (e.extend = function (e, t) {
                    for (var n in t) e[n] = t[n];
                  }),
                  (e.addEvent = function (e, t, n, o) {
                    e.addEventListener(t, n, !!o);
                  }),
                  (e.removeEvent = function (e, t, n, o) {
                    e.removeEventListener(t, n, !!o);
                  }),
                  (e.prefixPointerEvent = function (e) {
                    return window.MSPointerEvent
                      ? "MSPointer" + e.charAt(7).toUpperCase() + e.substr(8)
                      : e;
                  }),
                  (e.momentum = function (e, t, n, o, s, a) {
                    var i = e - t;
                    return (
                      (n =
                        (t = Math.abs(i) / n) / (a = void 0 === a ? 6e-4 : a)),
                      (a = e + ((t * t) / (2 * a)) * (i < 0 ? -1 : 1)) < o
                        ? ((a = s ? o - (s / 2.5) * (t / 8) : o),
                          (n = (i = Math.abs(a - e)) / t))
                        : 0 < a &&
                          ((a = s ? (s / 2.5) * (t / 8) : 0),
                          (n = (i = Math.abs(e) + a) / t)),
                      { destination: Math.round(a), duration: n }
                    );
                  }),
                  (e.createUUID = function () {
                    var e = new Date().getTime();
                    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
                      /[xy]/g,
                      function (t) {
                        var n = (e + 16 * Math.random()) % 16 | 0;
                        return (
                          (e = Math.floor(e / 16)),
                          ("x" == t ? n : (3 & n) | 8).toString(16)
                        );
                      }
                    );
                  });
                var a = s("transform");
                return (
                  e.extend(e, {
                    hasTransform: !1 !== a,
                    hasPerspective: s("perspective") in t,
                    hasTouch: "ontouchstart" in window,
                    hasPointer: !(
                      !window.PointerEvent && !window.MSPointerEvent
                    ),
                    hasTransition: s("transition") in t,
                  }),
                  (e.isBadAndroid = (function () {
                    var e = window.navigator.appVersion;
                    return !(
                      !/Android/.test(e) ||
                      /Chrome\/\d/.test(e) ||
                      ((e = e.match(/Safari\/(\d+.\d)/)) &&
                        "object" === o(e) &&
                        2 <= e.length &&
                        !(parseFloat(e[1]) < 535.19))
                    );
                  })()),
                  e.extend((e.style = {}), {
                    transform: a,
                    transitionTimingFunction: s("transitionTimingFunction"),
                    transitionDuration: s("transitionDuration"),
                    transitionDelay: s("transitionDelay"),
                    transformOrigin: s("transformOrigin"),
                    touchAction: s("touchAction"),
                  }),
                  (e.hasClass = function (e, t) {
                    return e.classList.contains(t);
                  }),
                  (e.addClass = function (t, n) {
                    e.hasClass(t, n) || t.classList.add(n);
                  }),
                  (e.removeClass = function (t, n) {
                    e.hasClass(t, n) && t.classList.remove(n);
                  }),
                  (e.offset = function (e) {
                    for (
                      var t = -e.offsetLeft, n = -e.offsetTop;
                      (e = e.offsetParent);

                    )
                      (t -= e.offsetLeft), (n -= e.offsetTop);
                    return { left: t, top: n };
                  }),
                  (e.preventDefaultException = function (e, t) {
                    for (var n in t) if (t[n].test(e[n])) return !0;
                    return !1;
                  }),
                  e.extend((e.eventType = {}), {
                    touchstart: 1,
                    touchmove: 1,
                    touchend: 1,
                    mousedown: 2,
                    mousemove: 2,
                    mouseup: 2,
                    pointerdown: 3,
                    pointermove: 3,
                    pointerup: 3,
                    MSPointerDown: 3,
                    MSPointerMove: 3,
                    MSPointerUp: 3,
                  }),
                  e.extend((e.ease = {}), {
                    quadratic: {
                      style: "cubic-bezier(0.25, 0.46, 0.45, 0.94)",
                      fn: function (e) {
                        return e * (2 - e);
                      },
                    },
                    circular: {
                      style: "cubic-bezier(0.1, 0.57, 0.1, 1)",
                      fn: function (e) {
                        return Math.sqrt(1 - --e * e);
                      },
                    },
                    back: {
                      style: "cubic-bezier(0.175, 0.885, 0.32, 1.275)",
                      fn: function (e) {
                        return --e * e * (5 * e + 4) + 1;
                      },
                    },
                    bounce: {
                      style: "",
                      fn: function (e) {
                        return (e /= 1) < 1 / 2.75
                          ? 7.5625 * e * e
                          : e < 2 / 2.75
                          ? 7.5625 * (e -= 1.5 / 2.75) * e + 0.75
                          : e < 2.5 / 2.75
                          ? 7.5625 * (e -= 2.25 / 2.75) * e + 0.9375
                          : 7.5625 * (e -= 2.625 / 2.75) * e + 0.984375;
                      },
                    },
                    elastic: {
                      style: "",
                      fn: function (e) {
                        return 0 === e
                          ? 0
                          : 1 == e
                          ? 1
                          : 0.4 *
                              Math.pow(2, -10 * e) *
                              Math.sin(((e - 0.055) * (2 * Math.PI)) / 0.22) +
                            1;
                      },
                    },
                  }),
                  (e.tap = function (e, t) {
                    var n = document.createEvent("Event");
                    n.initEvent(t, !0, !0),
                      (n.pageX = e.pageX),
                      (n.pageY = e.pageY),
                      e.target.dispatchEvent(n);
                  }),
                  (e.click = function (e) {
                    var t,
                      n = e.target;
                    /(SELECT|INPUT|TEXTAREA)/i.test(n.tagName) ||
                      ((t = document.createEvent(
                        window.MouseEvent ? "MouseEvents" : "Event"
                      )).initEvent("click", !0, !0),
                      (t.view = e.view || window),
                      (t.detail = 1),
                      (t.screenX = n.screenX || 0),
                      (t.screenY = n.screenY || 0),
                      (t.clientX = n.clientX || 0),
                      (t.clientY = n.clientY || 0),
                      (t.ctrlKey = !!e.ctrlKey),
                      (t.altKey = !!e.altKey),
                      (t.shiftKey = !!e.shiftKey),
                      (t.metaKey = !!e.metaKey),
                      (t.button = 0),
                      (t.relatedTarget = null),
                      (t._constructed = !0),
                      n.dispatchEvent(t));
                  }),
                  (e.getTouchAction = function (e, t) {
                    var n = "none";
                    return (
                      "vertical" === e
                        ? (n = "pan-y")
                        : "horizontal" === e && (n = "pan-x"),
                      t && "none" != n && (n += " pinch-zoom"),
                      n
                    );
                  }),
                  (e.getRect = function (e) {
                    if (e instanceof SVGElement) {
                      var t = e.getBoundingClientRect();
                      return {
                        top: t.top,
                        left: t.left,
                        width: t.width,
                        height: t.height,
                      };
                    }
                    return {
                      top: e.offsetTop,
                      left: e.offsetLeft,
                      width: e.offsetWidth,
                      height: e.offsetHeight,
                    };
                  }),
                  e
                );
              })();
              function a(e, t) {
                for (var n in ((this.wrapper =
                  "string" == typeof e ? document.querySelector(e) : e),
                (this.scroller = this.wrapper.children[0]),
                (this.options = {
                  resizeScrollbars: !0,
                  mouseWheelSpeed: 20,
                  snapThreshold: 0.334,
                  disablePointer: !s.hasPointer,
                  disableTouch: s.hasPointer || !s.hasTouch,
                  disableMouse: s.hasPointer || s.hasTouch,
                  startX: 0,
                  startY: 0,
                  scrollY: !0,
                  directionLockThreshold: 5,
                  momentum: !0,
                  bounce: !0,
                  bounceTime: 600,
                  bounceEasing: "",
                  preventDefault: !0,
                  preventDefaultException: {
                    tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT|A)$/,
                  },
                  HWCompositing: !0,
                  useTransition: !0,
                  useTransform: !0,
                  bindToWrapper: void 0 === window.onmousedown,
                }),
                t))
                  this.options[n] = t[n];
                (this.translateZ =
                  this.options.HWCompositing && s.hasPerspective
                    ? " translateZ(0)"
                    : ""),
                  (this.options.useTransition =
                    s.hasTransition && this.options.useTransition),
                  (this.options.useTransform =
                    s.hasTransform && this.options.useTransform),
                  (this.options.eventPassthrough =
                    !0 === this.options.eventPassthrough
                      ? "vertical"
                      : this.options.eventPassthrough),
                  (this.options.preventDefault =
                    !this.options.eventPassthrough &&
                    this.options.preventDefault),
                  (this.options.scrollY =
                    "vertical" != this.options.eventPassthrough &&
                    this.options.scrollY),
                  (this.options.scrollX =
                    "horizontal" != this.options.eventPassthrough &&
                    this.options.scrollX),
                  (this.options.freeScroll =
                    this.options.freeScroll && !this.options.eventPassthrough),
                  (this.options.directionLockThreshold = this.options
                    .eventPassthrough
                    ? 0
                    : this.options.directionLockThreshold),
                  (this.options.bounceEasing =
                    "string" == typeof this.options.bounceEasing
                      ? s.ease[this.options.bounceEasing] || s.ease.circular
                      : this.options.bounceEasing),
                  (this.options.resizePolling =
                    void 0 === this.options.resizePolling
                      ? 60
                      : this.options.resizePolling),
                  !0 === this.options.tap && (this.options.tap = "tap"),
                  this.options.useTransition ||
                    this.options.useTransform ||
                    /relative|absolute/i.test(this.scroller.style.position) ||
                    (this.scroller.style.position = "relative"),
                  "scale" == this.options.shrinkScrollbars &&
                    (this.options.useTransition = !1),
                  (this.options.invertWheelDirection = this.options
                    .invertWheelDirection
                    ? -1
                    : 1),
                  3 == this.options.probeType &&
                    (this.options.useTransition = !1),
                  (this.x = 0),
                  (this.y = 0),
                  (this.directionX = 0),
                  (this.directionY = 0),
                  (this._events = {}),
                  (this.animationUUID = null),
                  this._init(),
                  this.refresh(),
                  this.scrollTo(this.options.startX, this.options.startY),
                  this.enable();
              }
              function i(e, t, n) {
                var o = document.createElement("div"),
                  s = document.createElement("div");
                return (
                  !0 === n &&
                    ((o.style.cssText = "position:absolute;z-index:9999"),
                    (s.style.cssText =
                      "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px")),
                  (s.className = "iScrollIndicator"),
                  "h" == e
                    ? (!0 === n &&
                        ((o.style.cssText +=
                          ";height:7px;left:2px;right:2px;bottom:0"),
                        (s.style.height = "100%")),
                      (o.className = "iScrollHorizontalScrollbar"))
                    : (!0 === n &&
                        ((o.style.cssText +=
                          ";width:7px;bottom:2px;top:2px;right:1px"),
                        (s.style.width = "100%")),
                      (o.className = "iScrollVerticalScrollbar")),
                  (o.style.cssText += ";overflow:hidden"),
                  t || (o.style.pointerEvents = "none"),
                  o.appendChild(s),
                  o
                );
              }
              function r(e, t) {
                for (var o in ((this.wrapper =
                  "string" == typeof t.el
                    ? document.querySelector(t.el)
                    : t.el),
                (this.wrapperStyle = this.wrapper.style),
                (this.indicator = this.wrapper.children[0]),
                (this.indicatorStyle = this.indicator.style),
                (this.scroller = e),
                (this.options = {
                  listenX: !0,
                  listenY: !0,
                  interactive: !1,
                  resize: !0,
                  defaultScrollbars: !1,
                  shrink: !1,
                  fade: !1,
                  speedRatioX: 0,
                  speedRatioY: 0,
                }),
                t))
                  this.options[o] = t[o];
                var a, i;
                (this.sizeRatioX = 1),
                  (this.sizeRatioY = 1),
                  (this.maxPosX = 0),
                  (this.maxPosY = 0),
                  this.options.interactive &&
                    (this.options.disableTouch ||
                      (s.addEvent(this.indicator, "touchstart", this),
                      s.addEvent(window, "touchend", this)),
                    this.options.disablePointer ||
                      (s.addEvent(
                        this.indicator,
                        s.prefixPointerEvent("pointerdown"),
                        this
                      ),
                      s.addEvent(
                        window,
                        s.prefixPointerEvent("pointerup"),
                        this
                      )),
                    this.options.disableMouse ||
                      (s.addEvent(this.indicator, "mousedown", this),
                      s.addEvent(window, "mouseup", this))),
                  this.options.fade &&
                    ((this.wrapperStyle[
                      s.style.transform
                    ] = this.scroller.translateZ),
                    (a = s.style.transitionDuration) &&
                      ((this.wrapperStyle[a] = s.isBadAndroid
                        ? "0.0001ms"
                        : "0ms"),
                      (i = this),
                      s.isBadAndroid &&
                        (0, n.rAF)(function () {
                          "0.0001ms" === i.wrapperStyle[a] &&
                            (i.wrapperStyle[a] = "0s");
                        }),
                      (this.wrapperStyle.opacity = "0")));
              }
              (a.prototype = {
                version: "5.2.0-snapshot",
                _init: function () {
                  this._initEvents(),
                    (this.options.scrollbars || this.options.indicators) &&
                      this._initIndicators(),
                    this.options.mouseWheel && this._initWheel(),
                    this.options.snap && this._initSnap(),
                    this.options.keyBindings && this._initKeys();
                },
                destroy: function () {
                  this._initEvents(!0),
                    clearTimeout(this.resizeTimeout),
                    (this.resizeTimeout = null),
                    this._execEvent("destroy");
                },
                _transitionEnd: function (e) {
                  e.target == this.scroller &&
                    this.isInTransition &&
                    (this._transitionTime(),
                    this.resetPosition(this.options.bounceTime) ||
                      ((this.isInTransition = !1),
                      this._execEvent("scrollEnd")));
                },
                _start: function (e) {
                  if (1 != s.eventType[e.type]) {
                    var t = e.which
                      ? e.button
                      : e.button < 2
                      ? 0
                      : 4 == e.button
                      ? 1
                      : 2;
                    if (0 !== t) return;
                  }
                  !this.enabled ||
                    (this.initiated &&
                      s.eventType[e.type] !== this.initiated) ||
                    !this.scroller.contains(e.target) ||
                    (!this.options.preventDefault ||
                      s.isBadAndroid ||
                      s.preventDefaultException(
                        e.target,
                        this.options.preventDefaultException
                      ) ||
                      e.preventDefault(),
                    (t = e.touches ? e.touches[0] : e),
                    (this.initiated = s.eventType[e.type]),
                    (this.moved = !1),
                    (this.distX = 0),
                    (this.distY = 0),
                    (this.directionX = 0),
                    (this.directionY = 0),
                    (this.directionLocked = 0),
                    (this.startTime = s.getTime()),
                    this.options.useTransition && this.isInTransition
                      ? (this._transitionTime(),
                        (this.isInTransition = !1),
                        (e = this.getComputedPosition()),
                        this._translate(Math.round(e.x), Math.round(e.y)),
                        this._execEvent("scrollEnd"))
                      : !this.options.useTransition &&
                        this.isAnimating &&
                        ((this.isAnimating = !1), this._execEvent("scrollEnd")),
                    (this.startX = this.x),
                    (this.startY = this.y),
                    (this.absStartX = this.x),
                    (this.absStartY = this.y),
                    (this.pointX = t.pageX),
                    (this.pointY = t.pageY),
                    this._execEvent("beforeScrollStart"));
                },
                _move: function (e) {
                  if (this.enabled && s.eventType[e.type] === this.initiated) {
                    this.options.preventDefault && e.preventDefault();
                    var t,
                      n = e.touches ? e.touches[0] : e,
                      o = n.pageX - this.pointX,
                      a = n.pageY - this.pointY,
                      i = s.getTime();
                    if (
                      ((this.pointX = n.pageX),
                      (this.pointY = n.pageY),
                      (this.distX += o),
                      (this.distY += a),
                      (t = Math.abs(this.distX)),
                      (n = Math.abs(this.distY)),
                      100 < this.distX && (this.lockDirectionX = -1),
                      this.distX < -100 && (this.lockDirectionX = 1),
                      !(300 < i - this.endTime && t < 10 && n < 10))
                    ) {
                      if (
                        (this.directionLocked ||
                          this.options.freeScroll ||
                          (t > n + this.options.directionLockThreshold
                            ? (this.directionLocked = "h")
                            : n >= t + this.options.directionLockThreshold
                            ? (this.directionLocked = "v")
                            : (this.directionLocked = "n")),
                        "h" == this.directionLocked)
                      ) {
                        if ("vertical" == this.options.eventPassthrough)
                          e.preventDefault();
                        else if ("horizontal" == this.options.eventPassthrough)
                          return void (this.initiated = !1);
                        a = 0;
                      } else if ("v" == this.directionLocked) {
                        if ("horizontal" == this.options.eventPassthrough)
                          e.preventDefault();
                        else if ("vertical" == this.options.eventPassthrough)
                          return void (this.initiated = !1);
                        o = 0;
                      }
                      (o = this.hasHorizontalScroll ? o : 0),
                        (a = this.hasVerticalScroll ? a : 0),
                        (t = this.x + o),
                        (e = this.y + a),
                        this.options.wrap ||
                          ((0 < t || t < this.maxScrollX) &&
                            (t = this.options.bounce
                              ? this.x + o / 3
                              : 0 < t
                              ? 0
                              : this.maxScrollX),
                          (0 < e || e < this.maxScrollY) &&
                            (e = this.options.bounce
                              ? this.y + a / 3
                              : 0 < e
                              ? 0
                              : this.maxScrollY)),
                        (this.directionX = 0 < o ? -1 : o < 0 ? 1 : 0),
                        (this.directionY = 0 < a ? -1 : a < 0 ? 1 : 0),
                        this.lockDirectionX &&
                          ((this.directionX = this.lockDirectionX),
                          delete this.lockDirectionX),
                        this.moved || this._execEvent("scrollStart"),
                        (this.moved = !0),
                        this._translate(t, e),
                        300 < i - this.startTime &&
                          ((this.startTime = i),
                          (this.startX = this.x),
                          (this.startY = this.y),
                          1 == this.options.probeType &&
                            this._execEvent("scroll")),
                        1 < this.options.probeType && this._execEvent("scroll");
                    }
                  }
                },
                _end: function (e) {
                  if (this.enabled && s.eventType[e.type] === this.initiated) {
                    this.options.preventDefault &&
                      !s.preventDefaultException(
                        e.target,
                        this.options.preventDefaultException
                      ) &&
                      e.preventDefault(),
                      e.changedTouches && e.changedTouches[0];
                    var t,
                      n = s.getTime() - this.startTime,
                      o = Math.round(this.x),
                      a = Math.round(this.y),
                      i = Math.abs(o - this.startX),
                      r = Math.abs(a - this.startY),
                      l = 0,
                      c = "";
                    if (
                      ((this.isInTransition = 0),
                      (this.initiated = 0),
                      (this.endTime = s.getTime()),
                      !this.resetPosition(this.options.bounceTime))
                    ) {
                      if ((this.scrollTo(o, a), !this.moved))
                        return (
                          this.options.tap && s.tap(e, this.options.tap),
                          this.options.click && s.click(e),
                          void this._execEvent("scrollCancel")
                        );
                      if (this._events.flick && n < 200 && i < 100 && r < 100)
                        this._execEvent("flick");
                      else {
                        if (
                          (this.options.momentum &&
                            n < 300 &&
                            ((r = this.hasHorizontalScroll
                              ? s.momentum(
                                  this.x,
                                  this.startX,
                                  n,
                                  this.maxScrollX,
                                  this.options.bounce ? this.wrapperWidth : 0,
                                  this.options.deceleration
                                )
                              : { destination: o, duration: 0 }),
                            (t = this.hasVerticalScroll
                              ? s.momentum(
                                  this.y,
                                  this.startY,
                                  n,
                                  this.maxScrollY,
                                  this.options.bounce ? this.wrapperHeight : 0,
                                  this.options.deceleration
                                )
                              : { destination: a, duration: 0 }),
                            (o = r.destination),
                            (a = t.destination),
                            (l = Math.max(r.duration, t.duration)),
                            (this.isInTransition = 1)),
                          this.options.snap &&
                            ((t = this._nearestSnap(o, a)),
                            (this.currentPage = t),
                            (l =
                              this.options.snapSpeed ||
                              Math.max(
                                Math.max(
                                  Math.min(Math.abs(o - t.x), 1e3),
                                  Math.min(Math.abs(a - t.y), 1e3)
                                ),
                                300
                              )),
                            (o = t.x),
                            (a = t.y),
                            (this.directionX = 0),
                            (this.directionY = 0),
                            (c = this.options.bounceEasing)),
                          o != this.x || a != this.y)
                        )
                          return (
                            this.options.wrap ||
                              ((0 < o ||
                                o < this.maxScrollX ||
                                0 < a ||
                                a < this.maxScrollY) &&
                                (c = s.ease.quadratic)),
                            void this._fixWrap(o, a, l, c)
                          );
                        this._execEvent("scrollEnd");
                      }
                    }
                  }
                },
                _fixWrapItems: function () {
                  var e = this;
                  this.options.wrap &&
                    this.enabled &&
                    this.options.snap.forEach(function (t, n) {
                      (t.style = "position:absolute;"),
                        (t.style.left = t.offsetWidth * n + "px"),
                        0 === e.currentPage.pageX &&
                        n === e.options.snap.length - 1
                          ? (t.style.left = "-" + t.offsetWidth + "px")
                          : e.currentPage.pageX === e.pages.length - 1 &&
                            0 === n &&
                            (t.style.left =
                              t.offsetWidth * e.options.snap.length + "px");
                    });
                },
                _clearWrapItems: function () {
                  this.options.wrap &&
                    this.enabled &&
                    this.options.snap.forEach(function (e, t) {
                      e.style = "";
                    });
                },
                _fixWrap: function (e, t, n, o) {
                  this._execEvent("scrollReady"),
                    this.options.wrap
                      ? (this.scrollTo(e, t, n, o),
                        this.wrapEvents ||
                          (this.on(
                            "scrollEnd",
                            function () {
                              this._fixWrapItems.bind(this)(),
                                this.scrollTo(
                                  this.pages[this.currentPage.pageX][0].x,
                                  0,
                                  0
                                );
                            }.bind(this)
                          ),
                          (this.wrapEvents = !0)))
                      : this.scrollTo(e, t, n, o);
                },
                _resize: function () {
                  this.refresh();
                },
                resetPosition: function (e) {
                  var t = this.x,
                    n = this.y;
                  return (
                    (e = e || 0),
                    !this.hasHorizontalScroll || 0 < this.x
                      ? (t = 0)
                      : this.x < this.maxScrollX && (t = this.maxScrollX),
                    !this.hasVerticalScroll || 0 < this.y
                      ? (n = 0)
                      : this.y < this.maxScrollY && (n = this.maxScrollY),
                    !(
                      (t != this.x && this.options.wrap) ||
                      (t == this.x && n == this.y) ||
                      (this.scrollTo(t, n, e, this.options.bounceEasing), 0)
                    )
                  );
                },
                disable: function () {
                  this.enabled = !1;
                },
                enable: function () {
                  (this.enabled = !0),
                    this.options.snap &&
                      this.options.wrap &&
                      setTimeout(
                        function () {
                          this._fixWrapItems.bind(this)();
                        }.bind(this),
                        0
                      );
                },
                refresh: function () {
                  var e = this;
                  s.getRect(this.wrapper),
                    (this.wrapperWidth = this.wrapper.clientWidth),
                    (this.wrapperHeight = this.wrapper.clientHeight),
                    this.options.snap &&
                      this.options.wrap &&
                      ((this.scroller.style.width = ""),
                      this.options.snap.forEach(function (t) {
                        e.scroller.style.width =
                          e.scroller.offsetWidth + t.offsetWidth + "px";
                      }));
                  var t = s.getRect(this.scroller);
                  (this.scrollerWidth = t.width),
                    (this.scrollerHeight = t.height),
                    (this.maxScrollX =
                      this.wrapperWidth - this.scrollerWidth - t.left),
                    (this.maxScrollY =
                      this.wrapperHeight - this.scrollerHeight - t.top),
                    this.options.extendSpace &&
                      (this.maxScrollX < 0 &&
                        (this.maxScrollX = this.maxScrollX - 30),
                      this.maxScrollY < 0 &&
                        (this.maxScrollY = this.maxScrollY - 30)),
                    (this.hasHorizontalScroll =
                      this.options.scrollX && this.maxScrollX < 0),
                    (this.hasVerticalScroll =
                      this.options.scrollY && this.maxScrollY < 0),
                    this.hasHorizontalScroll ||
                      ((this.maxScrollX = 0),
                      (this.scrollerWidth = this.wrapperWidth)),
                    this.hasVerticalScroll ||
                      ((this.maxScrollY = 0),
                      (this.scrollerHeight = this.wrapperHeight)),
                    (this.endTime = 0),
                    (this.directionX = 0),
                    (this.directionY = 0),
                    s.hasPointer &&
                      !this.options.disablePointer &&
                      ((this.wrapper.style[
                        s.style.touchAction
                      ] = s.getTouchAction(this.options.eventPassthrough, !0)),
                      this.wrapper.style[s.style.touchAction] ||
                        (this.wrapper.style[
                          s.style.touchAction
                        ] = s.getTouchAction(
                          this.options.eventPassthrough,
                          !1
                        ))),
                    (this.wrapperOffset = s.offset(this.wrapper)),
                    this._fixWrapItems.bind(this)(),
                    (this.options.wrapset = !1),
                    this._clearWrapItems.bind(this)(),
                    this._execEvent("refresh"),
                    this._fixWrapItems.bind(this)(),
                    this.resetPosition();
                },
                on: function (e, t) {
                  this._events[e] || (this._events[e] = []),
                    this._events[e].push(t);
                },
                off: function (e, t) {
                  !this._events[e] ||
                    (-1 < (t = this._events[e].indexOf(t)) &&
                      this._events[e].splice(t, 1));
                },
                _execEvent: function (e) {
                  if (this._events[e]) {
                    var t = 0,
                      n = this._events[e].length;
                    if (n)
                      for (; t < n; t++)
                        this._events[e][t].apply(
                          this,
                          [].slice.call(arguments, 1)
                        );
                  }
                },
                scrollBy: function (e, t, n, o) {
                  (e = this.x + e),
                    (t = this.y + t),
                    (n = n || 0),
                    this.scrollTo(e, t, n, o);
                },
                scrollTo: function (e, t, n, o) {
                  (o = o || s.ease.circular),
                    (this.isInTransition = this.options.useTransition && 0 < n);
                  var a = this.options.useTransition && o.style;
                  !n || a
                    ? (a &&
                        (this._transitionTimingFunction(o.style),
                        this._transitionTime(n)),
                      this._translate(e, t))
                    : this._animate(e, t, n, o.fn);
                },
                scrollToElement: function (e, t, n, o, a) {
                  var i, r;
                  (e = e.nodeType ? e : this.scroller.querySelector(e)) &&
                    (((i = s.offset(e)).left -= this.wrapperOffset.left),
                    (i.top -= this.wrapperOffset.top),
                    (r = s.getRect(e)),
                    (e = s.getRect(this.wrapper)),
                    !0 === n && (n = Math.round(r.width / 2 - e.width / 2)),
                    !0 === o && (o = Math.round(r.height / 2 - e.height / 2)),
                    (i.left -= n || 0),
                    (i.top -= o || 0),
                    (i.left =
                      0 < i.left
                        ? 0
                        : i.left < this.maxScrollX
                        ? this.maxScrollX
                        : i.left),
                    (i.top =
                      0 < i.top
                        ? 0
                        : i.top < this.maxScrollY
                        ? this.maxScrollY
                        : i.top),
                    (t =
                      null == t || "auto" === t
                        ? Math.max(
                            Math.abs(this.x - i.left),
                            Math.abs(this.y - i.top)
                          )
                        : t),
                    this.scrollTo(i.left, i.top, t, a));
                },
                _transitionTime: function (e) {
                  if (this.options.useTransition) {
                    e = e || 0;
                    var t,
                      o = s.style.transitionDuration;
                    if (
                      o &&
                      ((this.scroller.style[o] = e + "ms"),
                      !e &&
                        s.isBadAndroid &&
                        ((this.scroller.style[o] = "0.0001ms"),
                        (t = this),
                        (0, n.rAF)(function () {
                          "0.0001ms" === t.scrollerStyle[o] &&
                            (t.scrollerStyle[o] = "0s");
                        })),
                      this.indicators)
                    )
                      for (var a = this.indicators.length; a--; )
                        this.indicators[a].transitionTime(e);
                  }
                },
                _transitionTimingFunction: function (e) {
                  if (
                    ((this.scroller.style[
                      s.style.transitionTimingFunction
                    ] = e),
                    this.indicators)
                  )
                    for (var t = this.indicators.length; t--; )
                      this.indicators[t].transitionTimingFunction(e);
                },
                _translate: function (e, t) {
                  if (
                    (this.options.useTransform
                      ? (this.scroller.style[s.style.transform] =
                          "translate(" +
                          e +
                          "px," +
                          t +
                          "px)" +
                          this.translateZ)
                      : ((e = Math.round(e)),
                        (t = Math.round(t)),
                        (this.scroller.style.left = e + "px"),
                        (this.scroller.style.top = t + "px")),
                    (this.x = e),
                    (this.y = t),
                    this.indicators)
                  )
                    for (var n = this.indicators.length; n--; )
                      this.indicators[n].updatePosition();
                },
                _initEvents: function (e) {
                  var t = e ? s.removeEvent : s.addEvent;
                  (e = this.options.bindToWrapper ? this.wrapper : window),
                    t(window, "orientationchange", this),
                    t(window, "resize", this),
                    this.options.click && t(this.wrapper, "click", this, !0),
                    this.options.disableMouse ||
                      (t(this.wrapper, "mousedown", this),
                      t(e, "mousemove", this),
                      t(e, "mousecancel", this),
                      t(e, "mouseup", this)),
                    s.hasPointer &&
                      !this.options.disablePointer &&
                      (t(
                        this.wrapper,
                        s.prefixPointerEvent("pointerdown"),
                        this
                      ),
                      t(e, s.prefixPointerEvent("pointermove"), this),
                      t(e, s.prefixPointerEvent("pointercancel"), this),
                      t(e, s.prefixPointerEvent("pointerup"), this)),
                    s.hasTouch &&
                      !this.options.disableTouch &&
                      (t(this.wrapper, "touchstart", this),
                      t(e, "touchmove", this),
                      t(e, "touchcancel", this),
                      t(e, "touchend", this)),
                    t(this.scroller, "transitionend", this),
                    t(this.scroller, "webkitTransitionEnd", this),
                    t(this.scroller, "oTransitionEnd", this),
                    t(this.scroller, "MSTransitionEnd", this);
                },
                getComputedPosition: function () {
                  var e,
                    t = window.getComputedStyle(this.scroller, null);
                  return (
                    (t = this.options.useTransform
                      ? ((e = +(
                          (t = t[s.style.transform]
                            .split(")")[0]
                            .split(", "))[12] || t[4]
                        )),
                        +(t[13] || t[5]))
                      : ((e = +t.left.replace(/[^-\d.]/g, "")),
                        +t.top.replace(/[^-\d.]/g, ""))),
                    { x: e, y: t }
                  );
                },
                _initIndicators: function () {
                  var e,
                    t = this.options.interactiveScrollbars,
                    n = "string" != typeof this.options.scrollbars,
                    o = [],
                    s = this;
                  (this.indicators = []),
                    this.options.scrollbars &&
                      (this.options.scrollY &&
                        ((e = {
                          el: i("v", t, this.options.scrollbars),
                          interactive: t,
                          defaultScrollbars: !0,
                          customStyle: n,
                          resize: this.options.resizeScrollbars,
                          shrink: this.options.shrinkScrollbars,
                          fade: this.options.fadeScrollbars,
                          listenX: !1,
                        }),
                        this.wrapper.appendChild(e.el),
                        o.push(e)),
                      this.options.scrollX &&
                        ((e = {
                          el: i("h", t, this.options.scrollbars),
                          interactive: t,
                          defaultScrollbars: !0,
                          customStyle: n,
                          resize: this.options.resizeScrollbars,
                          shrink: this.options.shrinkScrollbars,
                          fade: this.options.fadeScrollbars,
                          listenY: !1,
                        }),
                        this.wrapper.appendChild(e.el),
                        o.push(e))),
                    this.options.indicators &&
                      (o = o.concat(this.options.indicators));
                  for (var a = o.length; a--; )
                    this.indicators.push(new r(this, o[a]));
                  function l(e) {
                    if (s.indicators)
                      for (var t = s.indicators.length; t--; )
                        e.call(s.indicators[t]);
                  }
                  this.options.fadeScrollbars &&
                    (this.on("scrollEnd", function () {
                      l(function () {
                        this.fade();
                      });
                    }),
                    this.on("scrollCancel", function () {
                      l(function () {
                        this.fade();
                      });
                    }),
                    this.on("scrollStart", function () {
                      l(function () {
                        this.fade(1);
                      });
                    }),
                    this.on("beforeScrollStart", function () {
                      l(function () {
                        this.fade(1, !0);
                      });
                    })),
                    this.on("refresh", function () {
                      l(function () {
                        this.refresh();
                      });
                    }),
                    this.on("destroy", function () {
                      l(function () {
                        this.destroy();
                      }),
                        delete this.indicators;
                    });
                },
                _initWheel: function () {
                  s.addEvent(this.wrapper, "wheel", this),
                    s.addEvent(this.wrapper, "mousewheel", this),
                    s.addEvent(this.wrapper, "DOMMouseScroll", this),
                    this.on("destroy", function () {
                      clearTimeout(this.wheelTimeout),
                        (this.wheelTimeout = null),
                        s.removeEvent(this.wrapper, "wheel", this),
                        s.removeEvent(this.wrapper, "mousewheel", this),
                        s.removeEvent(this.wrapper, "DOMMouseScroll", this);
                    });
                },
                _wheel: function (e) {
                  if (this.enabled) {
                    e.preventDefault();
                    var t,
                      n,
                      o,
                      s,
                      a = this;
                    if (
                      (void 0 === this.wheelTimeout &&
                        a._execEvent("scrollStart"),
                      clearTimeout(this.wheelTimeout),
                      (this.wheelTimeout = setTimeout(function () {
                        a.options.snap || a._execEvent("scrollEnd"),
                          (a.wheelTimeout = void 0);
                      }, 400)),
                      "deltaX" in e)
                    )
                      n =
                        1 === e.deltaMode
                          ? ((t = -e.deltaX * this.options.mouseWheelSpeed),
                            -e.deltaY * this.options.mouseWheelSpeed)
                          : ((t = -e.deltaX), -e.deltaY);
                    else if ("wheelDeltaX" in e)
                      (t =
                        (e.wheelDeltaX / 120) * this.options.mouseWheelSpeed),
                        (n =
                          (e.wheelDeltaY / 120) * this.options.mouseWheelSpeed);
                    else if ("wheelDelta" in e)
                      t = n =
                        (e.wheelDelta / 120) * this.options.mouseWheelSpeed;
                    else {
                      if (!("detail" in e)) return;
                      t = n = (-e.detail / 3) * this.options.mouseWheelSpeed;
                    }
                    if (
                      ((t *= this.options.invertWheelDirection),
                      (n *= this.options.invertWheelDirection),
                      this.hasVerticalScroll || ((t = n), (n = 0)),
                      this.options.snap)
                    )
                      return (
                        (o = this.currentPage.pageX),
                        (s = this.currentPage.pageY),
                        0 < t ? o-- : t < 0 && o++,
                        0 < n ? s-- : n < 0 && s++,
                        void this.goToPage(o, s)
                      );
                    (o = this.x + Math.round(this.hasHorizontalScroll ? t : 0)),
                      (s = this.y + Math.round(this.hasVerticalScroll ? n : 0)),
                      (this.directionX = 0 < t ? -1 : t < 0 ? 1 : 0),
                      (this.directionY = 0 < n ? -1 : n < 0 ? 1 : 0),
                      0 < o
                        ? (o = 0)
                        : o < this.maxScrollX && (o = this.maxScrollX),
                      0 < s
                        ? (s = 0)
                        : s < this.maxScrollY && (s = this.maxScrollY),
                      this.scrollTo(o, s, 0),
                      1 < this.options.probeType && this._execEvent("scroll");
                  }
                },
                _initSnap: function () {
                  (this.currentPage = {}),
                    "string" == typeof this.options.snap &&
                      (this.options.snap = this.scroller.querySelectorAll(
                        this.options.snap
                      )),
                    this.on("refresh", function () {
                      var e,
                        t,
                        n,
                        o,
                        a,
                        i,
                        r,
                        l = 0,
                        c = 0,
                        p = 0,
                        d = this.options.snapStepX || this.wrapperWidth,
                        u = this.options.snapStepY || this.wrapperHeight,
                        m = this.options.wrap && this.options.wrapset;
                      if (
                        (m || (this.pages = []),
                        this.wrapperWidth &&
                          this.wrapperHeight &&
                          this.scrollerWidth &&
                          this.scrollerHeight)
                      ) {
                        if ((this.options.wrapset = !0) === this.options.snap)
                          for (
                            n = Math.round(d / 2), o = Math.round(u / 2);
                            p > -this.scrollerWidth;

                          ) {
                            for (
                              this.pages[l] = [], a = e = 0;
                              a > -this.scrollerHeight;

                            )
                              (this.pages[l][e] = {
                                x: Math.max(p, this.maxScrollX),
                                y: Math.max(a, this.maxScrollY),
                                width: d,
                                height: u,
                                cx: p - n,
                                cy: a - o,
                              }),
                                (a -= u),
                                e++;
                            (p -= d), l++;
                          }
                        else if (!m)
                          for (
                            e = (i = this.options.snap).length, t = -1;
                            l < e;
                            l++
                          )
                            (r = s.getRect(i[l])),
                              (0 === l || r.left <= s.getRect(i[l - 1]).left) &&
                                (this.options.wrap ? 0 < l && t-- : (c = 0),
                                t++),
                              this.pages[c] || (this.pages[c] = []),
                              (p = Math.max(-r.left, this.maxScrollX)),
                              (a = Math.max(-r.top, this.maxScrollY)),
                              (n = p - Math.round(r.width / 2)),
                              (o = a - Math.round(r.height / 2)),
                              (this.pages[c][t] = {
                                x: p,
                                y: a,
                                width: r.width,
                                height: r.height,
                                cx: n,
                                cy: o,
                              }),
                              p > this.maxScrollX && c++;
                        this.goToPage(
                          this.currentPage.pageX || 0,
                          this.currentPage.pageY || 0,
                          0
                        ),
                          this.options.snapThreshold % 1 == 0
                            ? ((this.snapThresholdX = this.options.snapThreshold),
                              (this.snapThresholdY = this.options.snapThreshold))
                            : ((this.snapThresholdX = Math.round(
                                this.pages[this.currentPage.pageX][
                                  this.currentPage.pageY
                                ].width * this.options.snapThreshold
                              )),
                              (this.snapThresholdY = Math.round(
                                this.pages[this.currentPage.pageX][
                                  this.currentPage.pageY
                                ].height * this.options.snapThreshold
                              )));
                      }
                    }),
                    this.on("flick", function () {
                      var e =
                        this.options.snapSpeed ||
                        Math.max(
                          Math.max(
                            Math.min(Math.abs(this.x - this.startX), 1e3),
                            Math.min(Math.abs(this.y - this.startY), 1e3)
                          ),
                          300
                        );
                      this.goToPage(
                        this.currentPage.pageX + this.directionX,
                        this.currentPage.pageY + this.directionY,
                        e
                      );
                    });
                },
                _nearestSnap: function (e, t) {
                  if (!this.pages.length)
                    return { x: 0, y: 0, pageX: 0, pageY: 0 };
                  var n,
                    o = 0,
                    s = this.pages.length,
                    a = 0;
                  if (
                    Math.abs(e - this.absStartX) < this.snapThresholdX &&
                    Math.abs(t - this.absStartY) < this.snapThresholdY
                  )
                    return this.currentPage;
                  for (
                    this.options.wrap ||
                      (0 < e
                        ? (e = 0)
                        : e < this.maxScrollX && (e = this.maxScrollX)),
                      0 < t
                        ? (t = 0)
                        : t < this.maxScrollY && (t = this.maxScrollY);
                    o < s;
                    o++
                  )
                    if (e >= this.pages[o][0].cx) {
                      this.options.wrap && e < 0 && (e = this.pages[o][0].x),
                        this.options.wrap || (e = this.pages[o][0].x);
                      break;
                    }
                  for (
                    0 < o &&
                      !this.pages[o] &&
                      ((o = 0),
                      (e =
                        this.pages[this.pages.length - 1][0].x -
                        this.pages[this.pages.length - 1][0].width)),
                      0 < e &&
                        this.options.wrap &&
                        ((o = this.pages.length - 1),
                        (e = this.pages[0][0].width)),
                      s = this.pages[o].length;
                    a < s;
                    a++
                  )
                    if (t >= this.pages[0][a].cy) {
                      t = this.pages[0][a].y;
                      break;
                    }
                  return (
                    o == this.currentPage.pageX &&
                      ((n = !1),
                      (o += this.directionX) < 0
                        ? (o = 0)
                        : o >= this.pages.length &&
                          (this.options.wrap
                            ? ((o = 0),
                              (e =
                                this.pages[this.pages.length - 1][0].x -
                                this.pages[this.pages.length - 1][0].width),
                              (n = !0))
                            : (o = this.pages.length - 1)),
                      n || (e = this.pages[o][0].x)),
                    a == this.currentPage.pageY &&
                      ((a += this.directionY) < 0
                        ? (a = 0)
                        : a >= this.pages[0].length &&
                          (a = this.pages[0].length - 1),
                      (t = this.pages[0][a].y)),
                    { x: e, y: t, pageX: o, pageY: a }
                  );
                },
                goToPage: function (e, t, n, o) {
                  var s, a;
                  (o = o || this.options.bounceEasing),
                    (a = this.options.wrap
                      ? e < 0
                        ? ((e = this.pages.length - 1),
                          (s = this.pages[0][0].width),
                          0)
                        : e == this.pages.length
                        ? ((e = 0),
                          (s =
                            this.pages[this.pages.length - 1][0].x -
                            this.pages[this.pages.length - 1][0].width),
                          0)
                        : ((s = this.pages[e][t].x), this.pages[e][t].y)
                      : (e >= this.pages.length
                          ? (e = this.pages.length - 1)
                          : e < 0 && (e = 0),
                        t >= this.pages[e].length
                          ? (t = this.pages[e].length - 1)
                          : t < 0 && (t = 0),
                        (s = this.pages[e][t].x),
                        this.pages[e][t].y)),
                    (n =
                      void 0 === n
                        ? this.options.snapSpeed ||
                          Math.max(
                            Math.max(
                              Math.min(Math.abs(s - this.x), 1e3),
                              Math.min(Math.abs(a - this.y), 1e3)
                            ),
                            300
                          )
                        : n),
                    (this.currentPage = { x: s, y: a, pageX: e, pageY: t }),
                    this._fixWrap(s, a, n, o);
                },
                next: function (e, t) {
                  var n = this.currentPage.pageX,
                    o = this.currentPage.pageY;
                  ++n >= this.pages.length &&
                    this.hasVerticalScroll &&
                    ((n = 0), o++),
                    this.goToPage(n, o, e, t);
                },
                prev: function (e, t) {
                  var n = this.currentPage.pageX,
                    o = this.currentPage.pageY;
                  --n < 0 && this.hasVerticalScroll && ((n = 0), o--),
                    this.goToPage(n, o, e, t);
                },
                isVisibleInViewport: function () {
                  var e = this.wrapper.getBoundingClientRect(),
                    t =
                      window.innerHeight ||
                      document.documentElement.clientHeight,
                    n =
                      window.innerWidth || document.documentElement.clientWidth;
                  return (
                    (t = e.top <= t && 0 <= e.top + e.height),
                    (e = e.left <= n && 0 <= e.left + e.width),
                    t && e
                  );
                },
                _initKeys: function () {
                  var e,
                    t = {
                      pageUp: 33,
                      pageDown: 34,
                      end: 35,
                      home: 36,
                      left: 37,
                      up: 38,
                      right: 39,
                      down: 40,
                    };
                  if ("object" == o(this.options.keyBindings))
                    for (e in this.options.keyBindings)
                      "string" == typeof this.options.keyBindings[e] &&
                        (this.options.keyBindings[e] = this.options.keyBindings[
                          e
                        ]
                          .toUpperCase()
                          .charCodeAt(0));
                  else this.options.keyBindings = {};
                  for (e in t)
                    this.options.keyBindings[e] =
                      this.options.keyBindings[e] || t[e];
                  s.addEvent(window, "keydown", this),
                    this.on("destroy", function () {
                      s.removeEvent(window, "keydown", this);
                    });
                },
                _key: function (e) {
                  if (this.enabled) {
                    var t,
                      n = this.options.snap,
                      o = n ? this.currentPage.pageX : this.x,
                      a = n ? this.currentPage.pageY : this.y,
                      i = s.getTime(),
                      r = this.keyTime || 0;
                    switch (
                      (this.options.useTransition &&
                        this.isInTransition &&
                        ((t = this.getComputedPosition()),
                        this._translate(Math.round(t.x), Math.round(t.y)),
                        (this.isInTransition = !1)),
                      (this.keyAcceleration =
                        i - r < 200
                          ? Math.min(this.keyAcceleration + 0.25, 50)
                          : 0),
                      e.keyCode)
                    ) {
                      case this.options.keyBindings.pageUp:
                        this.hasHorizontalScroll && !this.hasVerticalScroll
                          ? (o += n ? 1 : this.wrapperWidth)
                          : (a += n ? 1 : this.wrapperHeight);
                        break;
                      case this.options.keyBindings.pageDown:
                        this.hasHorizontalScroll && !this.hasVerticalScroll
                          ? (o -= n ? 1 : this.wrapperWidth)
                          : (a -= n ? 1 : this.wrapperHeight);
                        break;
                      case this.options.keyBindings.end:
                        (o = n ? this.pages.length - 1 : this.maxScrollX),
                          (a = n ? this.pages[0].length - 1 : this.maxScrollY);
                        break;
                      case this.options.keyBindings.home:
                        a = o = 0;
                        break;
                      case this.options.keyBindings.left:
                        o += n ? -1 : (5 + this.keyAcceleration) >> 0;
                        break;
                      case this.options.keyBindings.up:
                        a += n ? 1 : (5 + this.keyAcceleration) >> 0;
                        break;
                      case this.options.keyBindings.right:
                        o -= n ? -1 : (5 + this.keyAcceleration) >> 0;
                        break;
                      case this.options.keyBindings.down:
                        a -= n ? 1 : (5 + this.keyAcceleration) >> 0;
                        break;
                      default:
                        return;
                    }
                    n
                      ? this.goToPage(o, a)
                      : (0 < o
                          ? ((o = 0), (this.keyAcceleration = 0))
                          : o < this.maxScrollX &&
                            ((o = this.maxScrollX), (this.keyAcceleration = 0)),
                        0 < a
                          ? ((a = 0), (this.keyAcceleration = 0))
                          : a < this.maxScrollY &&
                            ((a = this.maxScrollY), (this.keyAcceleration = 0)),
                        this.scrollTo(o, a, 0),
                        (this.keyTime = i));
                  }
                },
                _animate: function (e, t, o, a) {
                  var i = this,
                    r = this.x,
                    l = this.y,
                    c = s.getTime(),
                    p = c + o;
                  (this.isAnimating = !0),
                    (this.animationUUID = s.createUUID()),
                    (function d(u) {
                      var m,
                        h = s.getTime();
                      if (p <= h)
                        return (
                          (i.isAnimating = !1),
                          i._translate(e, t),
                          void (
                            i.resetPosition(i.options.bounceTime) ||
                            i._execEvent("scrollEnd")
                          )
                        );
                      (m = a((h - c) / o)),
                        (h = (e - r) * m + r),
                        (m = (t - l) * m + l),
                        i._translate(h, m),
                        i.isAnimating &&
                          u === i.animationUUID &&
                          (0, n.rAF)(d.bind(null, u)),
                        3 == i.options.probeType && i._execEvent("scroll");
                    })(this.animationUUID);
                },
                handleEvent: function (e) {
                  switch (e.type) {
                    case "touchstart":
                    case "pointerdown":
                    case "MSPointerDown":
                    case "mousedown":
                      this._start(e);
                      break;
                    case "touchmove":
                    case "pointermove":
                    case "MSPointerMove":
                    case "mousemove":
                      this._move(e);
                      break;
                    case "touchend":
                    case "pointerup":
                    case "MSPointerUp":
                    case "mouseup":
                    case "touchcancel":
                    case "pointercancel":
                    case "MSPointerCancel":
                    case "mousecancel":
                      this._end(e);
                      break;
                    case "orientationchange":
                      (0, n.waitFrames)(10).then(this._resize.bind(this));
                      break;
                    case "resize":
                      this._resize();
                      break;
                    case "transitionend":
                    case "webkitTransitionEnd":
                    case "oTransitionEnd":
                    case "MSTransitionEnd":
                      this._transitionEnd(e);
                      break;
                    case "wheel":
                    case "DOMMouseScroll":
                    case "mousewheel":
                      this._wheel(e);
                      break;
                    case "keydown":
                      this._key(e);
                      break;
                    case "click":
                      this.enabled &&
                        !e._constructed &&
                        (e.preventDefault(), e.stopPropagation());
                  }
                },
              }),
                (r.prototype = {
                  handleEvent: function (e) {
                    switch (e.type) {
                      case "touchstart":
                      case "pointerdown":
                      case "MSPointerDown":
                      case "mousedown":
                        this._start(e);
                        break;
                      case "touchmove":
                      case "pointermove":
                      case "MSPointerMove":
                      case "mousemove":
                        this._move(e);
                        break;
                      case "touchend":
                      case "pointerup":
                      case "MSPointerUp":
                      case "mouseup":
                      case "touchcancel":
                      case "pointercancel":
                      case "MSPointerCancel":
                      case "mousecancel":
                        this._end(e);
                    }
                  },
                  destroy: function () {
                    this.options.fadeScrollbars &&
                      (clearTimeout(this.fadeTimeout),
                      (this.fadeTimeout = null)),
                      this.options.interactive &&
                        (s.removeEvent(this.indicator, "touchstart", this),
                        s.removeEvent(
                          this.indicator,
                          s.prefixPointerEvent("pointerdown"),
                          this
                        ),
                        s.removeEvent(this.indicator, "mousedown", this),
                        s.removeEvent(window, "touchmove", this),
                        s.removeEvent(
                          window,
                          s.prefixPointerEvent("pointermove"),
                          this
                        ),
                        s.removeEvent(window, "mousemove", this),
                        s.removeEvent(window, "touchend", this),
                        s.removeEvent(
                          window,
                          s.prefixPointerEvent("pointerup"),
                          this
                        ),
                        s.removeEvent(window, "mouseup", this)),
                      this.options.defaultScrollbars &&
                        this.wrapper.parentNode &&
                        this.wrapper.parentNode.removeChild(this.wrapper);
                  },
                  _start: function (e) {
                    var t = e.touches ? e.touches[0] : e;
                    e.preventDefault(),
                      e.stopPropagation(),
                      this.transitionTime(),
                      (this.initiated = !0),
                      (this.moved = !1),
                      (this.lastPointX = t.pageX),
                      (this.lastPointY = t.pageY),
                      (this.startTime = s.getTime()),
                      this.options.disableTouch ||
                        s.addEvent(window, "touchmove", this),
                      this.options.disablePointer ||
                        s.addEvent(
                          window,
                          s.prefixPointerEvent("pointermove"),
                          this
                        ),
                      this.options.disableMouse ||
                        s.addEvent(window, "mousemove", this),
                      this.scroller._execEvent("beforeScrollStart");
                  },
                  _move: function (e) {
                    var t,
                      n,
                      o = e.touches ? e.touches[0] : e,
                      a = s.getTime();
                    this.moved || this.scroller._execEvent("scrollStart"),
                      (this.moved = !0),
                      (t = o.pageX - this.lastPointX),
                      (this.lastPointX = o.pageX),
                      (n = o.pageY - this.lastPointY),
                      (this.lastPointY = o.pageY),
                      (t = this.x + t),
                      (n = this.y + n),
                      this._pos(t, n),
                      1 == this.scroller.options.probeType &&
                      300 < a - this.startTime
                        ? ((this.startTime = a),
                          this.scroller._execEvent("scroll"))
                        : 1 < this.scroller.options.probeType &&
                          this.scroller._execEvent("scroll"),
                      e.preventDefault(),
                      e.stopPropagation();
                  },
                  _end: function (e) {
                    var t;
                    this.initiated &&
                      ((this.initiated = !1),
                      e.preventDefault(),
                      e.stopPropagation(),
                      s.removeEvent(window, "touchmove", this),
                      s.removeEvent(
                        window,
                        s.prefixPointerEvent("pointermove"),
                        this
                      ),
                      s.removeEvent(window, "mousemove", this),
                      this.scroller.options.snap &&
                        ((t = this.scroller._nearestSnap(
                          this.scroller.x,
                          this.scroller.y
                        )),
                        (e =
                          this.options.snapSpeed ||
                          Math.max(
                            Math.max(
                              Math.min(Math.abs(this.scroller.x - t.x), 1e3),
                              Math.min(Math.abs(this.scroller.y - t.y), 1e3)
                            ),
                            300
                          )),
                        (this.scroller.x == t.x && this.scroller.y == t.y) ||
                          ((this.scroller.directionX = 0),
                          (this.scroller.directionY = 0),
                          (this.scroller.currentPage = t),
                          this.scroller.scrollTo(
                            t.x,
                            t.y,
                            e,
                            this.scroller.options.bounceEasing
                          ))),
                      this.moved && this.scroller._execEvent("scrollEnd"));
                  },
                  transitionTime: function (e) {
                    e = e || 0;
                    var t,
                      o = s.style.transitionDuration;
                    o &&
                      ((this.indicatorStyle[o] = e + "ms"),
                      !e &&
                        s.isBadAndroid &&
                        ((this.indicatorStyle[o] = "0.0001ms"),
                        (t = this),
                        (0, n.rAF)(function () {
                          "0.0001ms" === t.indicatorStyle[o] &&
                            (t.indicatorStyle[o] = "0s");
                        })));
                  },
                  transitionTimingFunction: function (e) {
                    this.indicatorStyle[s.style.transitionTimingFunction] = e;
                  },
                  refresh: function () {
                    this.transitionTime(),
                      this.options.listenX && !this.options.listenY
                        ? (s[
                            this.scroller.hasHorizontalScroll
                              ? "addClass"
                              : "removeClass"
                          ](this.scroller.wrapper, "scroll"),
                          s[
                            this.scroller.hasHorizontalScroll
                              ? "addClass"
                              : "removeClass"
                          ](this.wrapper, "visible"))
                        : this.options.listenY && !this.options.listenX
                        ? (s[
                            this.scroller.hasVerticalScroll
                              ? "addClass"
                              : "removeClass"
                          ](this.scroller.wrapper, "scroll"),
                          s[
                            this.scroller.hasVerticalScroll
                              ? "addClass"
                              : "removeClass"
                          ](this.wrapper, "visible"))
                        : (s[
                            this.scroller.hasHorizontalScroll ||
                            this.scroller.hasVerticalScroll
                              ? "addClass"
                              : "removeClass"
                          ](this.scroller.wrapper, "scroll"),
                          s[
                            this.scroller.hasHorizontalScroll ||
                            this.scroller.hasVerticalScroll
                              ? "addClass"
                              : "removeClass"
                          ](this.wrapper, "visible")),
                      this.scroller.hasHorizontalScroll &&
                      this.scroller.hasVerticalScroll
                        ? (s.addClass(this.wrapper, "iScrollBothScrollbars"),
                          s.removeClass(this.wrapper, "iScrollLoneScrollbar"),
                          this.options.defaultScrollbars &&
                            this.options.customStyle &&
                            (this.options.listenX
                              ? (this.wrapper.style.right = "8px")
                              : (this.wrapper.style.bottom = "8px")))
                        : (s.removeClass(this.wrapper, "iScrollBothScrollbars"),
                          s.addClass(this.wrapper, "iScrollLoneScrollbar"),
                          this.options.defaultScrollbars &&
                            this.options.customStyle &&
                            (this.options.listenX
                              ? (this.wrapper.style.right = "2px")
                              : (this.wrapper.style.bottom = "2px"))),
                      s.getRect(this.wrapper),
                      this.options.listenX &&
                        ((this.wrapperWidth = this.wrapper.clientWidth),
                        this.options.resize
                          ? ((this.indicatorWidth = Math.max(
                              Math.round(
                                (this.wrapperWidth * this.wrapperWidth) /
                                  (this.scroller.scrollerWidth ||
                                    this.wrapperWidth ||
                                    1)
                              ),
                              8
                            )),
                            (this.indicatorStyle.width =
                              this.indicatorWidth + "px"))
                          : (this.indicatorWidth = this.indicator.clientWidth),
                        (this.maxPosX =
                          this.wrapperWidth - this.indicatorWidth),
                        "clip" == this.options.shrink
                          ? ((this.minBoundaryX = 8 - this.indicatorWidth),
                            (this.maxBoundaryX = this.wrapperWidth - 8))
                          : ((this.minBoundaryX = 0),
                            (this.maxBoundaryX = this.maxPosX)),
                        (this.sizeRatioX =
                          this.options.speedRatioX ||
                          (this.scroller.maxScrollX &&
                            this.maxPosX / this.scroller.maxScrollX))),
                      this.options.listenY &&
                        ((this.wrapperHeight = this.wrapper.clientHeight),
                        this.options.resize
                          ? ((this.indicatorHeight = Math.max(
                              Math.round(
                                (this.wrapperHeight * this.wrapperHeight) /
                                  (this.scroller.scrollerHeight ||
                                    this.wrapperHeight ||
                                    1)
                              ),
                              8
                            )),
                            (this.indicatorStyle.height =
                              this.indicatorHeight + "px"))
                          : (this.indicatorHeight = this.indicator.clientHeight),
                        (this.maxPosY =
                          this.wrapperHeight - this.indicatorHeight),
                        "clip" == this.options.shrink
                          ? ((this.minBoundaryY = 8 - this.indicatorHeight),
                            (this.maxBoundaryY = this.wrapperHeight - 8))
                          : ((this.minBoundaryY = 0),
                            (this.maxBoundaryY = this.maxPosY)),
                        (this.maxPosY =
                          this.wrapperHeight - this.indicatorHeight),
                        (this.sizeRatioY =
                          this.options.speedRatioY ||
                          (this.scroller.maxScrollY &&
                            this.maxPosY / this.scroller.maxScrollY))),
                      this.updatePosition();
                  },
                  updatePosition: function () {
                    var e =
                        (this.options.listenX &&
                          Math.round(this.sizeRatioX * this.scroller.x)) ||
                        0,
                      t =
                        (this.options.listenY &&
                          Math.round(this.sizeRatioY * this.scroller.y)) ||
                        0;
                    this.options.ignoreBoundaries ||
                      (e < this.minBoundaryX
                        ? ("scale" == this.options.shrink &&
                            ((this.width = Math.max(
                              this.indicatorWidth + e,
                              8
                            )),
                            (this.indicatorStyle.width = this.width + "px")),
                          (e = this.minBoundaryX))
                        : e > this.maxBoundaryX
                        ? (e =
                            "scale" == this.options.shrink
                              ? ((this.width = Math.max(
                                  this.indicatorWidth - (e - this.maxPosX),
                                  8
                                )),
                                (this.indicatorStyle.width = this.width + "px"),
                                this.maxPosX + this.indicatorWidth - this.width)
                              : this.maxBoundaryX)
                        : "scale" == this.options.shrink &&
                          this.width != this.indicatorWidth &&
                          ((this.width = this.indicatorWidth),
                          (this.indicatorStyle.width = this.width + "px")),
                      t < this.minBoundaryY
                        ? ("scale" == this.options.shrink &&
                            ((this.height = Math.max(
                              this.indicatorHeight + 3 * t,
                              8
                            )),
                            (this.indicatorStyle.height = this.height + "px")),
                          (t = this.minBoundaryY))
                        : t > this.maxBoundaryY
                        ? (t =
                            "scale" == this.options.shrink
                              ? ((this.height = Math.max(
                                  this.indicatorHeight - 3 * (t - this.maxPosY),
                                  8
                                )),
                                (this.indicatorStyle.height =
                                  this.height + "px"),
                                this.maxPosY +
                                  this.indicatorHeight -
                                  this.height)
                              : this.maxBoundaryY)
                        : "scale" == this.options.shrink &&
                          this.height != this.indicatorHeight &&
                          ((this.height = this.indicatorHeight),
                          (this.indicatorStyle.height = this.height + "px"))),
                      (this.x = e),
                      (this.y = t),
                      this.scroller.options.useTransform
                        ? (this.indicatorStyle[s.style.transform] =
                            "translate(" +
                            e +
                            "px," +
                            t +
                            "px)" +
                            this.scroller.translateZ)
                        : ((this.indicatorStyle.left = e + "px"),
                          (this.indicatorStyle.top = t + "px"));
                  },
                  _pos: function (e, t) {
                    e < 0 ? (e = 0) : e > this.maxPosX && (e = this.maxPosX),
                      t < 0 ? (t = 0) : t > this.maxPosY && (t = this.maxPosY),
                      (e = this.options.listenX
                        ? Math.round(e / this.sizeRatioX)
                        : this.scroller.x),
                      (t = this.options.listenY
                        ? Math.round(t / this.sizeRatioY)
                        : this.scroller.y),
                      this.scroller.scrollTo(e, t);
                  },
                  fade: function (e, t) {
                    var n;
                    (t && !this.visible) ||
                      (clearTimeout(this.fadeTimeout),
                      (this.fadeTimeout = null),
                      (n = e ? 250 : 500),
                      (t = e ? 0 : 300),
                      (e = e ? "1" : "0"),
                      (this.wrapperStyle[s.style.transitionDuration] =
                        n + "ms"),
                      (this.fadeTimeout = setTimeout(
                        function (e) {
                          (this.wrapperStyle.opacity = e), (this.visible = +e);
                        }.bind(this, e),
                        t
                      )));
                  },
                }),
                (a.utils = s),
                (t.default = a);
            }.apply(t, n)) || (e.exports = n);
      },
      8422: function (e, t) {
        var n = function (e) {
          "use strict";
          Object.defineProperty(e, "__esModule", { value: !0 }),
            (t.settings = void 0),
            (t.settings = {
              app: {
                "preload-collection": "preload",
                "autologin-collection": "autologin",
                login: {
                  default: !0,
                  redirect: "",
                  sso: { cognito: !1, generic: !1 },
                },
                player: {
                  drm: null,
                  config: {
                    key: "c857fcb7-19e9-4bdc-be14-3256d155e7ab",
                    location: { ui_css: "" },
                    playback: { muted: !1, autoplay: !1 },
                    ui: !1,
                  },
                },
                "player-events": [
                  "Ready",
                  "Error",
                  "Playing",
                  "Paused",
                  "PlaybackFinished",
                  "TimeChanged",
                ],
                asset: {
                  castLimit: 8,
                  castLimitPhone: 6,
                  directorsLimit: 4,
                  directorsLimitPhone: 2,
                  genreLimit: 6,
                  genreLimitPhone: 4,
                },
                epg: {
                  hiddenChannels: 4,
                  hiddenChannelsSmall: 2,
                  visibleTime: 4,
                  visibleTimeSmall: 2,
                  timeFormat: { hour: "2-digit", minute: "2-digit" },
                  timeBuffer: 2,
                  timeBufferSmall: 2,
                  update: 6e4,
                },
                "stripe-page": {
                  layout: "default",
                  content: {
                    layout: [["stripes"]],
                    content: {
                      stripes: {
                        settings: { layout: [], content: {} },
                        behavior: [
                          {
                            events: ["COMPONENT_SET"],
                            handlers: { component: { action: "stripes" } },
                          },
                        ],
                      },
                    },
                  },
                },
                localization: {
                  hourCycle: "h23",
                  airDate: { day: "2-digit", month: "2-digit" },
                  airTime: { hour: "2-digit", minute: "2-digit" },
                  airDateTime: {
                    hour: "2-digit",
                    minute: "2-digit",
                    day: "2-digit",
                    month: "2-digit",
                  },
                },
                endpoints: {
                  logger: "/logger/api",
                  series: "content/item/series/",
                  season: "content/item/season/",
                },
                "default-stripe": {
                  component: "stripe",
                  collection: {},
                  settings: {
                    title: !1,
                    header: !1,
                    seeAll: !1,
                    headerIcon: null,
                    headerSvg: null,
                    page: null,
                    allPage: null,
                    info: !1,
                    bigInfo: !1,
                    progress: !1,
                    orientation: "portrait",
                    style: "frame",
                    size: "medium",
                    scrollItems: 1,
                    tags: !1,
                  },
                },
                "default-super-hero": {
                  component: "super-hero",
                  collection: {},
                  settings: {
                    page: "asset",
                    tags: !1,
                    autoAdvance: !1,
                    rotationFrequency: 5,
                    wrap: !1,
                    showTitle: !0,
                    showInfo: !0,
                  },
                },
                "tv-search": {
                  component: "stripe",
                  collection: {
                    provider: "edge",
                    url: "content/search/tv_schedule",
                    contentPath: ["contents", "content"],
                    params: { page: 0, size: 20 },
                  },
                  settings: {
                    title: !0,
                    header: !1,
                    seeAll: !0,
                    headerIcon: "icon-live-tv",
                    headerSvg: null,
                    page: "asset",
                    allPage: "grid_of_posters",
                    info: !1,
                    bigInfo: !1,
                    progress: !1,
                    orientation: "portrait",
                    style: "zoom",
                    size: "medium",
                    scrollItems: 1,
                    tags: !1,
                  },
                },
                "vod-search": {
                  component: "stripe",
                  collection: {
                    provider: "edge",
                    url: "content/search/vod",
                    contentPath: ["contents", "content"],
                    params: { page: 0, size: 20 },
                  },
                  settings: {
                    title: !0,
                    header: !1,
                    seeAll: !0,
                    headerIcon: "icon-vod",
                    headerSvg: null,
                    page: "asset",
                    allPage: "grid_of_posters",
                    info: !1,
                    bigInfo: !1,
                    progress: !1,
                    orientation: "portrait",
                    style: "zoom",
                    size: "medium",
                    scrollItems: 1,
                    tags: !1,
                  },
                },
                "logz-io": {
                  url: "https://listener-eu.logz.io:8071/",
                  token: "fQpZoqyLfEMFEsUPemfIuMCVJcFuFnRX",
                  enabled: !1,
                },
              },
              lang: { default: "spa" },
              settings: {
                "base-api": ":4446/xtv-ws-client/api/",
                ssl: !0,
                log: !1,
                debug: !1,
                environment: "prod",
                project: "yourtv-dish-prod",
                version: "1.0.54ec635",
                breakpoints: {
                  small: "899px",
                  medium: "1439px",
                  large: "1920px",
                  uhd: "3840px",
                },
                app: {
                  "preload-collection": "preload",
                  "autologin-collection": "autologin",
                  login: {
                    default: !0,
                    redirect: "",
                    sso: { cognito: !1, generic: !1 },
                  },
                  player: {
                    drm: null,
                    config: {
                      key: "c857fcb7-19e9-4bdc-be14-3256d155e7ab",
                      location: { ui_css: "" },
                      playback: { muted: !1, autoplay: !1 },
                      ui: !1,
                    },
                  },
                  "player-events": [
                    "Ready",
                    "Error",
                    "Playing",
                    "Paused",
                    "PlaybackFinished",
                    "TimeChanged",
                  ],
                  asset: {
                    castLimit: 8,
                    castLimitPhone: 6,
                    directorsLimit: 4,
                    directorsLimitPhone: 2,
                    genreLimit: 6,
                    genreLimitPhone: 4,
                  },
                  epg: {
                    hiddenChannels: 4,
                    hiddenChannelsSmall: 2,
                    visibleTime: 4,
                    visibleTimeSmall: 2,
                    timeFormat: { hour: "2-digit", minute: "2-digit" },
                    timeBuffer: 2,
                    timeBufferSmall: 2,
                    update: 6e4,
                  },
                  "stripe-page": {
                    layout: "default",
                    content: {
                      layout: [["stripes"]],
                      content: {
                        stripes: {
                          settings: { layout: [], content: {} },
                          behavior: [
                            {
                              events: ["COMPONENT_SET"],
                              handlers: { component: { action: "stripes" } },
                            },
                          ],
                        },
                      },
                    },
                  },
                  localization: {
                    hourCycle: "h23",
                    airDate: { day: "2-digit", month: "2-digit" },
                    airTime: { hour: "2-digit", minute: "2-digit" },
                    airDateTime: {
                      hour: "2-digit",
                      minute: "2-digit",
                      day: "2-digit",
                      month: "2-digit",
                    },
                  },
                  endpoints: {
                    logger: "/logger/api",
                    series: "content/item/series/",
                    season: "content/item/season/",
                  },
                  "default-stripe": {
                    component: "stripe",
                    collection: {},
                    settings: {
                      title: !1,
                      header: !1,
                      seeAll: !1,
                      headerIcon: null,
                      headerSvg: null,
                      page: null,
                      allPage: null,
                      info: !1,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "frame",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  "default-super-hero": {
                    component: "super-hero",
                    collection: {},
                    settings: {
                      page: "asset",
                      tags: !1,
                      autoAdvance: !1,
                      rotationFrequency: 5,
                      wrap: !1,
                      showTitle: !0,
                      showInfo: !0,
                    },
                  },
                  "tv-search": {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/search/tv_schedule",
                      contentPath: ["contents", "content"],
                      params: { page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-live-tv",
                      headerSvg: null,
                      page: "asset",
                      allPage: "grid_of_posters",
                      info: !1,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  "vod-search": {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/search/vod",
                      contentPath: ["contents", "content"],
                      params: { page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-vod",
                      headerSvg: null,
                      page: "asset",
                      allPage: "grid_of_posters",
                      info: !1,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  "logz-io": {
                    url: "https://listener-eu.logz.io:8071/",
                    token: "fQpZoqyLfEMFEsUPemfIuMCVJcFuFnRX",
                    enabled: !1,
                  },
                },
                events: {
                  system: {
                    EVENTS_REGISTER: {
                      target: "window",
                      handler: "Events",
                      method: "register",
                    },
                    EVENTS_RESET: {
                      target: "window",
                      handler: "Events",
                      method: "reset",
                    },
                    ROUTER_PARSE: {
                      target: "window",
                      handler: "Router",
                      method: "parse",
                    },
                    ROUTER_NAVIGATE: {
                      target: "window",
                      handler: "Router",
                      method: "navigate",
                    },
                    ROUTER_CHANGE_URL: {
                      target: "window",
                      handler: "Router",
                      method: "changeUrl",
                    },
                    ROUTER_BACK: {
                      target: "window",
                      handler: "Router",
                      method: "back",
                    },
                    ROUTER_LANGUAGE: {
                      target: "window",
                      handler: "Router",
                      method: "language",
                    },
                    DOM_RENDER: {
                      target: "window",
                      handler: "Dom",
                      method: "render",
                    },
                    DOM_TRANSLATE: {
                      target: "window",
                      handler: "Dom",
                      method: "translate",
                    },
                    DOM_PAGINATE: {
                      target: "window",
                      handler: "Dom",
                      method: "paginate",
                    },
                    DOM_REFRESH: {
                      target: "window",
                      handler: "Dom",
                      method: "refresh",
                    },
                    DOM_LAYOUT: {
                      target: "window",
                      handler: "Dom",
                      method: "layout",
                    },
                    DOM_PAGE: {
                      target: "window",
                      handler: "Dom",
                      method: "page",
                    },
                    DOM_PARSE: {
                      target: "window",
                      handler: "Dom",
                      method: "parse",
                    },
                    DOM_PARSE_COMPONENT: {
                      target: "window",
                      handler: "Dom",
                      method: "parseComponent",
                    },
                    DOM_HEADER: {
                      target: "window",
                      handler: "Dom",
                      method: "header",
                    },
                    DOM_RESIZE: {
                      target: "window",
                      handler: "Dom",
                      method: "resize",
                    },
                    DATA_FETCH: {
                      target: "window",
                      handler: "Data",
                      method: "fetch",
                    },
                    DATA_FETCH_ALL: {
                      target: "window",
                      handler: "Data",
                      method: "fetchAll",
                    },
                    DATA_PRELOAD: {
                      target: "window",
                      handler: "Data",
                      method: "preload",
                      async: !0,
                    },
                    PRELOAD_READY: {
                      target: "window",
                      handler: "System",
                      method: "ready",
                    },
                    LOGIN_SUCCESS: {
                      target: "window",
                      handler: "System",
                      method: "login",
                    },
                    SESSION_READY: {
                      target: "window",
                      handler: "System",
                      method: "token",
                    },
                    UNAUTHORIZE: {
                      target: "window",
                      handler: "System",
                      method: "unauthorize",
                    },
                  },
                  project: {
                    keydown: {
                      target: "body",
                      handler: "Events",
                      method: "_keyDown",
                    },
                    click: {
                      target: "body",
                      handler: "Events",
                      method: "_click",
                    },
                    mousemove: {
                      target: "body",
                      handler: "Events",
                      method: "_mousemove",
                    },
                    touchstart: {
                      target: "body",
                      handler: "Events",
                      method: "_touchstart",
                    },
                    touchend: {
                      target: "body",
                      handler: "Events",
                      method: "_touchend",
                    },
                    resize: {
                      target: "window",
                      handler: "Events",
                      method: "_resize",
                    },
                    orientationchange: {
                      target: "window",
                      handler: "Events",
                      method: "_orientationchange",
                    },
                    scroll: {
                      target: "window",
                      handler: "Events",
                      method: "_scroll",
                    },
                    TIMEOUT: {
                      target: "window",
                      handler: { parental: { action: "timeout" } },
                    },
                    REFRESH_CUSTOMER_TOKENS: {
                      target: "window",
                      handler: { prm: { action: "refreshTokens" } },
                    },
                    PRM_REGISTER_ERROR: {
                      target: "window",
                      handler: { prm: { action: "registerError" } },
                    },
                    PRM_SOURCE_ERROR: {
                      target: "window",
                      handler: { prm: { action: "sourceError" } },
                    },
                    PRM_SESSION_ERROR: {
                      target: "window",
                      handler: { prm: { action: "sessionError" } },
                    },
                    PRM_SESSION_TOKEN_ERROR: {
                      target: "window",
                      handler: { prm: { action: "sessionTokenError" } },
                    },
                    PRM_SESSION_TOKEN_SOURCE_ERROR: {
                      target: "window",
                      handler: { prm: { action: "sessionTokenSourceError" } },
                    },
                    PRM_REGISTERED: {
                      target: "window",
                      handler: { prm: { action: "prmRegistered" } },
                    },
                  },
                },
                mapping: {
                  8: "BACK",
                  13: "OK",
                  33: "PAGE_UP",
                  34: "PAGE_DOWN",
                  36: "GREEN",
                  37: "LEFT",
                  38: "UP",
                  39: "RIGHT",
                  40: "DOWN",
                  45: "YELLOW",
                  46: "RED",
                  48: "0",
                  49: "1",
                  50: "2",
                  51: "3",
                  52: "4",
                  53: "5",
                  54: "6",
                  55: "7",
                  56: "8",
                  57: "9",
                  70: "FULL_SCREEN",
                  71: "GUIDE",
                  72: "BLUE",
                  73: "INFO",
                  76: "LAST",
                  77: "MENU",
                  81: "MUTE",
                  82: "RECORD",
                  83: "STOP",
                  107: "VOLUME_UP",
                  109: "VOLUME_DOWN",
                  186: "PLAY",
                  187: "CHANNEL_UP",
                  188: "REWIND",
                  189: "CHANNEL_DOWN",
                  190: "FAST_FORWARD",
                  219: "PREVIOUS",
                  221: "NEXT",
                  222: "PAUSE",
                },
                maui: {
                  languages: { en: "eng", pt: "por", es: "spa" },
                  stripes: {
                    1: "live-tv",
                    2: "on-demand",
                    3: "recordings",
                    4: "apps",
                    5: "profile",
                    6: "last-chance-to-watch",
                    7: "favorites",
                    8: "continue-watching",
                    9: "most-watched-on-tv",
                    10: "most-watched-on-demand",
                    14: "just-for-you",
                    15: "all-titles",
                    16: "movies",
                    17: "tv",
                    18: "kids",
                    19: "rentals",
                    20: "free",
                    21: "adult",
                    24: "settings",
                  },
                  targets: {
                    "live-tv": "grid_of_posters",
                    "on-demand": "grid_of_posters",
                    recordings: "grid_of_posters",
                    apps: "grid_of_posters",
                    profile: "grid_of_posters",
                    "last-chance-to-watch": "grid_of_posters",
                    favorites: "grid_of_posters",
                    "continue-watching": "grid_of_posters",
                    "most-watched-on-tv": "grid_of_posters",
                    "most-watched-on-demand": "grid_of_posters",
                    "just-for-you": "grid_of_posters",
                    "all-titles": "grid_of_posters",
                    movies: "grid_of_posters",
                    tv: "grid_of_posters",
                    kids: "grid_of_posters",
                    rentals: "grid_of_posters",
                    adult: "grid_of_posters",
                    settings: "grid_of_posters",
                  },
                  locales: {
                    1: "home",
                    2: "live-tv",
                    3: "vod",
                    4: "recordings",
                    5: "profile",
                    6: "search",
                    s1: "live-tv",
                    s2: "on-demand",
                    s3: "recordings",
                    s4: "apps",
                    s6: "last-chance-to-watch",
                    s7: "favorites",
                    s8: "continue-watching",
                    s9: "most-watched-on-tv",
                    s10: "most-watched-on-demand",
                    s14: "just-for-you",
                    s15: "all-titles",
                    s16: "movies",
                    s17: "tv",
                    s18: "kids",
                    s19: "rentals",
                    s21: "adult",
                    s24: "settings",
                  },
                  navbar: {
                    1: "landing_page",
                    2: "epg",
                    3: "on_demand",
                    4: "recordings",
                    5: "profile",
                    6: "search",
                  },
                  pages: { 1: "landing_page", 2: "on_demand" },
                  providers: {
                    recom_partner: "edge",
                    recordings: "unsupported",
                    application: "unsupported",
                    settings: "unsupported",
                    last_chance_to_watch: "edge",
                    favorites: "unsupported",
                    continue_watching: "edge",
                    minerva_trending: "edge",
                    recent_searches: "unsupported",
                    minerva_popular_catchup: "edge",
                    catchup_tv: "edge",
                    operator_defined_channels: "edge",
                    ppv: "unsupported",
                    fixed_live_tv: "edge",
                    fixed_vod: "edge",
                    filters: "edge",
                  },
                },
                router: {
                  lang: { default: "spa", place: "folder", remember: !0 },
                  page: {
                    default: "landing_page",
                    login: "login",
                    error: "error",
                    place: "folder",
                  },
                  id: { default: "", place: "folder" },
                  hash: !0,
                  html: !1,
                  languages: ["eng", "spa"],
                  head: { title: "DISH Digital" },
                },
                storage: {
                  login: "auth-token",
                  data: {
                    language: { type: "cookie", preserve: !0 },
                    device: { type: "cookie", preserve: !0 },
                    deviceId: { type: "cookie", preserve: !0 },
                    deviceToken: { type: "cookie" },
                    deviceInfoToken: { type: "cookie" },
                    accountId: { type: "cookie" },
                    "auth-token": { type: "cookie" },
                    "token-expire": { type: "cookie" },
                    remember: { type: "cookie" },
                    providers: { type: "cookie" },
                    "mn-customer": { type: "cookie" },
                    "mn-packages": { type: "cookie" },
                    "mn-services": { type: "cookie" },
                    "mn-prm-session": { type: "cookie" },
                    "drm-token": { type: "cookie" },
                    serviceSessionId: { type: "cookie" },
                    playbackSessionId: { type: "cookie" },
                    playbackSessionToken: { type: "cookie" },
                    playReportTimeInterval: { type: "cookie" },
                    prmStatus: { type: "cookie" },
                    prmHosts: { type: "cookie" },
                    "cache-token": { type: "cookie" },
                    vuid: { type: "cookie" },
                    parental: { type: "cookie" },
                    parentalStatus: { type: "cookie" },
                    parentalTimeout: { type: "cookie" },
                    reverseEPG: { type: "cookie" },
                    futureEPG: { type: "cookie" },
                    analytics: { type: "local" },
                    bitmovinplayer_config: { type: "local" },
                  },
                },
                stripes: {
                  "live-tv": {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/list/live_tv_recommendation/1",
                      contentPath: ["contents", "content"],
                      params: { page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-live-tv",
                      headerSvg: null,
                      page: "asset",
                      allPage: "epg",
                      info: !1,
                      bigInfo: !1,
                      progress: !0,
                      orientation: "landscape",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  "on-demand": {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/list/vod_recommendation/1",
                      contentPath: ["contents", "content"],
                      params: { page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-vod",
                      headerSvg: null,
                      page: "asset",
                      allPage: "on_demand",
                      info: !0,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  "continue-watching": {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "user/bookmark/list/",
                      contentPath: ["contents", "content"],
                      params: { type: "vod", page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-vod",
                      headerSvg: null,
                      page: "asset",
                      allPage: "on_demand",
                      info: !0,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  favorites: {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "",
                      contentPath: ["contents", "content"],
                      params: { page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-favorites",
                      headerSvg: null,
                      page: "asset",
                      allPage: "favorites",
                      info: !0,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  "most-watched-on-demand": {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/list/vod_trending/1",
                      contentPath: ["contents", "content"],
                      params: { page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-vod",
                      headerSvg: null,
                      page: "asset",
                      allPage: "on_demand",
                      info: !1,
                      bigInfo: !1,
                      progress: !0,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  "most-watched-on-tv": {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/list/live_tv_trending/1",
                      contentPath: ["contents", "content"],
                      params: { page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-most-watched-tv",
                      headerSvg: null,
                      page: "asset",
                      allPage: "epg",
                      info: !1,
                      bigInfo: !1,
                      progress: !0,
                      orientation: "landscape",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  "last-chance-to-watch": {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/vod/expiring/",
                      contentPath: ["contents", "content"],
                      params: { page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-vod",
                      headerSvg: null,
                      page: "asset",
                      allPage: "grid_of_posters",
                      info: !1,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  "just-for-you": {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/vod/filter/",
                      contentPath: ["result", "filteredVods"],
                      params: { filters: "106", page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-vod",
                      headerSvg: null,
                      page: "asset",
                      allPage: "grid_of_posters",
                      info: !0,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  movies: {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/vod/filter/",
                      contentPath: ["result", "filteredVods"],
                      params: { filters: "701", page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-di-watch-trailer",
                      headerSvg: null,
                      page: "asset",
                      allPage: "grid_of_posters",
                      info: !0,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  tv: {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/vod/filter/",
                      contentPath: ["result", "filteredVods"],
                      params: { filters: "702", page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-live-tv",
                      headerSvg: null,
                      page: "asset",
                      allPage: "grid_of_posters",
                      info: !0,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  kids: {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/vod/filter/",
                      contentPath: ["result", "filteredVods"],
                      params: { filters: "106", page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-vod",
                      headerSvg: null,
                      page: "asset",
                      allPage: "grid_of_posters",
                      info: !0,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  rentals: {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/vod/filter/",
                      contentPath: ["result", "filteredVods"],
                      params: { filters: "802", page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-vod",
                      headerSvg: null,
                      page: "asset",
                      allPage: "grid_of_posters",
                      info: !0,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  "all-titles": {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/vod/filter",
                      contentPath: ["result", "filteredVods"],
                      params: { page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-vod",
                      headerSvg: null,
                      page: "asset",
                      allPage: "grid_of_posters",
                      info: !0,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  adult: {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/vod/filter/",
                      contentPath: ["result", "filteredVods"],
                      params: { filters: "1101", page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-vod",
                      headerSvg: null,
                      page: "asset",
                      allPage: "grid_of_posters",
                      info: !0,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                  free: {
                    component: "stripe",
                    collection: {
                      provider: "edge",
                      url: "content/vod/filter/",
                      contentPath: ["result", "filteredVods"],
                      params: { filters: "801", page: 0, size: 20 },
                    },
                    settings: {
                      title: !0,
                      header: !1,
                      seeAll: !0,
                      headerIcon: "icon-vod",
                      headerSvg: null,
                      page: "asset",
                      allPage: "grid_of_posters",
                      info: !0,
                      bigInfo: !1,
                      progress: !1,
                      orientation: "portrait",
                      style: "zoom",
                      size: "medium",
                      scrollItems: 1,
                      tags: !1,
                    },
                  },
                },
              },
              collections: {
                analytics: {
                  provider: "analytics",
                  url: "AnalyticsWS/eventApp/rest/processEvent/",
                  method: "POST",
                  options: { getUrl: "getUUID", postUrl: "ingest" },
                  params: { eventHeader: { default: {} } },
                },
                asset: {
                  provider: "edge",
                  url: "content/item/",
                  transform: "asset",
                  options: { action: "url" },
                  method: "GET",
                  contentPath: ["content"],
                  response: {
                    id: { field: "contentId" },
                    linkId: { field: "contentId" },
                    channelId: { field: "channelId" },
                    pageId: { default: "asset" },
                    type: { default: "page" },
                    paramsType: { field: "contentType" },
                    contentType: !0,
                    title: {
                      default: "",
                      fields: ["title", "releasedYear"],
                      transform: "asset",
                      options: { action: "title" },
                    },
                    "series-title": { default: "", field: "title" },
                    subtitle: {
                      fields: [
                        "number",
                        "episodeNumber",
                        "seasonNumber",
                        "episodeTitle",
                      ],
                      transform: "utils",
                      options: { action: "setSettings", property: "subtitle" },
                    },
                    description: {
                      default: "",
                      field: "description",
                      transform: "utils",
                      options: { action: "truncate", limit: 250 },
                    },
                    encrypted: { default: !1, field: "encrypted" },
                    programId: {
                      field: "programId",
                      transform: "asset",
                      options: { action: "programId" },
                    },
                    resourceId: !0,
                    seasonId: { default: !1, field: "seasonId" },
                    seriesId: { default: !1, field: "seriesId" },
                    showType: { default: "", field: "showType" },
                    "channel-call-sign": { field: ["TV_CHANNEL", "callSign"] },
                    trailer: { default: !1, field: "trailerId" },
                    "channel-logo": {
                      field: ["TV_CHANNEL", "images", "image"],
                      transform: "image-url",
                      options: {
                        orientation: "channel-asset",
                        ext: "png",
                        usage: "CH_LOGO",
                      },
                    },
                    "image-episode": {
                      field: ["images", "image"],
                      transform: "image-url",
                      options: {
                        metadataImage: !0,
                        orientation: "landscape",
                        usage: "S_DESC",
                      },
                    },
                    image: {
                      field: ["images", "image"],
                      transform: "image-url",
                      options: {
                        metadataImage: !0,
                        orientation: "asset",
                        size: "normal",
                        usage: "S_DESC",
                      },
                    },
                    "image-phone": {
                      field: ["images", "image"],
                      transform: "image-url",
                      options: {
                        metadataImage: !0,
                        orientation: "asset",
                        size: "phone",
                        usage: "S_DESC",
                      },
                    },
                    "image-poster": {
                      field: ["images", "image"],
                      transform: "image-url",
                      options: {
                        metadataImage: !0,
                        orientation: "asset-poster",
                        size: "normal",
                        usage: "DETAILS",
                      },
                    },
                    "image-phone-poster": {
                      field: ["images", "image"],
                      transform: "image-url",
                      options: {
                        metadataImage: !0,
                        orientation: "asset-poster",
                        size: "phone",
                        usage: "DETAILS",
                      },
                    },
                    duration: {
                      default: 0,
                      fields: ["duration", "runtime"],
                      transform: "asset",
                      options: { action: "duration" },
                    },
                    airtime: {
                      field: "startDateTime",
                      transform: "asset",
                      options: { action: "airtime" },
                    },
                    isLive: {
                      fields: ["startDateTime", "endDateTime"],
                      transform: "stripe",
                      options: { action: "isLive" },
                    },
                    progress: {
                      default: 0,
                      fields: [
                        "startDateTime",
                        "endDateTime",
                        "bookmarkPosition",
                        "duration",
                        "runtime",
                        "isWatched",
                      ],
                      transform: "asset",
                      options: { action: "progress" },
                    },
                    progressTime: {
                      default: 0,
                      field: "bookmarkPos",
                      transform: "asset",
                      options: { action: "progressTime" },
                    },
                    catchup: {
                      default: !1,
                      field: "catchupTv",
                      transform: "asset",
                      options: { action: "catchup" },
                    },
                    restart: {
                      default: !1,
                      fields: ["startDateTime", "endDateTime", "restartTV"],
                      transform: "asset",
                      options: { action: "restart" },
                    },
                    bookmark: {
                      default: 0,
                      fields: ["bookmarkPos", "bookmarkPosition"],
                      transform: "asset",
                      options: { action: "bookmarkPos" },
                    },
                    rating: { default: "", field: ["parentalLevel", "rating"] },
                    restricted: {
                      default: !1,
                      field: ["parentalLevel", "restricted"],
                      transform: "parental",
                      options: { action: "restricted" },
                    },
                    baseRestricted: {
                      default: !1,
                      field: ["parentalLevel", "restricted"],
                    },
                    hd: { default: !1, field: "hd" },
                    cc: { default: !1, field: "closedCaptioning" },
                    genre: {
                      fields: ["genre", "genres"],
                      transforms: ["utils", "asset"],
                      options: {
                        utils: { action: "prepareGenres" },
                        asset: { action: "genre" },
                      },
                    },
                    cast: {
                      field: ["credits", "actors", "actor"],
                      transform: "asset",
                      options: { action: "cast" },
                    },
                    directors: {
                      field: ["credits", "directors", "director"],
                      transform: "asset",
                      options: { action: "directors" },
                    },
                    playable: {
                      default: !1,
                      field: "endDateTime",
                      transform: "asset",
                      options: { action: "playable" },
                    },
                    episodic: {
                      default: !1,
                      field: "seriesId",
                      transform: "asset",
                      options: { action: "episodic" },
                    },
                    fallbackStream: {
                      default: {},
                      field: ["playbackResources", "resource"],
                      transform: "asset",
                      options: { action: "fallbackStream" },
                    },
                    "episode-number": {
                      fields: ["number", "episodeNumber"],
                      transform: "season",
                      options: { action: "number" },
                    },
                    purchased: { default: !1, field: "purchased" },
                    "not-rented": {
                      default: !1,
                      fields: ["price", "purchased"],
                      transform: "asset",
                      options: { action: "purchased" },
                    },
                    "rent-label": {
                      default: "",
                      field: ["price"],
                      transform: "asset",
                      options: { action: "rentLabel" },
                    },
                    "rent-button-label": {
                      default: "",
                      transform: "asset",
                      options: { action: "rentButtonLabel" },
                    },
                    "rent-duration": {
                      default: "",
                      field: ["rentTime"],
                      transform: "asset",
                      options: { action: "rentDuration" },
                    },
                    uri: { default: null, field: ["uri"] },
                    price: { default: null, field: ["price"] },
                  },
                },
                bookmark: {
                  provider: "edge",
                  url: "",
                  method: "POST",
                  params: { contentType: null, isWatched: null },
                },
                "header-menu": {
                  response: { label: !0, type: !0, pageId: !0, lang: !0 },
                  data: [{ label: "logout", type: "logout" }],
                },
                navbar: {
                  tags: ["parental"],
                  response: {
                    app: !0,
                    type: !0,
                    pageId: !0,
                    linkId: !0,
                    lock: !0,
                    unlock: !0,
                    lockTxt: !0,
                    unlockTxt: !0,
                    icon: !0,
                    svg: {
                      field: "svg",
                      transform: "parental",
                      options: {
                        action: "navbar",
                        locked: "lock",
                        unlocked: "unlock",
                      },
                    },
                    label: {
                      default: "",
                      field: "label",
                      transform: "parental",
                      options: {
                        action: "navbar",
                        locked: "lockTxt",
                        unlocked: "unlockTxt",
                      },
                    },
                    selected: { default: !1, transform: "selected" },
                    isVisible: { default: !0 },
                  },
                  data: [
                    {
                      type: "page",
                      icon: "icon-home",
                      label: "home",
                      pageId: "landing_page",
                    },
                    {
                      type: "page",
                      icon: "icon-live-tv",
                      label: "live-tv",
                      pageId: "epg",
                    },
                    {
                      type: "page",
                      icon: "icon-vod",
                      label: "vod",
                      pageId: "on_demand",
                    },
                  ],
                },
                purchase: {
                  provider: "edge",
                  url: "content/purchase",
                  method: "POST",
                  params: { purchase: {} },
                  reply: {
                    error: {
                      event: "PURCHASE_ERROR",
                      status: {
                        404: { event: "PURCHASE_ERROR", data: ["0003-1110"] },
                        409: {
                          event: "PURCHASE_ERROR",
                          contentPath: ["MinervaError", "code"],
                        },
                        418: {
                          event: "PURCHASE_SUCCESS",
                          contentPath: ["purchaseResult", "items", "content"],
                        },
                      },
                      response: { content: !0 },
                    },
                    success: {
                      contentPath: ["purchaseResult", "items", "content"],
                      event: "PURCHASE_SUCCESS",
                      response: { content: !0 },
                    },
                  },
                },
                season: {
                  provider: "edge",
                  url: "content/item/vod_season/",
                  method: "GET",
                  contentPath: ["content"],
                  transform: "utils",
                  options: { action: "urlAppend" },
                  response: {
                    id: { field: "contentId" },
                    contentType: !0,
                    number: !0,
                    image: {
                      field: ["images", "image"],
                      transform: "image-url",
                      options: { orientation: "season" },
                    },
                    rating: { default: "", field: ["parentalLevel", "rating"] },
                    baseRestricted: {
                      default: !1,
                      field: ["parentalLevel", "restricted"],
                    },
                    restricted: {
                      default: !1,
                      field: ["parentalLevel", "restricted"],
                      transform: "parental",
                      options: { action: "restricted" },
                    },
                    genre: {
                      fields: ["genre", "genres"],
                      transforms: ["utils", "asset"],
                      options: {
                        utils: { action: "prepareGenres" },
                        asset: { action: "genre" },
                      },
                    },
                  },
                },
                seasons: {
                  provider: "edge",
                  url: "content/list/vod_series/",
                  method: "GET",
                  contentPath: ["contents", "content"],
                  transform: "utils",
                  options: { action: "urlAppend", source: "router" },
                  params: {
                    page: { default: 0 },
                    size: { default: 999 },
                    restricted: {
                      default: !0,
                      transform: "parental",
                      options: { action: "locked" },
                    },
                  },
                  response: {
                    id: { field: "contentId" },
                    number: { default: 0, field: "seasonNumber" },
                  },
                },
                series: {
                  provider: "edge",
                  url: "content/item/vod_series/",
                  method: "GET",
                  contentPath: ["content"],
                  transform: "utils",
                  options: { action: "urlAppend" },
                  tags: ["parental"],
                  response: {
                    contentType: !0,
                    id: { field: "contentId" },
                    baseRestricted: {
                      default: !1,
                      field: ["parentalLevel", "restricted"],
                    },
                    restricted: {
                      default: !1,
                      field: ["parentalLevel", "restricted"],
                      transform: "parental",
                      options: { action: "restricted" },
                    },
                    title: {
                      default: "",
                      fields: ["title", "releasedYear"],
                      transform: "asset",
                      options: { action: "title" },
                    },
                  },
                },
                "epg-channels": {
                  provider: "edge",
                  url: "content/list/live_tv/2",
                  method: "GET",
                  params: { page: { default: 0 }, size: { default: 10 } },
                  cache: { time: 36e5, type: "local" },
                  contentPath: ["contents", "content"],
                  response: {
                    id: { field: "contentId" },
                    type: { default: "page" },
                    pageId: { default: "fullscreen" },
                    linkId: { field: "contentId" },
                    paramsType: { field: "contentType" },
                    visible: { default: !1 },
                    contentType: !0,
                    isCatchup: {
                      default: !1,
                      field: "channelRules",
                      transform: "epg",
                      options: { action: "isCatchup" },
                    },
                    number: { default: 0, field: "number" },
                    channelNumber: { field: "number" },
                    image: {
                      field: ["images", "image"],
                      transform: "image-url",
                      options: {
                        ext: "png",
                        orientation: "channel",
                        usage: "CH_LOGO",
                      },
                    },
                    channelLogo: {
                      field: ["images", "image"],
                      transform: "image-url",
                      options: {
                        orientation: "channel-asset",
                        ext: "png",
                        usage: "CH_LOGO",
                      },
                    },
                    title: { field: "callSign" },
                    callSign: { field: "callSign" },
                    prmId: { transform: "prm", options: { action: "prmId" } },
                    fallbackStream: {
                      default: { empty: !0, fallback: !0 },
                      field: ["playbackResources", "resource"],
                      transform: "asset",
                      options: { action: "fallbackStream" },
                    },
                  },
                },
                "epg-schedules": {
                  provider: "edge",
                  url: "content/list/tv_channel/",
                  method: "GET",
                  params: {
                    page: { default: 0 },
                    size: { default: 360 },
                    dateFrom: { default: 0 },
                    dateTo: { default: 0 },
                  },
                  transform: "utils",
                  options: { action: "urlAppend" },
                  contentPath: ["contents", "content"],
                  response: {
                    id: { field: "contentId" },
                    type: { default: "page" },
                    programId: !0,
                    contentType: !0,
                    title: { default: "", field: "title" },
                    playbackTitle: {
                      default: "",
                      fields: ["title", "releasedYear"],
                      transform: "asset",
                      options: { action: "title" },
                    },
                    start: { field: "startDateTime" },
                    end: { field: "endDateTime" },
                    channelId: {
                      fields: [["TV_CHANNEL", "contentId"], ["channelId"]],
                      transform: "epg",
                      options: { action: "channelId" },
                    },
                    rating: { field: ["parentalLevel", "rating"] },
                    genres: {
                      fields: ["genre", "genres"],
                      transform: "utils",
                      options: {
                        actions: ["prepareGenres", "arraySlice", "arrayJoin"],
                        arraySlice: { limit: 2 },
                        arrayJoin: { join: ", " },
                      },
                    },
                    genreList: {
                      fields: ["genre", "genres"],
                      transforms: ["utils", "asset"],
                      options: {
                        utils: { action: "prepareGenres" },
                        asset: { action: "genre", limit: 3 },
                      },
                    },
                    isLive: {
                      fields: ["startDateTime", "endDateTime"],
                      transform: "stripe",
                      options: { action: "isLive" },
                    },
                    isPast: {
                      field: "endDateTime",
                      transform: "epg",
                      options: { action: "past" },
                    },
                    duration: { default: 0, field: "duration" },
                    "duration-text": {
                      default: 0,
                      field: "duration",
                      transform: "epg",
                      options: { action: "duration" },
                    },
                    image: {
                      field: ["images", "image"],
                      transform: "image-url",
                      options: {
                        ext: "png",
                        usage: "S_DESC",
                        orientation: "schedule",
                      },
                    },
                    width: {
                      default: 1,
                      field: "duration",
                      transform: "epg",
                      options: { action: "width" },
                    },
                    fallbackStream: {
                      default: {},
                      field: ["playbackResources", "resource"],
                      transform: "asset",
                      options: { action: "fallbackStream" },
                    },
                    restricted: {
                      default: !1,
                      field: ["parentalLevel", "restricted"],
                      transform: "parental",
                      options: { action: "restricted" },
                    },
                    pageId: {
                      default: "asset",
                      transform: "stripe",
                      options: { action: "pageId" },
                    },
                    paramsType: {
                      default: "",
                      field: "contentType",
                      transform: "stripe",
                      options: { action: "paramsType" },
                    },
                    linkId: {
                      field: "contentId",
                      transform: "stripe",
                      options: { action: "linkId" },
                    },
                    subtitle: {
                      fields: [
                        "number",
                        "episodeNumber",
                        "seasonNumber",
                        "episodeTitle",
                      ],
                      transform: "epg",
                      options: { action: "subtitle" },
                    },
                    subtitleList: {
                      default: [],
                      fields: [
                        "number",
                        "episodeNumber",
                        "seasonNumber",
                        "episodeTitle",
                      ],
                      transform: "asset",
                      options: { action: "subtitleList" },
                    },
                    restartTV: { default: null, field: "restartTV" },
                    catchupTV: { default: null, field: "catchupTv" },
                    channelLogo: {
                      field: ["TV_CHANNEL", "images", "image"],
                      transform: "image-url",
                      options: { orientation: "channel-asset", ext: "png" },
                    },
                  },
                },
                account: {
                  provider: "edge",
                  url: "v1/account",
                  method: "GET",
                  reply: {
                    error: {
                      event: "FORM_ERROR",
                      status: {
                        401: { event: "UNAUTHORIZE" },
                        403: { event: "UNAUTHORIZE" },
                      },
                      data: "error-server",
                    },
                    success: {
                      content: !0,
                      response: {
                        user: {
                          default: {},
                          content: !0,
                          transform: "customer",
                          options: { action: "selectAccount", key: "user" },
                        },
                        users: {
                          default: [],
                          content: !0,
                          transform: "storage",
                          options: { action: "set", key: "users" },
                        },
                      },
                    },
                  },
                },
                autologin: {
                  collectionId: "session",
                  api: {
                    collectionId: "customer",
                    api: {
                      collectionId: "cache-token",
                      api: {
                        collectionId: "account",
                        api: {
                          collectionId: "maui-config",
                          api: {
                            collectionId: "channels-count",
                            api: {
                              collectionId: "favorites",
                              api: { collectionId: "multirights" },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                "cache-token": {
                  provider: "edge",
                  url: "login/cache/token",
                  method: "GET",
                  reply: {
                    error: { event: "FORM_ERROR", data: "error-server" },
                    success: {
                      response: {
                        token: {
                          field: ["token", "uuid"],
                          transform: "storage",
                          options: { action: "set", key: "cache-token" },
                        },
                      },
                    },
                  },
                },
                "channels-count": {
                  provider: "edge",
                  url: "user/channels/count",
                  method: "GET",
                  reply: {
                    error: { event: "FORM_ERROR", data: "error-server" },
                  },
                },
                credentials: {
                  provider: "edge",
                  url: "v1/provision/credentials",
                  method: "POST",
                  params: {
                    username: { default: "" },
                    password: { default: "" },
                    remember: {
                      default: "",
                      transform: "storage",
                      options: { action: "set", key: "remember" },
                    },
                    type: { default: "accountid" },
                    deviceInfo: {
                      default: {},
                      transform: "storage",
                      options: { action: "get", key: ["device", "deviceInfo"] },
                    },
                    identifier: {
                      default: "",
                      transform: "storage",
                      options: { action: "get", key: ["device", "identifier"] },
                    },
                  },
                  reply: {
                    error: {
                      event: "FORM_ERROR",
                      status: {
                        400: {
                          response: {
                            error: {
                              default: "error-server",
                              field: "errorCode",
                              transform: "utils",
                              options: {
                                0: "error-device",
                                1: "error-device",
                                2: "error-device",
                                3: "error-account",
                                4: "error-account",
                                5: "error-account",
                                6: "error-account",
                                7: "error-account",
                                8: "error-device-max",
                                10: "error-customer",
                                action: "error",
                              },
                            },
                          },
                        },
                        401: { data: "error-credentials" },
                        403: {
                          response: {
                            error: {
                              default: "error-server",
                              field: ["MinervaError", "code"],
                              transform: "utils",
                              options: {
                                action: "error",
                                "0004-1112": "error-location",
                              },
                            },
                          },
                        },
                        404: {
                          response: {
                            error: {
                              default: "error-server",
                              field: "errorCode",
                              transform: "utils",
                              options: {
                                0: "error-device",
                                1: "error-device",
                                2: "error-device",
                                3: "error-account",
                                4: "error-account",
                                5: "error-account",
                                6: "error-account",
                                7: "error-account",
                                8: "error-device-max",
                                10: "error-customer",
                                action: "error",
                              },
                            },
                          },
                        },
                        457: { data: "error-connection" },
                        458: { data: "error-account2" },
                        459: { data: "error-account2" },
                        460: { data: "error-account3" },
                        504: { data: "error-server" },
                      },
                      data: "error-server",
                    },
                    success: {
                      response: {
                        deviceToken: {
                          default: "",
                          field: "deviceToken",
                          transform: "storage",
                          options: { action: "set", key: "deviceToken" },
                        },
                        deviceId: {
                          default: "",
                          field: "deviceId",
                          transform: "storage",
                          options: { action: "set", key: "deviceId" },
                        },
                        accountId: {
                          default: "",
                          field: "accountId",
                          transform: "storage",
                          options: { action: "set", key: "accountId" },
                        },
                      },
                    },
                  },
                },
                customer: {
                  provider: "edge",
                  url: "v1/customer",
                  method: "GET",
                  reply: {
                    error: {
                      event: "FORM_ERROR",
                      status: {
                        401: { event: "UNAUTHORIZE" },
                        403: { event: "UNAUTHORIZE" },
                      },
                      data: "error-server",
                    },
                    success: {
                      response: {
                        customer: {
                          default: {},
                          content: !0,
                          transform: "customer",
                          options: { action: "store", key: "customer" },
                        },
                        "mn-customer": {
                          field: "mn-customer",
                          header: !0,
                          transform: "storage",
                          options: { action: "set", key: "mn-customer" },
                        },
                        "mn-packages": {
                          field: "mn-packages",
                          header: !0,
                          transform: "storage",
                          options: { action: "set", key: "mn-packages" },
                        },
                        "mn-services": {
                          field: "mn-services",
                          header: !0,
                          transform: "storage",
                          options: { action: "set", key: "mn-services" },
                        },
                      },
                    },
                  },
                },
                favorite: {
                  provider: "edge",
                  url: "user/favorites/labels/",
                  method: "GET",
                  transform: "utils",
                  options: { action: "urlAppend" },
                  contentPath: ["contents", "favoriteContent"],
                },
                favorites: {
                  provider: "edge",
                  url: "user/favorites/labels",
                  method: "GET",
                  contentPath: ["favorite"],
                  response: {
                    channels: {
                      default: [],
                      field: "label",
                      transform: "favorites",
                      options: { action: "channels" },
                    },
                    vodsId: {
                      default: 0,
                      field: "label",
                      transform: "favorites",
                      options: { action: "id", key: "vods" },
                    },
                    vodsCount: {
                      default: 0,
                      transform: "favorites",
                      options: { action: "dataCount" },
                      api: {
                        collectionId: "favorite",
                        options: { id: { source: "parsed", key: "vodsId" } },
                      },
                    },
                    programsId: {
                      default: 0,
                      field: "label",
                      transform: "favorites",
                      options: { action: "id", key: "programs" },
                    },
                    programsCount: {
                      default: 0,
                      transform: "favorites",
                      options: { action: "dataCount" },
                      api: {
                        collectionId: "favorite",
                        options: {
                          id: { source: "parsed", key: "programsId" },
                        },
                      },
                    },
                    seriesId: {
                      default: 0,
                      field: "label",
                      transform: "favorites",
                      options: { action: "id", key: "series" },
                    },
                    seriesCount: {
                      default: 0,
                      transform: "favorites",
                      options: { action: "dataCount" },
                      api: {
                        collectionId: "favorite",
                        options: { id: { source: "parsed", key: "seriesId" } },
                      },
                    },
                  },
                },
                "login-oauth": {
                  method: "POST",
                  collectionId: "oauth",
                  api: { collectionId: "autologin" },
                },
                login: {
                  method: "POST",
                  collectionId: "credentials",
                  api: { collectionId: "autologin" },
                },
                "maui-config": {
                  provider: "cache",
                  url: "config/stripes/UUID/nav_panel_all/0",
                  method: "GET",
                  transform: "utils",
                  params: {
                    deviceType: {
                      default: "web client",
                      transform: "storageFIXME",
                      options: {
                        action: "get",
                        key: ["device", "deviceInfo", "deviceType"],
                      },
                    },
                    regionId: {
                      default: "",
                      transform: "storage",
                      options: {
                        action: "get",
                        key: ["customer", "localizationInfo", "id"],
                      },
                    },
                    timestamp: {
                      default: "",
                      transform: "utils",
                      options: { action: "timestamp" },
                    },
                  },
                  options: {
                    timeout: 3e3,
                    action: "dataReplace",
                    search: "UUID",
                    source: "storage",
                    key: "cache-token",
                  },
                  contentPath: ["content", "navPanel"],
                  reply: {
                    error: {
                      event: "PRELOAD_READY",
                      status: { 406: { event: "UNAUTHORIZE" } },
                      passThrough: !0,
                    },
                    success: {
                      event: "PRELOAD_READY",
                      passThrough: !0,
                      response: {
                        navbar: {
                          field: "navItems",
                          transforms: ["maui-config", "storage"],
                          options: {
                            "maui-config": { action: "navbar" },
                            storage: { action: "set", key: "navbar" },
                          },
                        },
                        locales: {
                          field: "navItems",
                          transforms: ["maui-config", "storage"],
                          options: {
                            "maui-config": { action: "locales" },
                            storage: { action: "set", key: "locales" },
                          },
                        },
                        stripes: {
                          field: "navItems",
                          transforms: ["maui-config", "storage"],
                          options: {
                            "maui-config": { action: "stripes" },
                            storage: { action: "set", key: "stripes" },
                          },
                        },
                      },
                    },
                  },
                },
                multirights: {
                  provider: "multirights",
                  url: "multirights/devices",
                  method: "POST",
                  reply: {
                    error: { event: "LOGIN_SUCCESS" },
                    success: {
                      event: "LOGIN_SUCCESS",
                      response: {
                        vuid: {
                          default: "",
                          field: ["device"],
                          transform: "utils",
                          options: { action: "updateDevice" },
                        },
                        streamRules: {
                          default: "",
                          field: ["device"],
                          transform: "utils",
                          options: { action: "updateStreamRules" },
                        },
                      },
                    },
                  },
                },
                oauth: {
                  provider: "edge",
                  url: "v1/provision/token/oauth/",
                  method: "POST",
                  params: {
                    deviceInfo: {
                      default: {},
                      transform: "storage",
                      options: {
                        type: "cookie",
                        action: "get",
                        key: ["device", "deviceInfo"],
                      },
                    },
                    identifier: {
                      default: "",
                      transform: "storage",
                      options: {
                        type: "cookie",
                        action: "get",
                        key: ["device", "identifier"],
                      },
                    },
                    token: { default: "" },
                  },
                  reply: {
                    error: {
                      event: "FORM_ERROR",
                      status: {
                        400: {
                          response: {
                            error: {
                              default: "error-server",
                              field: "errorCode",
                              transform: "utils",
                              options: {
                                0: "error-device",
                                1: "error-device",
                                2: "error-device",
                                3: "error-account",
                                4: "error-account",
                                5: "error-account",
                                6: "error-account",
                                7: "error-account",
                                8: "error-device-max",
                                10: "error-customer",
                                action: "error",
                              },
                            },
                          },
                        },
                        401: { data: "error-credentials" },
                        403: {
                          response: {
                            error: {
                              default: "error-server",
                              field: ["MinervaError", "code"],
                              transform: "utils",
                              options: {
                                action: "error",
                                "0004-1112": "error-location",
                              },
                            },
                          },
                        },
                        404: {
                          response: {
                            error: {
                              default: "error-server",
                              field: "errorCode",
                              transform: "utils",
                              options: {
                                0: "error-device",
                                1: "error-device",
                                2: "error-device",
                                3: "error-account",
                                4: "error-account",
                                5: "error-account",
                                6: "error-account",
                                7: "error-account",
                                8: "error-device-max",
                                10: "error-customer",
                                action: "error",
                              },
                            },
                          },
                        },
                        457: { data: "error-connection" },
                        458: { data: "error-account2" },
                        459: { data: "error-account2" },
                        460: { data: "error-account3" },
                        500: { data: "error-server" },
                        504: { data: "error-server" },
                      },
                      data: "error-server",
                    },
                    success: {
                      response: {
                        deviceToken: {
                          default: "",
                          field: "deviceToken",
                          transform: "storage",
                          options: {
                            type: "cookie",
                            action: "set",
                            key: "deviceToken",
                          },
                        },
                        deviceId: {
                          default: "",
                          field: "deviceId",
                          transform: "storage",
                          options: {
                            type: "cookie",
                            action: "set",
                            key: "deviceId",
                          },
                        },
                        accountId: {
                          default: "",
                          field: "accountId",
                          transform: "storage",
                          options: {
                            type: "cookie",
                            action: "set",
                            key: "accountId",
                          },
                        },
                      },
                    },
                  },
                },
                preload: {
                  collectionId: "customer",
                  options: { private: !0 },
                  api: {
                    collectionId: "account",
                    api: {
                      collectionId: "channels-count",
                      api: {
                        collectionId: "favorites",
                        api: { collectionId: "maui-config" },
                      },
                    },
                  },
                },
                session: {
                  provider: "edge",
                  url: "v1/session/",
                  method: "POST",
                  transform: "utils",
                  options: {
                    action: "urlAppend",
                    source: "storage",
                    key: "accountId",
                  },
                  params: {
                    deviceInfo: {
                      default: {},
                      transform: "storage",
                      options: { action: "get", key: ["device", "deviceInfo"] },
                    },
                    deviceToken: {
                      default: "",
                      transform: "storage",
                      options: { action: "get", key: "deviceToken" },
                    },
                  },
                  reply: {
                    error: {
                      event: "FORM_ERROR",
                      status: {
                        403: {
                          response: {
                            error: {
                              default: "error-server",
                              field: ["MinervaError", "code"],
                              transform: "utils",
                              options: {
                                action: "error",
                                "0002-1103": "error-device",
                                "0003-1111": "error-customer",
                                "0003-1113": "error-customer",
                                "0004-1112": "error-location",
                              },
                            },
                          },
                        },
                      },
                      data: "error-server",
                    },
                    success: {
                      event: "SESSION_READY",
                      passThrough: !0,
                      response: {
                        reverseEPG: {
                          default: 1,
                          field: ["serverData", "reverseEpg"],
                          transform: "storage",
                          options: { action: "set", key: "reverseEPG" },
                        },
                        futureEPG: {
                          default: 1,
                          field: ["serverData", "futureEpg"],
                          transform: "storage",
                          options: { action: "set", key: "futureEPG" },
                        },
                        playReportTimeInterval: {
                          default: 120,
                          field: ["serverData", "playReportTimeInterval"],
                          transform: "storage",
                          options: {
                            action: "set",
                            key: "playReportTimeInterval",
                          },
                        },
                        providers: {
                          field: "endPoints",
                          transforms: ["utils", "storage"],
                          options: {
                            utils: { action: "providers" },
                            storage: { action: "set", key: "providers" },
                          },
                        },
                        "auth-token": {
                          field: "authorization",
                          header: !0,
                          transforms: ["storage", "utils"],
                          options: {
                            storage: { action: "set", key: "auth-token" },
                            utils: { actions: ["login", "decodeToken"] },
                          },
                        },
                        vuid: {
                          field: "deviceInfo",
                          transform: "utils",
                          options: { action: "updateDevice" },
                        },
                      },
                    },
                  },
                },
                tpapp: {
                  provider: "cache",
                  url: "config/extapps/UUID",
                  method: "GET",
                  transform: "utils",
                  options: {
                    timeout: 3e3,
                    action: "dataReplace",
                    search: "UUID",
                    source: "storage",
                    key: "cache-token",
                  },
                  content: !0,
                  reply: {
                    error: { passThrough: !0 },
                    success: {
                      passThrough: !0,
                      response: { apps: { field: "apps", transform: "tpapp" } },
                    },
                  },
                },
                "prm-access-error": {
                  provider: "prm",
                  url: "",
                  method: "POST",
                  params: {
                    sessionId: {
                      default: "",
                      transform: "storage",
                      options: { action: "get", key: "serviceSessionId" },
                    },
                    prmUrl: { default: "" },
                    errorInfo: { default: {} },
                  },
                  response: {},
                  reply: {
                    success: {
                      response: {
                        prmHosts: {
                          default: "",
                          field: "prmHosts",
                          transform: "storage",
                          options: { action: "set", key: "prmHosts" },
                        },
                      },
                    },
                  },
                },
                "prm-concurrency": {
                  provider: "prm",
                  url: "",
                  method: "POST",
                  options: { timeout: 1e4 },
                  params: {
                    sessionId: {
                      default: "",
                      transform: "storage",
                      options: { action: "get", key: "serviceSessionId" },
                    },
                    playbackSessionId: {
                      default: "",
                      transform: "storage",
                      options: { action: "get", key: "playbackSessionId" },
                    },
                    playbackSessionToken: {
                      default: "",
                      transform: "storage",
                      options: { action: "get", key: "playbackSessionToken" },
                    },
                    playbackResourceId: { default: null },
                    status: { default: null },
                    drmId: { default: null },
                  },
                  response: {},
                  reply: {
                    error: {
                      event: "PRM_CONCURRENCY_ERROR",
                      response: { content: !0 },
                    },
                    success: {
                      event: "PRM_CONCURRENCY_SUCCESS",
                      response: {
                        playbackSessionId: {
                          default: "",
                          field: "playbackSessionId",
                          transform: "storage",
                          options: { action: "set", key: "playbackSessionId" },
                        },
                        playbackSessionToken: {
                          default: "",
                          field: "playbackSessionToken",
                          transform: "storage",
                          options: {
                            action: "set",
                            key: "playbackSessionToken",
                          },
                        },
                        responseURL: { field: ["xhr", "responseURL"] },
                      },
                    },
                  },
                },
                "prm-content": {
                  provider: "prm",
                  url: "",
                  method: "GET",
                  params: {
                    deviceInfoToken: { default: null },
                    serviceSessionId: { default: null },
                    contentId: { default: null },
                  },
                  contentPath: ["playback_resources", "0"],
                  response: {
                    prmId: { field: "contentId" },
                    url: { default: "", field: "contentUrl" },
                    protocol: { default: "", field: "protocol" },
                    encrypted: { default: "none", field: "encryption" },
                    cacheDuration: { default: !1, field: "cacheDuration" },
                    playbackResourceId: {
                      default: !1,
                      field: "playbackResourceId",
                    },
                    playbackResourceToken: {
                      default: !1,
                      field: "playbackResourceToken",
                    },
                    concurrency: { default: !1, field: "concurrency" },
                    skipConcurrencyOnError: {
                      default: !1,
                      field: "skipConcurrencyOnError",
                    },
                    padIn: { default: !1, field: "padIn" },
                    padOut: { default: !1, field: "padOut" },
                    errorCode: { default: !1, field: "errorCode" },
                    allowed: {
                      default: !1,
                      transform: "prm",
                      options: { action: "allowed" },
                    },
                    failed: {
                      default: !1,
                      transform: "prm",
                      options: { action: "compatible" },
                    },
                    isError: {
                      default: !1,
                      transform: "prm",
                      options: { action: "isError" },
                    },
                  },
                  reply: {
                    error: {
                      event: "PRM_SOURCE_ERROR",
                      status: {
                        403: { event: "PRM_SESSION_ERROR" },
                        480: { event: "PRM_SESSION_TOKEN_SOURCE_ERROR" },
                      },
                      response: { content: !0 },
                    },
                  },
                },
                "prm-register-retry": {
                  collectionId: "customer",
                  api: { collectionId: "prm-register" },
                },
                "prm-register": {
                  provider: "prm",
                  url: !1,
                  transform: "prm",
                  options: { action: "registerEndpoint" },
                  method: "POST",
                  params: {
                    default: {},
                    transform: "storage",
                    options: { action: "get", key: ["device", "deviceInfo"] },
                  },
                  reply: {
                    success: {
                      event: "PRM_REGISTERED",
                      response: {
                        setStatus: {
                          default: "",
                          transform: "prm",
                          options: { action: "setStatus" },
                        },
                        deviceInfoToken: {
                          default: "",
                          field: "deviceInfoToken",
                          transform: "storage",
                          options: { action: "set", key: "deviceInfoToken" },
                        },
                        serviceSessionId: {
                          default: "",
                          field: "serviceSessionId",
                          transform: "storage",
                          options: { action: "set", key: "serviceSessionId" },
                        },
                        prmHosts: {
                          default: "",
                          field: "prmHosts",
                          transform: "storage",
                          options: { action: "set", key: "prmHosts" },
                        },
                        "mn-prm-session": {
                          default: "",
                          field: "mn-prm-session",
                          header: !0,
                          transform: "storage",
                          options: { action: "set", key: "mn-prm-session" },
                        },
                      },
                    },
                    error: {
                      event: "PRM_SESSION_ERROR",
                      status: {
                        400: { event: "PRM_REGISTER_ERROR" },
                        480: { event: "PRM_SESSION_TOKEN_ERROR" },
                        1e3: { event: "PRM_NOT_CONFIGURED" },
                      },
                      passThrough: !0,
                    },
                  },
                },
                "playback-asset": {
                  provider: "edge",
                  url: "content/item/",
                  transform: "asset",
                  options: { action: "url" },
                  method: "GET",
                  contentPath: ["content"],
                  cache: { time: 6e4 },
                  response: {
                    id: { field: "contentId" },
                    channelId: { field: "channelId" },
                    resourceId: { field: "resourceId" },
                    contentType: { field: "contentType" },
                    number: { field: "number" },
                    endDateTime: { field: "endDateTime" },
                    seasonId: { field: "seasonId" },
                    seriesId: { field: "seriesId" },
                    programId: !0,
                    purchaseProofToken: { field: "purchaseProofToken" },
                    prmId: { transform: "prm", options: { action: "prmId" } },
                    title: {
                      default: "",
                      fields: ["title", "releasedYear"],
                      transform: "asset",
                      options: { action: "title" },
                    },
                    playbackTitle: {
                      default: "",
                      fields: ["title", "releasedYear"],
                      transform: "asset",
                      options: { action: "title" },
                    },
                    "series-title": { default: "", field: "title" },
                    genreList: {
                      fields: ["genre", "genres"],
                      transforms: ["utils", "asset"],
                      options: {
                        utils: { action: "prepareGenres" },
                        asset: { action: "genre", limit: 3 },
                      },
                    },
                    subtitleList: {
                      default: [],
                      fields: [
                        "number",
                        "episodeNumber",
                        "seasonNumber",
                        "episodeTitle",
                      ],
                      transform: "asset",
                      options: { action: "subtitleList" },
                    },
                    description: { default: "", field: "description" },
                    duration: {
                      default: 0,
                      fields: ["duration", "runtime"],
                      transform: "asset",
                      options: { action: "duration" },
                    },
                    airtime: {
                      field: "startDateTime",
                      transform: "asset",
                      options: { action: "airtime" },
                    },
                    isLive: {
                      fields: ["startDateTime", "endDateTime"],
                      transform: "stripe",
                      options: { action: "isLive" },
                    },
                    progress: {
                      default: 0,
                      fields: [
                        "startDateTime",
                        "endDateTime",
                        "bookmarkPosition",
                        "duration",
                        "runtime",
                        "isWatched",
                      ],
                      transform: "asset",
                      options: { action: "progress" },
                    },
                    start: { field: "startDateTime" },
                    progressTime: {
                      default: 0,
                      field: "bookmarkPos",
                      transform: "asset",
                      options: { action: "progressTime" },
                    },
                    rating: { default: "", field: ["parentalLevel", "rating"] },
                    restricted: {
                      default: !1,
                      field: ["parentalLevel", "restricted"],
                      transform: "parental",
                      options: { action: "restricted" },
                    },
                    hd: { default: !1, field: "hd" },
                    cc: { default: !1, field: "closedCaptioning" },
                    episodic: {
                      default: !1,
                      field: "seriesId",
                      transform: "asset",
                      options: { action: "episodic" },
                    },
                    fallbackStream: {
                      default: { empty: !0 },
                      field: ["playbackResources", "resource"],
                      transform: "asset",
                      options: { action: "fallbackStream" },
                    },
                    uri: { default: null, field: ["uri"] },
                    restartTV: { default: null, field: "restartTV" },
                    catchupTV: {
                      default: !1,
                      fields: ["endDateTime", "catchupTV"],
                      transform: "asset",
                      options: { action: "playable" },
                    },
                    channelNumber: {
                      field: ["TV_CHANNEL", "number"],
                      transform: "asset",
                      options: { action: "channelNumber" },
                    },
                    logo: {
                      field: ["images", "image"],
                      transform: "image-url",
                      options: { orientation: "channel-asset", ext: "png" },
                    },
                    channelLogo: {
                      field: ["TV_CHANNEL", "images", "image"],
                      transform: "image-url",
                      options: { orientation: "channel-asset", ext: "png" },
                    },
                    callSign: { field: ["TV_CHANNEL", "callSign"] },
                  },
                },
                "dynamic-stripes": {
                  provider: "edge",
                  url: "content/list/dynamic_root_vod/1",
                  method: "GET",
                },
                episodes: {
                  provider: "edge",
                  url: "content/list/vod_season/",
                  method: "GET",
                  contentPath: ["contents", "content"],
                  transform: "utils",
                  tags: ["parental"],
                  options: { action: "urlAppend" },
                  params: {
                    page: { default: 0 },
                    size: { default: 10 },
                    restricted: {
                      default: !0,
                      transform: "parental",
                      options: { action: "locked" },
                    },
                  },
                  response: {
                    id: { field: "contentId" },
                    type: { default: "page" },
                    contentType: !0,
                    pageId: {
                      default: "asset",
                      transform: "stripe",
                      options: { action: "pageId" },
                    },
                    paramsType: {
                      default: "",
                      field: "contentType",
                      transform: "stripe",
                      options: { action: "paramsType" },
                    },
                    linkId: {
                      field: "contentId",
                      transform: "stripe",
                      options: { action: "linkId" },
                    },
                    title: {
                      default: "",
                      fields: ["episodeTitle", "title"],
                      transform: "asset",
                      options: { action: "episode" },
                    },
                    description: { default: "", field: "description" },
                    duration: {
                      default: 0,
                      fields: ["duration", "runtime"],
                      transform: "asset",
                      options: { action: "duration" },
                    },
                    "episode-number": { default: "", field: "episodeNumber" },
                    rating: { default: "", field: ["parentalLevel", "rating"] },
                    restricted: {
                      default: !1,
                      field: ["parentalLevel", "restricted"],
                      transform: "parental",
                      options: { action: "restricted" },
                    },
                    page: { default: "asset", field: "page" },
                    image: {
                      field: ["images", "image"],
                      transform: "image-url",
                      options: { orientation: "episode" },
                    },
                    progress: {
                      default: 0,
                      fields: [
                        "startDateTime",
                        "endDateTime",
                        "bookmarkPosition",
                        "duration",
                        "runtime",
                        "isWatched",
                      ],
                      transform: "asset",
                      options: { action: "progress" },
                    },
                    scheduleId: {
                      fields: ["channelId", "startDateTime"],
                      transform: "season",
                      options: { action: "scheduleId" },
                    },
                  },
                  reply: {
                    error: { event: "EPISODES_READY" },
                    success: { event: "EPISODES_READY" },
                  },
                },
                sources: {
                  provider: "edge",
                  url: "",
                  method: "GET",
                  tags: ["parental"],
                  cache: { time: 6e5 },
                  contentPath: ["content", "sources", "source"],
                  transformContent: "sources",
                  response: {
                    id: { field: "contentId" },
                    contentType: !0,
                    type: { default: "page" },
                    linkId: {
                      field: "contentId",
                      transform: "stripe",
                      options: { action: "linkId" },
                    },
                    paramsType: {
                      default: "",
                      field: "contentType",
                      transform: "stripe",
                      options: { action: "paramsType" },
                    },
                    image: {
                      field: ["TV_CHANNEL", "images", "image"],
                      transform: "image-url",
                      options: {
                        channelLogo: !0,
                        orientation: "channel-asset",
                        ext: "png",
                      },
                    },
                    isLive: {
                      fields: ["startDateTime", "endDateTime"],
                      transform: "stripe",
                      options: { action: "isLive" },
                    },
                    title: {
                      field: "startDateTime",
                      transform: "stripe",
                      options: { action: "airDate" },
                    },
                    noImageTitle: {
                      default: "",
                      field: ["TV_CHANNEL", "callSign"],
                    },
                    subtitle: {
                      field: "startDateTime",
                      transform: "stripe",
                      options: { action: "airTime" },
                    },
                    progress: {
                      default: 0,
                      fields: ["startDateTime", "endDateTime"],
                      transform: "asset",
                      options: { action: "progress" },
                    },
                    progressBar: {
                      fields: ["contentType", "bookmarkPosition", "isWatched"],
                      transform: "stripe",
                      options: { action: "progressBar" },
                    },
                  },
                },
                stripe: {
                  provider: "edge",
                  url: "",
                  method: "GET",
                  tags: ["stripe", "parental"],
                  params: {
                    page: { default: 0 },
                    size: { default: 10 },
                    groupBy: { default: "series" },
                    contentType: { default: null },
                    contentID: { default: null },
                    searchText: { default: null },
                    restricted: {
                      default: !0,
                      transform: "parental",
                      options: { action: "locked" },
                    },
                    showAdultContent: {
                      default: !1,
                      transform: "parental",
                      options: { action: "adult" },
                    },
                  },
                  cache: { time: 6e5 },
                  contentPath: ["contents", "content"],
                  response: {
                    id: { field: "contentId" },
                    channelId: {
                      fields: [["TV_CHANNEL", "contentId"], ["channelId"]],
                      transform: "epg",
                      options: { action: "channelId" },
                    },
                    type: { default: "page" },
                    contentType: !0,
                    seriesId: !0,
                    isFuture: {
                      field: "startDateTime",
                      transform: "stripe",
                      options: { action: "isFuture" },
                    },
                    isLive: {
                      fields: ["startDateTime", "endDateTime"],
                      transform: "stripe",
                      options: { action: "isLive" },
                    },
                    catchupTv: { default: !1, field: "catchupTv" },
                    pageId: {
                      default: "asset",
                      transform: "stripe",
                      options: { action: "pageId" },
                    },
                    paramsType: {
                      default: "",
                      field: "contentType",
                      transform: "stripe",
                      options: { action: "paramsType" },
                    },
                    isStack: {
                      default: "",
                      field: "contentType",
                      transform: "stripe",
                      options: { action: "isStack" },
                    },
                    paramsSeason: {
                      default: "",
                      field: "contentId",
                      transform: "stripe",
                      options: { action: "paramsSeason" },
                    },
                    linkId: {
                      field: "contentId",
                      transform: "stripe",
                      options: { action: "linkId" },
                    },
                    number: {
                      field: "number",
                      transform: "stripe",
                      options: { action: "channel" },
                    },
                    title: { default: "", field: "title" },
                    description: {
                      fields: ["reducedDescription", "description"],
                      transform: "utils",
                      options: { action: "dataFallback" },
                    },
                    noImageTitle: {
                      fields: ["callSign", "title"],
                      transform: "utils",
                      options: { action: "dataFallback" },
                    },
                    image: {
                      field: ["images", "image"],
                      transform: "image-url",
                    },
                    releasedYear: {
                      field: "releasedYear",
                      transform: "stripe",
                      options: { action: "releasedYear" },
                    },
                    subtitle: {
                      fields: [
                        "number",
                        "episodeNumber",
                        "seasonNumber",
                        "episodeTitle",
                        "seriesId",
                      ],
                      transform: "stripe",
                      options: { action: "subtitle" },
                    },
                    genre: {
                      fields: ["genre", "genres"],
                      transform: "utils",
                      options: {
                        actions: ["prepareGenres", "arraySlice", "arrayJoin"],
                        arraySlice: { limit: 1 },
                        arrayJoin: { join: ", " },
                      },
                    },
                    progress: {
                      default: 0,
                      fields: [
                        "startDateTime",
                        "endDateTime",
                        "bookmarkPosition",
                        "duration",
                        "runtime",
                        "isWatched",
                      ],
                      transform: "asset",
                      options: { action: "progress" },
                    },
                    progressBar: {
                      fields: ["contentType", "bookmarkPosition", "isWatched"],
                      transform: "stripe",
                      options: { action: "progressBar" },
                    },
                  },
                },
                "super-hero": {
                  provider: "edge",
                  url: "",
                  method: "GET",
                  params: {
                    page: { default: 0 },
                    size: { default: 9 },
                    restricted: {
                      default: !0,
                      transform: "parental",
                      options: { action: "locked" },
                    },
                    showAdultContent: {
                      default: !1,
                      transform: "parental",
                      options: { action: "adult" },
                    },
                  },
                  tags: ["stripe", "parental"],
                  cache: { time: 6e5 },
                  options: {
                    visibleItems: 1,
                    initialItems: 9,
                    domItems: 9,
                    maxItems: 9,
                  },
                  contentPath: ["contents", "content"],
                  response: {
                    id: { field: "contentId" },
                    type: { default: "page" },
                    contentType: !0,
                    pageId: {
                      default: "asset",
                      transform: "stripe",
                      options: { action: "pageId" },
                    },
                    paramsType: {
                      default: "",
                      field: "contentType",
                      transform: "stripe",
                      options: { action: "paramsType" },
                    },
                    linkId: {
                      field: "contentId",
                      transform: "stripe",
                      options: { action: "linkId" },
                    },
                    title: {
                      default: "",
                      fields: ["title", "releasedYear"],
                      transform: "asset",
                      options: { action: "title" },
                    },
                    description: { default: "", field: "reducedDescription" },
                    image: {
                      field: ["images", "image"],
                      transform: "image-url",
                      options: {
                        orientation: "super-hero",
                        size: "normal",
                        tag: "HORIZONTALDEVICEWEB",
                      },
                    },
                    "image-phone": {
                      field: ["images", "image"],
                      transform: "image-url",
                      options: {
                        orientation: "super-hero",
                        size: "phone",
                        tag: "VERTICALDEVICEWEB",
                      },
                    },
                    duration: {
                      default: 0,
                      fields: ["duration", "runtime"],
                      transform: "asset",
                      options: { action: "duration" },
                    },
                    rating: { default: "", field: ["parentalLevel", "rating"] },
                    hd: { default: !1, field: "hd" },
                    cc: { default: !1, field: "closedCaptioning" },
                    icon: { default: "icon-about" },
                    more: { default: "more" },
                  },
                },
              },
              components: {
                "asset-button": {
                  element: "button",
                  layout: [["icon"], ["text-wrapper"]],
                  settings: {
                    "animation-delay": null,
                    "animation-duration": null,
                    text: "",
                    icon: null,
                    marquee: !1,
                  },
                  behavior: [
                    {
                      events: ["clickS"],
                      handlers: { buttons: { action: "episodes" } },
                    },
                  ],
                  content: {
                    icon: {
                      element: "i",
                      bindings: {
                        settings: {
                          icon: { default: [{ type: "class", action: "add" }] },
                        },
                      },
                    },
                    "text-wrapper": {
                      layout: [["text"]],
                      behavior: [
                        {
                          events: ["COMPONENT_READY"],
                          handlers: { asset: { action: "buttonMarquee" } },
                        },
                      ],
                      content: {
                        text: {
                          element: "span",
                          bindings: {
                            settings: {
                              animationDelay: {
                                default: [
                                  {
                                    type: "style",
                                    action: "add",
                                    style: "animationDelay",
                                  },
                                ],
                              },
                              animationDuration: {
                                default: [
                                  {
                                    type: "style",
                                    action: "add",
                                    style: "animationDuration",
                                  },
                                ],
                              },
                              text: {
                                default: [
                                  {
                                    type: "text",
                                    action: "set",
                                    translate: !0,
                                  },
                                ],
                              },
                              marquee: {
                                true: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "marquee",
                                  },
                                ],
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                asset: {
                  collectionId: "asset",
                  qa: "asset-container",
                  settings: {
                    "no-content": "no-content",
                    "duration-title": "duration-title",
                    subtitle: {
                      transform: "asset",
                      options: { action: "subtitle" },
                    },
                  },
                  behavior: [
                    {
                      events: ["COMPONENT_SET"],
                      handlers: { asset: { action: "set" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: { asset: { action: "ready" } },
                    },
                    {
                      events: ["BREAKPOINT_CHANGED"],
                      handlers: { asset: { action: "breakpoint" } },
                    },
                    {
                      events: ["PARENTAL_CHANGED"],
                      handlers: { asset: { action: "parentalChanged" } },
                    },
                  ],
                  bindings: {
                    current: {
                      "image-poster": {
                        default: [
                          { type: "class", action: "add", value: "poster" },
                        ],
                        null: [
                          { type: "class", action: "remove", value: "poster" },
                        ],
                      },
                      image: {
                        default: [
                          { type: "class", action: "remove", value: "poster" },
                        ],
                      },
                    },
                  },
                  layout: [["blur-img"], ["no-info"], ["info"], ["freeVod"]],
                  content: {
                    "blur-img": {
                      layout: [["blur"]],
                      content: {
                        blur: {
                          element: "img",
                          bindings: {
                            root: {
                              "image-phone-poster": {
                                default: [
                                  {
                                    type: "attribute",
                                    action: "set",
                                    attribute: "src",
                                  },
                                ],
                              },
                              restricted: {
                                true: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                        },
                      },
                    },
                    info: {
                      bindings: {
                        root: {
                          null: [
                            { type: "class", action: "add", value: "hidden" },
                          ],
                          restricted: {
                            true: [
                              { type: "class", action: "add", value: "hidden" },
                            ],
                          },
                        },
                      },
                      layout: [
                        ["asset-info-grid"],
                        ["other-sources"],
                        ["similar-titles"],
                      ],
                      content: {
                        "asset-info-grid": {
                          layout: [
                            ["asset-info-grid-left"],
                            ["asset-info-grid-right"],
                          ],
                          content: {
                            "asset-info-grid-left": {
                              layout: [
                                ["asset-bg"],
                                ["info-progress-bar"],
                                ["title"],
                                ["subtitle"],
                                ["buttons"],
                                ["description"],
                                ["channel-info"],
                              ],
                              content: {
                                "asset-bg": {
                                  behavior: [
                                    {
                                      events: ["COMPONENT_READY"],
                                      handlers: {
                                        image: {
                                          action: "breakpointSourceAndFallback",
                                          property: "image",
                                          "image-component": "image",
                                          "no-image-components": [
                                            "asset",
                                            "asset-bg",
                                            "asset-poster",
                                          ],
                                        },
                                      },
                                    },
                                  ],
                                  qa: "asset-background",
                                  bindings: {
                                    root: {
                                      image: {
                                        null: [
                                          {
                                            type: "class",
                                            action: "add",
                                            value: "hidden",
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  layout: [["image"]],
                                  content: {
                                    image: {
                                      layout: [["img"]],
                                      content: {
                                        img: {
                                          element: "img",
                                          behavior: [
                                            {
                                              events: ["BREAKPOINT_CHANGED"],
                                              handlers: {
                                                image: { action: "breakpoint" },
                                              },
                                            },
                                          ],
                                          bindings: {
                                            root: {
                                              image: {
                                                default: [
                                                  {
                                                    type: "attribute",
                                                    action: "set",
                                                    attribute: "src-default",
                                                  },
                                                ],
                                              },
                                              "image-phone": {
                                                default: [
                                                  {
                                                    type: "attribute",
                                                    action: "set",
                                                    attribute: "src-small",
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                                "info-progress-bar": {
                                  qa: "asset-progress-bar",
                                  bindings: {
                                    root: {
                                      progress: {
                                        null: [
                                          {
                                            type: "class",
                                            action: "add",
                                            value: "hidden",
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  layout: [["progress"]],
                                  content: {
                                    progress: {
                                      bindings: {
                                        root: {
                                          progress: {
                                            default: [
                                              {
                                                type: "style",
                                                action: "add",
                                                style: "width",
                                                unit: "%",
                                              },
                                            ],
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                                title: {
                                  qa: "asset-title",
                                  bindings: {
                                    root: {
                                      title: {
                                        default: [
                                          { type: "text", action: "set" },
                                        ],
                                      },
                                    },
                                  },
                                },
                                subtitle: {
                                  qa: "asset-subtitle",
                                  bindings: {
                                    settings: {
                                      subtitle: {
                                        null: [
                                          {
                                            type: "class",
                                            action: "add",
                                            value: "hidden",
                                          },
                                        ],
                                        default: [
                                          {
                                            type: "text",
                                            action: "set",
                                            translate: !1,
                                          },
                                        ],
                                      },
                                    },
                                  },
                                },
                                buttons: {
                                  layout: [
                                    ["resume"],
                                    ["play"],
                                    ["watch"],
                                    ["restart"],
                                    ["rent"],
                                    ["trailer"],
                                    ["episodes"],
                                  ],
                                  content: {
                                    resume: {
                                      qa: "asset-button-resume",
                                      component: "asset-button",
                                      behavior: [
                                        {
                                          events: ["click"],
                                          handlers: {
                                            buttons: {
                                              action: "playAsset",
                                              resume: !0,
                                            },
                                          },
                                        },
                                      ],
                                      bindings: {
                                        root: {
                                          bookmark: {
                                            default: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "btn",
                                              },
                                            ],
                                            null: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "hidden",
                                              },
                                            ],
                                          },
                                          "not-rented": {
                                            true: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "hidden",
                                              },
                                            ],
                                          },
                                        },
                                      },
                                      settings: {
                                        icon: "icon-resume",
                                        text: "resume",
                                      },
                                    },
                                    play: {
                                      qa: "asset-button-play",
                                      component: "asset-button",
                                      behavior: [
                                        {
                                          events: ["click"],
                                          handlers: {
                                            buttons: { action: "playAsset" },
                                          },
                                        },
                                      ],
                                      bindings: {
                                        root: {
                                          playable: {
                                            default: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "btn",
                                              },
                                            ],
                                            null: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "hidden",
                                              },
                                            ],
                                          },
                                          "not-rented": {
                                            true: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "hidden",
                                              },
                                            ],
                                          },
                                        },
                                      },
                                      settings: {
                                        icon: "icon-play",
                                        text: "play",
                                      },
                                    },
                                    watch: {
                                      qa: "asset-button-watch",
                                      component: "asset-button",
                                      behavior: [
                                        {
                                          events: ["click"],
                                          handlers: {
                                            buttons: { action: "watchAsset" },
                                          },
                                        },
                                      ],
                                      bindings: {
                                        root: {
                                          isLive: {
                                            default: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "btn",
                                              },
                                            ],
                                            null: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "hidden",
                                              },
                                            ],
                                          },
                                        },
                                      },
                                      settings: {
                                        icon: "icon-play",
                                        text: "watch",
                                      },
                                    },
                                    restart: {
                                      qa: "asset-button-restart",
                                      component: "asset-button",
                                      behavior: [
                                        {
                                          events: ["click"],
                                          handlers: {
                                            buttons: { action: "restartAsset" },
                                          },
                                        },
                                      ],
                                      bindings: {
                                        root: {
                                          restart: {
                                            default: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "btn",
                                              },
                                            ],
                                            null: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "hidden",
                                              },
                                            ],
                                          },
                                        },
                                      },
                                      settings: {
                                        icon: "icon-restart",
                                        text: "restart",
                                      },
                                    },
                                    rent: {
                                      qa: "asset-button-rent",
                                      component: "asset-button",
                                      behavior: [
                                        {
                                          events: ["click"],
                                          handlers: {
                                            purchase: { action: "open" },
                                          },
                                        },
                                      ],
                                      bindings: {
                                        root: {
                                          default: [
                                            {
                                              type: "class",
                                              action: "add",
                                              value: "btn",
                                            },
                                          ],
                                          "not-rented": {
                                            null: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "hidden",
                                              },
                                            ],
                                          },
                                        },
                                      },
                                      settings: { icon: "icon-rent" },
                                    },
                                    trailer: {
                                      qa: "asset-button-trailer",
                                      component: "asset-button",
                                      behavior: [
                                        {
                                          events: ["click"],
                                          handlers: {
                                            buttons: { action: "playTrailer" },
                                          },
                                        },
                                      ],
                                      bindings: {
                                        root: {
                                          default: [
                                            {
                                              type: "class",
                                              action: "add",
                                              value: "btn",
                                            },
                                          ],
                                          trailer: {
                                            null: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "hidden",
                                              },
                                            ],
                                          },
                                        },
                                      },
                                      settings: {
                                        icon: "icon-di-watch-trailer",
                                        text: "trailer",
                                      },
                                    },
                                    episodes: {
                                      qa: "asset-button-episodes",
                                      component: "asset-button",
                                      behavior: [
                                        {
                                          events: ["click"],
                                          handlers: {
                                            buttons: { action: "episodes" },
                                          },
                                        },
                                      ],
                                      bindings: {
                                        root: {
                                          episodic: {
                                            default: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "btn",
                                              },
                                            ],
                                            null: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "hidden",
                                              },
                                            ],
                                          },
                                        },
                                      },
                                      settings: {
                                        icon: "icon-di-show-episodes",
                                        text: "episodes",
                                      },
                                    },
                                  },
                                },
                                description: {
                                  qa: "asset-description",
                                  bindings: {
                                    root: {
                                      description: {
                                        default: [
                                          { type: "text", action: "set" },
                                        ],
                                      },
                                    },
                                  },
                                },
                                "channel-info": {
                                  bindings: {
                                    root: {
                                      "channel-call-sign": {
                                        null: [
                                          {
                                            type: "class",
                                            action: "add",
                                            value: "no-channel",
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  layout: [
                                    ["channel-logo"],
                                    ["info-container"],
                                    ["genre-stripe"],
                                    ["cast-stripe"],
                                    ["directors-stripe"],
                                  ],
                                  content: {
                                    "channel-logo": {
                                      behavior: [
                                        {
                                          events: ["COMPONENT_READY"],
                                          handlers: {
                                            image: {
                                              action: "fallback",
                                              property: "channel-logo",
                                              "image-component": "logo-image",
                                              "no-image-components": [
                                                "logo-no-image",
                                              ],
                                            },
                                          },
                                        },
                                      ],
                                      bindings: {
                                        root: {
                                          "channel-call-sign": {
                                            null: [
                                              {
                                                type: "class",
                                                action: "add",
                                                value: "hidden",
                                              },
                                            ],
                                          },
                                        },
                                      },
                                      layout: [
                                        ["logo-no-image"],
                                        ["logo-image"],
                                      ],
                                      content: {
                                        "logo-no-image": {
                                          qa: "asset-channel-call-sign",
                                          bindings: {
                                            root: {
                                              "channel-logo": {
                                                default: [
                                                  {
                                                    type: "class",
                                                    action: "add",
                                                    value: "hidden",
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                          layout: [["call-sign"]],
                                          content: {
                                            "call-sign": {
                                              bindings: {
                                                root: {
                                                  "channel-call-sign": {
                                                    default: [
                                                      {
                                                        type: "text",
                                                        action: "set",
                                                      },
                                                    ],
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                        "logo-image": {
                                          qa: "asset-channel-logo-image",
                                          bindings: {
                                            root: {
                                              "channel-logo": {
                                                null: [
                                                  {
                                                    type: "class",
                                                    action: "add",
                                                    value: "hidden",
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                          layout: [["img"]],
                                          content: {
                                            img: {
                                              element: "img",
                                              bindings: {
                                                root: {
                                                  "channel-logo": {
                                                    default: [
                                                      {
                                                        type: "attribute",
                                                        action: "set",
                                                        attribute: "src",
                                                      },
                                                    ],
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                    "info-container": {
                                      layout: [
                                        ["labels"],
                                        ["airtime"],
                                        ["time"],
                                      ],
                                      content: {
                                        labels: {
                                          layout: [["rating"], ["hd"], ["cc"]],
                                          content: {
                                            rating: {
                                              element: "label",
                                              qa: "asset-label-rating",
                                              bindings: {
                                                root: {
                                                  rating: {
                                                    null: [
                                                      {
                                                        type: "class",
                                                        action: "add",
                                                        value: "hidden",
                                                      },
                                                    ],
                                                    default: [
                                                      {
                                                        type: "text",
                                                        action: "set",
                                                      },
                                                    ],
                                                  },
                                                },
                                              },
                                            },
                                            hd: {
                                              element: "label",
                                              qa: "asset-label-hd",
                                              bindings: {
                                                root: {
                                                  hd: {
                                                    null: [
                                                      {
                                                        type: "class",
                                                        action: "add",
                                                        value: "hidden",
                                                      },
                                                    ],
                                                    default: [
                                                      {
                                                        type: "text",
                                                        action: "set",
                                                        value: "HD",
                                                      },
                                                    ],
                                                  },
                                                },
                                              },
                                            },
                                            cc: {
                                              element: "label",
                                              qa: "asset-label-cc",
                                              bindings: {
                                                root: {
                                                  cc: {
                                                    null: [
                                                      {
                                                        type: "class",
                                                        action: "add",
                                                        value: "hidden",
                                                      },
                                                    ],
                                                    default: [
                                                      {
                                                        type: "text",
                                                        action: "set",
                                                        value: "CC",
                                                      },
                                                    ],
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                        airtime: {
                                          qa: "asset-airtime",
                                          bindings: {
                                            root: {
                                              airtime: {
                                                null: [
                                                  {
                                                    type: "class",
                                                    action: "add",
                                                    value: "hidden",
                                                  },
                                                ],
                                                default: [
                                                  {
                                                    type: "text",
                                                    action: "set",
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                        },
                                        time: {
                                          qa: "asset-time",
                                          layout: [["title", "duration"]],
                                          bindings: {
                                            root: {
                                              duration: {
                                                0: [
                                                  {
                                                    type: "class",
                                                    action: "add",
                                                    value: "hidden",
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                          content: {
                                            title: {
                                              element: "h4",
                                              bindings: {
                                                settings: {
                                                  "duration-title": {
                                                    default: [
                                                      {
                                                        type: "text",
                                                        action: "set",
                                                        translate: !0,
                                                      },
                                                    ],
                                                    null: [
                                                      {
                                                        type: "class",
                                                        action: "add",
                                                        value: "hidden",
                                                      },
                                                    ],
                                                  },
                                                },
                                              },
                                            },
                                            duration: {
                                              bindings: {
                                                root: {
                                                  duration: {
                                                    default: [
                                                      {
                                                        type: "text",
                                                        action: "set",
                                                      },
                                                    ],
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                        "genre-stripe": {
                                          component: "simple-stripe",
                                        },
                                      },
                                    },
                                    "genre-stripe": {
                                      qa: "asset-genre-stripe",
                                      component: "simple-stripe",
                                    },
                                    "cast-stripe": {
                                      qa: "asset-cast-stripe",
                                      component: "simple-stripe",
                                    },
                                    "directors-stripe": {
                                      qa: "asset-directors-stripe",
                                      component: "simple-stripe",
                                    },
                                  },
                                },
                              },
                            },
                            "asset-info-grid-right": {
                              layout: [["asset-poster"]],
                              content: {
                                "asset-poster": {
                                  behavior: [
                                    {
                                      events: ["COMPONENT_READY"],
                                      handlers: {
                                        image: {
                                          action: "fallback",
                                          property: "image-poster",
                                          containerId: "poster-image",
                                          "no-image-components": [
                                            "asset",
                                            "poster-image",
                                          ],
                                        },
                                      },
                                    },
                                  ],
                                  bindings: {
                                    root: {
                                      image: {
                                        default: [
                                          {
                                            type: "class",
                                            action: "add",
                                            value: "hidden",
                                          },
                                        ],
                                        null: [
                                          {
                                            type: "class",
                                            action: "remove",
                                            value: "hidden",
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  layout: [["poster-image"]],
                                  content: {
                                    "poster-image": {
                                      layout: [["image"]],
                                      content: {
                                        image: {
                                          bindings: {
                                            root: {
                                              "image-poster": {
                                                null: [
                                                  {
                                                    type: "class",
                                                    action: "add",
                                                    value: "hidden",
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                          layout: [["img"]],
                                          content: {
                                            img: {
                                              element: "img",
                                              qa: "asset-poster",
                                              bindings: {
                                                root: {
                                                  "image-poster": {
                                                    default: [
                                                      {
                                                        type: "attribute",
                                                        action: "set",
                                                        attribute: "src",
                                                      },
                                                    ],
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                        "other-sources": {
                          qa: "asset-other-sources",
                          collectionId: "sources",
                          component: "stripe",
                        },
                        "similar-titles": {
                          qa: "asset-similar-titles",
                          component: "stripe",
                        },
                      },
                    },
                    freeVod: {
                      collectionId: "purchase",
                      behavior: [
                        {
                          events: ["PURCHASE_SUCCESS"],
                          handlers: { purchase: { action: "success" } },
                        },
                      ],
                    },
                  },
                },
                "empty-page": {
                  qa: "emptyPage",
                  bindings: {
                    settings: {
                      show: {
                        default: [
                          { type: "class", action: "add", value: "show" },
                          {
                            type: "text",
                            action: "set",
                            value: "noContent",
                            translate: !0,
                          },
                        ],
                      },
                    },
                  },
                },
                item: {
                  element: "a",
                  qa: "list-item",
                  behavior: [
                    {
                      events: ["click"],
                      handlers: { links: { action: "navigate" } },
                    },
                  ],
                  bindings: {
                    current: {
                      selected: {
                        default: [{ type: "class", action: "add" }],
                        null: [{ type: "class", action: "remove" }],
                      },
                      isVisible: {
                        null: [
                          { type: "class", action: "add", value: "hidden" },
                        ],
                        default: [
                          { type: "class", action: "remove", value: "hidden" },
                        ],
                      },
                      type: { parental: [{ type: "append", action: "small" }] },
                    },
                  },
                  layout: [["icon", "label"]],
                  content: {
                    icon: {
                      element: "i",
                      bindings: {
                        current: {
                          icon: { default: [{ type: "class", action: "add" }] },
                          svg: {
                            default: [
                              { type: "text", action: "set" },
                              { type: "class", action: "add", value: "svg" },
                            ],
                          },
                        },
                      },
                    },
                    label: {
                      element: "label",
                      bindings: {
                        current: {
                          label: {
                            default: [
                              { type: "text", action: "set", translate: !0 },
                            ],
                          },
                        },
                      },
                    },
                  },
                },
                list: {
                  collectionId: "simple",
                  bindings: {
                    current: {
                      null: [{ type: "class", action: "add", value: "hidden" }],
                    },
                  },
                  layout: [["items"]],
                  content: {
                    items: {
                      layout: [["&item"]],
                      content: {
                        item: {
                          bindings: {
                            current: {
                              null: [
                                { type: "text", action: "set", value: "" },
                              ],
                              label: {
                                default: [{ type: "text", action: "set" }],
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                "login-form": {
                  element: "form",
                  collectionId: "login",
                  settings: {
                    credentials: null,
                    ssoCognito: null,
                    ssoGeneric: null,
                    device: {
                      transform: "utils",
                      options: { action: "setDevice", key: "device" },
                    },
                    button: { default: "login", loading: "loading-short" },
                    "button-sso-cognito": { default: "login-cognito" },
                    "button-sso-generic": { default: "login-sso" },
                    error: {
                      default: null,
                      oauth: null,
                      "error-credentials": "error-credentials",
                      "error-customer": "error-customer",
                      "error-device": "error-device",
                      "error-device-max": "error-device-max",
                      "error-location": "error-location",
                      "error-account": "error-account",
                      "error-account2": "error-account2",
                      "error-account3": "error-account3",
                      "error-connection": "error-connection",
                      "error-server": "error-server",
                    },
                    validate: "novalidate",
                    username: "username",
                    password: "password",
                    checkbox: "checkbox",
                    remember: "remember",
                    loading: null,
                  },
                  behavior: [
                    {
                      events: ["COMPONENT_SET"],
                      handlers: {
                        form: {
                          action: "setLoginForm",
                          fields: ["username", "password"],
                        },
                      },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: { form: { action: "checkOauth" } },
                    },
                  ],
                  bindings: {
                    settings: {
                      device: { default: [] },
                      validate: {
                        default: [
                          {
                            type: "attribute",
                            action: "set",
                            attribute: "novalidate",
                          },
                          {
                            type: "attribute",
                            action: "set",
                            attribute: "onsubmit",
                            value: "return false;",
                          },
                        ],
                      },
                    },
                  },
                  layout: [
                    ["credentials"],
                    ["sso-cognito-btn"],
                    ["sso-generic-btn"],
                    ["error-field"],
                    ["login-btn"],
                    ["register"],
                  ],
                  content: {
                    credentials: {
                      bindings: {
                        settings: {
                          credentials: {
                            null: [
                              { type: "class", action: "add", value: "hidden" },
                            ],
                          },
                        },
                      },
                      layout: [["username"], ["password"], ["rememberme"]],
                      content: {
                        username: {
                          element: "input",
                          qa: "username",
                          behavior: [
                            {
                              events: ["change", "blur", "keyup"],
                              handlers: {
                                validate: { action: "required" },
                                form: { action: "setInput" },
                              },
                            },
                          ],
                          bindings: {
                            settings: {
                              username: {
                                default: [
                                  {
                                    type: "attribute",
                                    action: "set",
                                    attribute: "placeholder",
                                    translate: !0,
                                  },
                                  {
                                    type: "attribute",
                                    action: "set",
                                    attribute: "type",
                                    value: "text",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        password: {
                          element: "input",
                          qa: "password",
                          behavior: [
                            {
                              events: ["change", "blur", "keyup"],
                              handlers: {
                                validate: { action: "required" },
                                form: { action: "setInput" },
                              },
                            },
                          ],
                          bindings: {
                            settings: {
                              password: {
                                default: [
                                  {
                                    type: "attribute",
                                    action: "set",
                                    attribute: "placeholder",
                                    translate: !0,
                                  },
                                  {
                                    type: "attribute",
                                    action: "set",
                                    attribute: "type",
                                    value: "password",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        rememberme: {
                          layout: [["remember"], ["label"]],
                          content: {
                            remember: {
                              element: "input",
                              behavior: [
                                {
                                  events: ["change"],
                                  handlers: { form: { action: "setCheckbox" } },
                                },
                              ],
                              bindings: {
                                settings: {
                                  default: [
                                    {
                                      type: "attribute",
                                      action: "set",
                                      attribute: "type",
                                      value: "checkbox",
                                    },
                                    {
                                      type: "attribute",
                                      action: "set",
                                      attribute: "id",
                                      value: "remember",
                                    },
                                  ],
                                },
                              },
                            },
                            label: {
                              element: "label",
                              bindings: {
                                settings: {
                                  checkbox: {
                                    default: [
                                      {
                                        type: "text",
                                        action: "set",
                                        translate: !0,
                                      },
                                      {
                                        type: "attribute",
                                        action: "set",
                                        attribute: "for",
                                        value: "remember",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                    "error-field": {
                      qa: "error",
                      behavior: [
                        {
                          events: ["FORM_ERROR"],
                          handlers: { form: { action: "showError" } },
                        },
                        {
                          events: ["TIMEOUT"],
                          handlers: { form: { action: "hideError" } },
                        },
                      ],
                      bindings: {
                        settings: {
                          error: {
                            null: [
                              {
                                type: "class",
                                action: "add",
                                value: "invisible",
                              },
                              { type: "text", action: "set", value: "" },
                            ],
                            default: [
                              {
                                type: "class",
                                action: "remove",
                                value: "invisible",
                              },
                              { type: "text", action: "set", translate: !0 },
                            ],
                          },
                        },
                      },
                    },
                    "login-btn": {
                      element: "button",
                      qa: "login",
                      behavior: [
                        {
                          events: ["click", "OK"],
                          state: "default",
                          handlers: { form: { action: "send" } },
                        },
                      ],
                      bindings: {
                        settings: {
                          credentials: {
                            null: [
                              { type: "class", action: "add", value: "hidden" },
                            ],
                          },
                          button: {
                            default: [
                              { type: "class", action: "add", value: "btn" },
                              { type: "text", action: "set", translate: !0 },
                              {
                                type: "attribute",
                                action: "set",
                                attribute: "type",
                                value: "button",
                              },
                            ],
                            loading: [
                              {
                                type: "attribute",
                                action: "set",
                                attribute: "disabled",
                                value: "disabled",
                              },
                            ],
                          },
                        },
                      },
                    },
                    "sso-cognito-btn": {
                      element: "button",
                      qa: "login-cognito",
                      behavior: [
                        {
                          events: ["click", "OK"],
                          state: "default",
                          handlers: {
                            form: { action: "oauth", type: "cognito" },
                          },
                        },
                      ],
                      bindings: {
                        settings: {
                          ssoCognito: {
                            null: [
                              { type: "class", action: "add", value: "hidden" },
                            ],
                          },
                          "button-sso-cognito": {
                            default: [
                              { type: "class", action: "add", value: "btn" },
                              { type: "text", action: "set", translate: !0 },
                              {
                                type: "attribute",
                                action: "set",
                                attribute: "type",
                                value: "button",
                              },
                            ],
                          },
                        },
                      },
                    },
                    "sso-generic-btn": {
                      element: "button",
                      qa: "login-sso",
                      behavior: [
                        {
                          events: ["click", "OK"],
                          state: "default",
                          handlers: {
                            form: { action: "oauth", type: "generic" },
                          },
                        },
                      ],
                      bindings: {
                        settings: {
                          ssoGeneric: {
                            null: [
                              { type: "class", action: "add", value: "hidden" },
                            ],
                          },
                          "button-sso-generic": {
                            default: [
                              { type: "class", action: "add", value: "btn" },
                              { type: "text", action: "set", translate: !0 },
                              {
                                type: "attribute",
                                action: "set",
                                attribute: "type",
                                value: "button",
                              },
                            ],
                          },
                        },
                      },
                    },
                    register: {
                      bindings: {
                        settings: {
                          signupLink: {
                            null: [
                              { type: "class", action: "add", value: "hidden" },
                            ],
                          },
                        },
                      },
                      layout: [["noaccount"], ["signup"]],
                      content: {
                        noaccount: {
                          element: "span",
                          bindings: {
                            settings: {
                              noaccount: {
                                default: [
                                  {
                                    type: "text",
                                    action: "set",
                                    translate: !0,
                                  },
                                ],
                              },
                            },
                          },
                        },
                        signup: {
                          element: "a",
                          bindings: {
                            settings: {
                              signupLink: {
                                default: [
                                  {
                                    type: "attribute",
                                    action: "set",
                                    attribute: "href",
                                  },
                                ],
                              },
                              signup: {
                                default: [
                                  {
                                    type: "text",
                                    action: "set",
                                    translate: !0,
                                  },
                                  {
                                    type: "attribute",
                                    action: "set",
                                    attribute: "type",
                                    value: "button",
                                  },
                                ],
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                "no-info": {
                  qa: "noInfo",
                  bindings: {
                    root: {
                      null: [{ type: "class", action: "add", value: "show" }],
                      restricted: {
                        true: [{ type: "class", action: "add", value: "show" }],
                      },
                    },
                  },
                  layout: [["error-text"], ["restriction"]],
                  content: {
                    "error-text": {
                      bindings: {
                        root: {
                          null: [
                            {
                              type: "class",
                              action: "remove",
                              value: "hidden",
                            },
                          ],
                          restricted: {
                            true: [
                              { type: "class", action: "add", value: "hidden" },
                            ],
                          },
                        },
                        settings: {
                          "no-content": {
                            default: [
                              { type: "text", action: "set", translate: !0 },
                            ],
                          },
                        },
                      },
                    },
                    restriction: {
                      bindings: {
                        root: {
                          null: [
                            { type: "class", action: "add", value: "hidden" },
                          ],
                          restricted: {
                            true: [
                              {
                                type: "class",
                                action: "remove",
                                value: "hidden",
                              },
                            ],
                          },
                        },
                      },
                      layout: [["icon"], ["title"], ["info"], ["buttons"]],
                      content: {
                        icon: {
                          element: "i",
                          bindings: {
                            settings: {
                              "no-content": {
                                default: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "icon-locked-outline",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        title: {
                          bindings: {
                            settings: {
                              "no-content": {
                                default: [
                                  {
                                    type: "text",
                                    action: "set",
                                    translate: !0,
                                    value: "restrictedContent",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        info: {
                          bindings: {
                            settings: {
                              "no-content": {
                                default: [
                                  {
                                    type: "text",
                                    action: "set",
                                    translate: !0,
                                    value: "restricted-page",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        buttons: {
                          layout: [["home"], ["unlock"]],
                          content: {
                            home: {
                              element: "button",
                              behavior: [
                                {
                                  events: ["click"],
                                  handlers: { links: { action: "home" } },
                                },
                              ],
                              bindings: {
                                settings: {
                                  "no-content": {
                                    default: [
                                      {
                                        type: "class",
                                        action: "add",
                                        value: "btn",
                                      },
                                      {
                                        type: "text",
                                        action: "set",
                                        value: "home",
                                        translate: !0,
                                      },
                                      {
                                        type: "attribute",
                                        action: "set",
                                        attribute: "type",
                                        value: "button",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                            unlock: {
                              element: "button",
                              behavior: [
                                {
                                  events: ["click"],
                                  handlers: {
                                    parental: { action: "toggleParental" },
                                  },
                                },
                              ],
                              bindings: {
                                settings: {
                                  "no-content": {
                                    default: [
                                      {
                                        type: "class",
                                        action: "add",
                                        value: "btn",
                                      },
                                      {
                                        type: "text",
                                        action: "set",
                                        value: "unlock",
                                        translate: !0,
                                      },
                                      {
                                        type: "attribute",
                                        action: "set",
                                        attribute: "type",
                                        value: "button",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                page: {
                  collectionId: "analytics",
                  system: !0,
                  settings: { scrolls: !0 },
                  behavior: [
                    {
                      events: [
                        "COMPONENTS_READY",
                        "REFRESH_PAGE_SCROLL",
                        "PAGE_CHANGED",
                        "PAGE_READY",
                      ],
                      handlers: {
                        scroll: {
                          action: "setScroll",
                          scrollbars: !0,
                          vertical: !0,
                          page: !0,
                          disableMouse: !0,
                          disablePointer: !0,
                        },
                      },
                    },
                    {
                      events: ["SCROLL_END"],
                      handlers: { scroll: { action: "scrollEnd" } },
                    },
                    {
                      events: ["SCROLL_BEFORE_END"],
                      handlers: { component: { action: "stripePagination" } },
                    },
                    {
                      events: ["PAGE_TOGGLE_SCROLLS"],
                      handlers: { scroll: { action: "pageScrolls" } },
                    },
                    {
                      events: ["DOM_ORIENTATION_CHANGE"],
                      handlers: { scroll: { action: "orientationChanged" } },
                    },
                    {
                      events: [
                        "LOGIN_SUCCESS",
                        "LOGOUT",
                        "SEARCH_RESULT",
                        "ENTER_PAGE",
                        "EXIT_PAGE",
                        "TUNE_IN",
                        "TUNE_OUT",
                        "LIVE_TRICKPLAY",
                        "ASSET_TRICKPLAY",
                        "START_PLAYING",
                        "STOP_PLAYING",
                      ],
                      handlers: { analytics: { action: "add" } },
                    },
                    {
                      events: ["LAYOUT_CHANGED"],
                      handlers: { analytics: { action: "reset" } },
                    },
                    {
                      events: ["INTERVAL"],
                      handlers: { analytics: { action: "send" } },
                    },
                  ],
                  layout: [["scroll"]],
                  bindings: {
                    settings: {
                      scrolls: {
                        null: [
                          {
                            type: "class",
                            action: "add",
                            value: "scrolls-disable",
                          },
                        ],
                        default: [
                          {
                            type: "class",
                            action: "remove",
                            value: "scrolls-disable",
                          },
                        ],
                      },
                    },
                  },
                  content: { scroll: { content: !0 } },
                },
                series: {
                  collectionId: "series",
                  settings: { id: null, "no-content": "no-content" },
                  behavior: [
                    {
                      events: ["COMPONENT_SET"],
                      handlers: { series: { action: "prepare" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: { series: { action: "ready" } },
                    },
                    {
                      events: ["EPISODES_READY"],
                      handlers: { series: { action: "episodesReady" } },
                    },
                    {
                      events: ["PARENTAL_CHANGED"],
                      handlers: { series: { action: "parentalChanged" } },
                    },
                  ],
                  layout: [["info"], ["no-info"]],
                  content: {
                    info: {
                      bindings: {
                        root: {
                          null: [
                            { type: "class", action: "add", value: "hidden" },
                          ],
                          default: [
                            {
                              type: "class",
                              action: "remove",
                              value: "hidden",
                            },
                          ],
                          restricted: {
                            null: [
                              {
                                type: "class",
                                action: "remove",
                                value: "hidden",
                              },
                            ],
                            true: [
                              { type: "class", action: "add", value: "hidden" },
                            ],
                          },
                        },
                      },
                      layout: [["season"], ["seasons"], ["episodes"]],
                      content: {
                        season: {
                          bindings: {
                            parent: {
                              restricted: {
                                null: [
                                  {
                                    type: "class",
                                    action: "remove",
                                    value: "hidden",
                                  },
                                ],
                                true: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                          collectionId: "season",
                          behavior: [
                            {
                              events: ["COMPONENT_READY"],
                              handlers: { series: { action: "episodes" } },
                            },
                          ],
                          layout: [["image-bg"], ["title"]],
                          content: {
                            "image-bg": {
                              bindings: {
                                root: {
                                  image: {
                                    default: [
                                      {
                                        type: "class",
                                        action: "add",
                                        value: "blur",
                                      },
                                    ],
                                    null: [
                                      {
                                        type: "class",
                                        action: "add",
                                        value: "hidden",
                                      },
                                    ],
                                  },
                                },
                              },
                              layout: [["img"]],
                              content: {
                                img: {
                                  element: "img",
                                  bindings: {
                                    root: {
                                      image: {
                                        default: [
                                          {
                                            type: "attribute",
                                            action: "set",
                                            attribute: "src",
                                          },
                                        ],
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            title: {
                              qa: "series-title",
                              bindings: {
                                parent: {
                                  title: {
                                    default: [{ type: "text", action: "set" }],
                                  },
                                },
                              },
                            },
                          },
                        },
                        seasons: {
                          qa: "series-seasons",
                          collectionId: "seasons",
                          settings: { title: "season" },
                          behavior: [
                            {
                              events: ["COMPONENT_READY"],
                              handlers: {
                                series: { action: "season" },
                                scroll: { action: "setScroll", scrollbars: !1 },
                              },
                            },
                            {
                              events: ["COMPONENT_READY", "CHANGE_SEASON"],
                              handlers: {
                                component: {
                                  action: "selected",
                                  rootData: "series",
                                  containerId: "scroll",
                                },
                              },
                            },
                          ],
                          layout: [["scroll"]],
                          content: {
                            scroll: {
                              layout: [["&seasons-item"]],
                              content: {
                                "seasons-item": {
                                  qa: "series-season-item",
                                  element: "a",
                                  behavior: [
                                    {
                                      events: ["click"],
                                      handlers: {
                                        series: { action: "changeSeason" },
                                      },
                                    },
                                  ],
                                  layout: [["title", "number"]],
                                  content: {
                                    title: {
                                      qa: "series-season-title",
                                      element: "span",
                                      bindings: {
                                        settings: {
                                          title: {
                                            default: [
                                              {
                                                type: "text",
                                                action: "set",
                                                translate: !0,
                                              },
                                            ],
                                          },
                                        },
                                      },
                                    },
                                    number: {
                                      qa: "series-season-number",
                                      element: "span",
                                      bindings: {
                                        current: {
                                          number: {
                                            default: [
                                              { type: "text", action: "set" },
                                            ],
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                        episodes: {
                          qa: "series-seasons-episodes",
                          component: "detail-stripe",
                        },
                      },
                    },
                  },
                },
                "epg-channel": {
                  element: "a",
                  behavior: [
                    {
                      events: ["click"],
                      handlers: { links: { action: "navigate" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: { image: { action: "fallback" } },
                    },
                  ],
                  layout: [["number", "image", "no-image", "icon"]],
                  content: {
                    number: {
                      bindings: {
                        current: {
                          number: {
                            default: [{ type: "text", action: "set" }],
                          },
                        },
                      },
                    },
                    image: {
                      bindings: {
                        current: {
                          visible: { null: "noAppend" },
                          image: { null: "noAppend" },
                        },
                      },
                      layout: [["img"]],
                      content: {
                        img: {
                          element: "img",
                          bindings: {
                            current: {
                              visible: {
                                default: [
                                  {
                                    type: "attribute",
                                    action: "set",
                                    attribute: "src",
                                  },
                                ],
                              },
                            },
                          },
                        },
                      },
                    },
                    "no-image": {
                      bindings: {
                        current: {
                          image: { default: "noAppend" },
                          title: { default: [{ type: "text", action: "set" }] },
                        },
                      },
                    },
                    icon: {
                      element: "i",
                      bindings: {
                        current: {
                          isCatchup: {
                            default: [
                              {
                                type: "class",
                                action: "add",
                                value: "icon-restart",
                              },
                            ],
                            null: "noAppend",
                          },
                        },
                      },
                    },
                  },
                },
                "epg-channels": {
                  collectionId: "epg-channels",
                  behavior: [
                    {
                      events: ["COMPONENT_READY"],
                      handlers: {
                        scroll: { action: "setScroll", scrollbars: !0 },
                        epg: { action: "channelsReady" },
                      },
                    },
                    {
                      events: ["SCROLLING"],
                      handlers: { epg: { action: "stopTimer" } },
                    },
                    {
                      events: ["SCROLL_OPTIMIZED", "SCROLL_END", "DOM_RESIZE"],
                      handlers: { epg: { action: "scrollChannels" } },
                    },
                    {
                      events: ["DOM_ORIENTATION_CHANGE"],
                      handlers: { epg: { action: "orientationChanged" } },
                    },
                  ],
                  layout: [["scroll"]],
                  content: {
                    scroll: {
                      layout: [["epg-channels-all", "epg-schedules-all"]],
                      content: {
                        "epg-channels-all": { layout: [["&epg-channel"]] },
                        "epg-schedules-all": {
                          behavior: [
                            {
                              events: ["COMPONENT_READY"],
                              handlers: {
                                scroll: {
                                  action: "setScroll",
                                  horizontal: !0,
                                  disableWheel: !0,
                                },
                                epg: { action: "setTimeScroll" },
                              },
                            },
                            {
                              events: ["SCROLLING", "SCROLL_END"],
                              handlers: { epg: { action: "syncHeader" } },
                            },
                          ],
                          layout: [["scroll"]],
                          content: {
                            scroll: {
                              layout: [["&epg-schedules-container"]],
                              content: {
                                "epg-schedules-container": {
                                  layout: [["epg-schedules"]],
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                "epg-container": {
                  settings: {},
                  behavior: [
                    {
                      events: ["COMPONENT_SET"],
                      handlers: { epg: { action: "init" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: { epg: { action: "ready" } },
                    },
                    {
                      events: ["EPG_PAGINATION"],
                      handlers: { epg: { action: "pagination" } },
                    },
                    {
                      events: ["BEFORE_CHANGE_PAGE"],
                      handlers: { epg: { action: "save" } },
                    },
                    {
                      events: ["BREAKPOINT_CHANGED"],
                      handlers: { epg: { action: "reload" } },
                    },
                    {
                      events: ["PARENTAL_CHANGED"],
                      handlers: { epg: { action: "parentalChange" } },
                    },
                    {
                      events: ["TIMEOUT"],
                      handlers: { epg: { action: "update" } },
                    },
                  ],
                  layout: [["epg-dates"], ["epg-header"], ["epg-channels"]],
                },
                "epg-dates-item": {
                  element: "a",
                  behavior: [
                    {
                      events: ["click"],
                      handlers: { epg: { action: "changeDate" } },
                    },
                  ],
                  bindings: {
                    current: {
                      selected: {
                        default: [
                          { type: "class", action: "add", value: "selected" },
                        ],
                        null: [
                          {
                            type: "class",
                            action: "remove",
                            value: "selected",
                          },
                        ],
                      },
                      text: {
                        default: [
                          { type: "text", action: "set", translate: !0 },
                        ],
                      },
                    },
                  },
                },
                "epg-dates": {
                  collectionId: "epg-dates",
                  behavior: [
                    {
                      events: ["COMPONENT_SET"],
                      handlers: { epg: { action: "loadDates" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: {
                        scroll: {
                          action: "setScroll",
                          scrollbars: !1,
                          horizontal: !0,
                        },
                        epg: { action: "datesReady" },
                      },
                    },
                    {
                      events: ["SCROLL_OPTIMIZED", "SCROLL_END"],
                      handlers: { epg: { action: "setDaysArrows" } },
                    },
                  ],
                  layout: [["scroll"], ["arrow-left", "arrow-right"]],
                  content: {
                    "arrow-left": {
                      element: "a",
                      behavior: [
                        {
                          events: ["click"],
                          handlers: {
                            scroll: {
                              action: "btnEpgDates",
                              direction: "prev",
                            },
                          },
                        },
                      ],
                    },
                    "arrow-right": {
                      element: "a",
                      behavior: [
                        {
                          events: ["click"],
                          handlers: {
                            scroll: {
                              action: "btnEpgDates",
                              direction: "next",
                            },
                          },
                        },
                      ],
                    },
                    scroll: { layout: [["&epg-dates-item"]] },
                  },
                },
                "epg-dropdown-item": {
                  element: "a",
                  behavior: [
                    {
                      events: ["click"],
                      handlers: { epg: { action: "changeList" } },
                    },
                  ],
                  bindings: {
                    current: {
                      selected: {
                        default: [
                          { type: "class", action: "add", value: "selected" },
                        ],
                        null: [
                          {
                            type: "class",
                            action: "remove",
                            value: "selected",
                          },
                        ],
                      },
                      name: {
                        default: [
                          { type: "class", action: "add", value: "item" },
                          { type: "text", action: "set", translate: !0 },
                        ],
                      },
                    },
                  },
                },
                "epg-header": {
                  layout: [["epg-dropdown"], ["epg-timeslot"]],
                  content: {
                    "epg-dropdown": {
                      layout: [["dropdown-toggle"], ["dropdown"]],
                      content: {
                        "dropdown-toggle": {
                          element: "a",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: {
                                dropdown: {
                                  action: "toggle",
                                  componentId: "epg-dropdown",
                                },
                              },
                            },
                            {
                              events: ["BREAKPOINT_CHANGED"],
                              handlers: {
                                dropdown: {
                                  action: "check",
                                  componentId: "epg-dropdown",
                                },
                              },
                            },
                            {
                              events: ["DOCUMENT_CLICK", "DROPDOWN_CLOSE"],
                              handlers: {
                                dropdown: {
                                  action: "close",
                                  componentId: "epg-dropdown",
                                },
                              },
                            },
                          ],
                          layout: [["label", "icon"]],
                          content: {
                            label: {
                              bindings: {
                                settings: {
                                  listName: {
                                    default: [
                                      {
                                        type: "text",
                                        action: "set",
                                        translateId: "epg-dropdown",
                                        translate: !0,
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                            icon: {},
                          },
                        },
                        dropdown: {
                          collectionId: "channels-list",
                          settings: { translateId: "epg-dropdown", title: !0 },
                          behavior: [
                            {
                              events: ["COMPONENT_SET"],
                              handlers: { epg: { action: "loadList" } },
                            },
                            {
                              events: ["DROPDOWN_OPEN"],
                              handlers: {
                                scroll: { action: "setScroll", scrollbars: !0 },
                              },
                            },
                          ],
                          layout: [["scroll"]],
                          content: {
                            scroll: { layout: [["&epg-dropdown-item"]] },
                          },
                        },
                      },
                    },
                    "epg-timeslot": {
                      collectionId: "epg-hours",
                      behavior: [
                        {
                          events: ["COMPONENT_SET"],
                          handlers: { epg: { action: "loadTime" } },
                        },
                        {
                          events: ["COMPONENT_READY"],
                          handlers: {
                            scroll: {
                              action: "setScroll",
                              horizontal: !0,
                              disableWheel: !0,
                            },
                            epg: { action: "hoursReady" },
                          },
                        },
                        {
                          events: ["SCROLLING", "SCROLL_END"],
                          handlers: { epg: { action: "syncHeader" } },
                        },
                        {
                          events: ["SCROLL_OPTIMIZED"],
                          handlers: { epg: { action: "refreshSchedules" } },
                        },
                      ],
                      layout: [["scroll", "arrow-left", "arrow-right"]],
                      content: {
                        "arrow-left": {
                          element: "a",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: {
                                epg: {
                                  action: "pagination",
                                  direction: "prev",
                                },
                              },
                            },
                          ],
                        },
                        "arrow-right": {
                          element: "a",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: {
                                epg: {
                                  action: "pagination",
                                  direction: "next",
                                },
                              },
                            },
                          ],
                        },
                        scroll: {
                          layout: [
                            ["epg-timeslot-wrapper"],
                            ["epg-time-shadow"],
                          ],
                          content: {
                            "epg-time-shadow": {
                              layout: [["epg-timeline"]],
                              content: { "epg-timeline": {} },
                            },
                            "epg-timeslot-wrapper": {
                              layout: [["&epg-timeslot-item"]],
                            },
                          },
                        },
                      },
                    },
                  },
                },
                "epg-schedule": {
                  element: "a",
                  qa: "schedule",
                  behavior: [
                    {
                      events: ["click"],
                      handlers: { links: { action: "navigate" } },
                    },
                    {
                      events: ["mouseover"],
                      handlers: {
                        image: {
                          action: "append",
                          "image-component": [
                            "components",
                            "epg-schedule-content",
                            "components",
                            "image",
                          ],
                        },
                      },
                    },
                  ],
                  bindings: {
                    settings: {
                      "shadow-width": {
                        default: [
                          { type: "style", action: "add", style: "background" },
                        ],
                      },
                      "margin-left": {
                        default: [
                          {
                            type: "style",
                            action: "add",
                            style: "margin-left",
                            unit: "vw",
                          },
                        ],
                      },
                    },
                    current: {
                      width: {
                        default: [
                          { type: "style", action: "add", style: "width" },
                        ],
                      },
                      isPast: {
                        default: [
                          { type: "class", action: "add", value: "past" },
                        ],
                      },
                      catchupTV: {
                        default: [
                          { type: "class", action: "add", value: "catchup" },
                        ],
                      },
                      restricted: {
                        default: [
                          { type: "class", action: "add", value: "restricted" },
                        ],
                      },
                    },
                  },
                  layout: [["epg-schedule-content"]],
                  content: {
                    "epg-schedule-content": {
                      bindings: {
                        settings: {
                          margin: {
                            default: [
                              { type: "style", action: "add", style: "margin" },
                            ],
                          },
                          "margin-width": {
                            default: [
                              { type: "style", action: "add", style: "width" },
                            ],
                          },
                        },
                      },
                      layout: [["text-wrapper", "info-btn", "image"]],
                      content: {
                        "text-wrapper": {
                          layout: [["text", "labels"]],
                          content: {
                            text: {
                              bindings: {
                                current: {
                                  playbackTitle: {
                                    default: [{ type: "text", action: "set" }],
                                  },
                                  restricted: {
                                    default: [
                                      {
                                        type: "text",
                                        action: "set",
                                        value: "restrictedContent",
                                        translate: !0,
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                            labels: {
                              layout: [["genres"], ["subtitle"], ["rating"]],
                              content: {
                                genres: {
                                  element: "span",
                                  bindings: {
                                    current: {
                                      genres: {
                                        null: "noAppend",
                                        default: [
                                          { type: "text", action: "set" },
                                        ],
                                      },
                                      subtitle: { default: "noAppend" },
                                      restricted: { default: "noAppend" },
                                    },
                                  },
                                },
                                subtitle: {
                                  bindings: {
                                    current: {
                                      subtitle: {
                                        null: "noAppend",
                                        default: [
                                          { type: "text", action: "set" },
                                        ],
                                      },
                                      restricted: { default: "noAppend" },
                                    },
                                  },
                                },
                                rating: {
                                  bindings: {
                                    current: {
                                      rating: {
                                        default: [
                                          { type: "text", action: "set" },
                                          {
                                            type: "class",
                                            action: "add",
                                            value: "hidden",
                                          },
                                        ],
                                      },
                                      restricted: {
                                        default: [
                                          {
                                            type: "class",
                                            action: "remove",
                                            value: "hidden",
                                          },
                                        ],
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                        "info-btn": {
                          element: "a",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: {
                                links: {
                                  action: "navigate",
                                  pageId: "asset",
                                  origin: !0,
                                },
                              },
                            },
                          ],
                          bindings: {
                            current: { isLive: { null: "noAppend" } },
                          },
                          layout: [["icon", "info-text"]],
                          content: {
                            icon: {
                              element: "i",
                              bindings: {
                                settings: {
                                  infoButton: {
                                    default: [{ type: "class", action: "add" }],
                                  },
                                },
                              },
                            },
                            "info-text": {
                              bindings: {
                                settings: {
                                  infoButtonText: {
                                    default: [
                                      {
                                        type: "text",
                                        action: "set",
                                        translate: !0,
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                        image: {
                          bindings: {
                            current: {
                              restricted: { default: "noAppend" },
                              image: { null: "noAppend" },
                            },
                          },
                          layout: [["img"]],
                          content: { img: { element: "img" } },
                        },
                      },
                    },
                  },
                },
                "epg-schedules": {
                  collectionId: "epg-schedules",
                  settings: {
                    infoButton: "icon-about",
                    infoButtonText: "info",
                    margin: { transform: "epg", options: { action: "margin" } },
                    "margin-left": {
                      transform: "epg",
                      options: { action: "marginLeft" },
                    },
                    "margin-width": {
                      transform: "epg",
                      options: { action: "marginWidth" },
                    },
                    "shadow-width": {
                      transform: "epg",
                      options: { action: "shadow" },
                    },
                  },
                  bindings: {
                    current: {
                      null: [{ type: "class", action: "add", value: "cells" }],
                      default: [
                        { type: "class", action: "remove", value: "cells" },
                      ],
                    },
                  },
                  layout: [["&epg-schedule"]],
                },
                "epg-timeslot-item": {
                  bindings: {
                    current: {
                      text: { default: [{ type: "text", action: "set" }] },
                    },
                  },
                },
                header: {
                  qa: "header",
                  settings: {
                    parental: {
                      transform: "parental",
                      options: {
                        action: "setParental",
                        locked: "icon-locked",
                        unlocked: "icon-unlocked",
                      },
                    },
                    haveParental: {
                      transform: "parental",
                      options: { action: "haveParental" },
                    },
                    menu: "icon-menu",
                    profile: "icon-user-icon",
                    search: "icon-search",
                    searchOpen: null,
                  },
                  behavior: [
                    {
                      events: ["PAGE_SCROLL", "PAGE_CHANGED"],
                      handlers: { scroll: { action: "header" } },
                    },
                  ],
                  layout: [
                    [
                      "navbar-menu",
                      "logo",
                      "navbar-container",
                      "search-menu",
                      "parental-toggle",
                      "profile-menu",
                    ],
                  ],
                  content: {
                    "navbar-menu": {
                      element: "a",
                      behavior: [
                        {
                          events: ["click"],
                          handlers: {
                            modal: {
                              action: "open",
                              componentId: "navbar",
                              collectionId: "navbar",
                              animate: !0,
                              title: " ",
                              fullscreen: !0,
                            },
                          },
                        },
                        {
                          events: ["BREAKPOINT_CHANGED"],
                          handlers: {
                            modal: {
                              action: "close",
                              componentId: "navbar",
                              noAnimate: !0,
                            },
                          },
                        },
                      ],
                      bindings: {
                        settings: {
                          menu: { default: [{ type: "class", action: "add" }] },
                        },
                      },
                    },
                    logo: {
                      element: "a",
                      behavior: [
                        {
                          events: ["click"],
                          handlers: { links: { action: "home" } },
                        },
                      ],
                    },
                    "navbar-container": {
                      layout: [["navbar", "navbar-more"]],
                      content: {
                        "navbar-more": {
                          settings: {
                            "more-icon": "icon-di-more",
                            "more-text": "nav-more",
                            positionSet: null,
                            activePage: null,
                          },
                          bindings: {
                            settings: {
                              positionSet: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                                default: [
                                  {
                                    type: "class",
                                    action: "remove",
                                    value: "hidden",
                                  },
                                  {
                                    type: "style",
                                    action: "add",
                                    style: "position",
                                    value: "absolute",
                                  },
                                  {
                                    type: "style",
                                    action: "add",
                                    style: "left",
                                    unit: "px",
                                  },
                                ],
                              },
                              activePage: {
                                null: [
                                  {
                                    type: "class",
                                    action: "remove",
                                    value: "highlight",
                                  },
                                ],
                                default: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "highlight",
                                  },
                                ],
                              },
                            },
                          },
                          layout: [["dropdown-toggle"], ["dropdown"]],
                          content: {
                            "dropdown-toggle": {
                              element: "a",
                              behavior: [
                                {
                                  events: ["click"],
                                  handlers: {
                                    dropdown: {
                                      action: "toggle",
                                      componentId: "navbar-more",
                                    },
                                  },
                                },
                                {
                                  events: [
                                    "DOCUMENT_CLICK",
                                    "DROPDOWN_CLOSE",
                                    "BREAKPOINT_CHANGED",
                                  ],
                                  handlers: {
                                    dropdown: {
                                      action: "close",
                                      componentId: "navbar-more",
                                    },
                                  },
                                },
                              ],
                              layout: [["icon", "label"]],
                              content: {
                                icon: {
                                  element: "i",
                                  bindings: {
                                    settings: {
                                      "more-icon": {
                                        default: [
                                          { type: "class", action: "add" },
                                        ],
                                      },
                                    },
                                  },
                                },
                                label: {
                                  element: "label",
                                  bindings: {
                                    settings: {
                                      "more-text": {
                                        default: [
                                          {
                                            type: "text",
                                            action: "set",
                                            translate: !0,
                                          },
                                        ],
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            dropdown: {
                              collectionId: "navbar",
                              settings: { translateId: "navbar" },
                              behavior: [
                                {
                                  events: ["COMPONENT_READY"],
                                  handlers: {
                                    component: {
                                      action: "fetchComponents",
                                      collectionId: "navbar",
                                      components: ["navbar", "modal-navbar"],
                                    },
                                  },
                                },
                                {
                                  events: ["DROPDOWN_OPEN"],
                                  handlers: {
                                    scroll: {
                                      action: "setScroll",
                                      scrollbars: !0,
                                    },
                                  },
                                },
                                {
                                  events: ["PAGE_READY", "PAGE_CHANGED"],
                                  handlers: { collection: { action: "fetch" } },
                                },
                              ],
                              layout: [["scroll"]],
                              content: { scroll: { layout: [["&item"]] } },
                            },
                          },
                        },
                      },
                    },
                    "search-menu": {
                      layout: [["search-trigger"], ["search-form"]],
                      content: {
                        "search-trigger": {
                          element: "a",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: { links: { action: "search" } },
                            },
                          ],
                          bindings: {
                            settings: {
                              search: {
                                default: [{ type: "class", action: "add" }],
                              },
                              searchOpen: {
                                null: [
                                  {
                                    type: "class",
                                    action: "remove",
                                    value: "hidden",
                                  },
                                ],
                                default: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                        },
                      },
                    },
                    "parental-toggle": {
                      layout: [["parental-icon"]],
                      bindings: {
                        settings: {
                          haveParental: {
                            default: [
                              { type: "class", action: "add", value: "hidden" },
                            ],
                            true: [
                              {
                                type: "class",
                                action: "remove",
                                value: "hidden",
                              },
                            ],
                          },
                        },
                      },
                      content: {
                        "parental-icon": {
                          element: "a",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: {
                                parental: { action: "toggleParental" },
                              },
                            },
                          ],
                          bindings: {
                            settings: {
                              parental: {
                                default: [{ type: "class", action: "add" }],
                              },
                            },
                          },
                        },
                      },
                    },
                    "profile-menu": {
                      layout: [["dropdown-toggle"], ["dropdown"]],
                      content: {
                        "dropdown-toggle": {
                          element: "a",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: {
                                dropdown: {
                                  action: "toggle",
                                  componentId: "profile-menu",
                                },
                              },
                            },
                            {
                              events: ["BREAKPOINT_CHANGED"],
                              handlers: {
                                dropdown: {
                                  action: "check",
                                  componentId: "profile-menu",
                                },
                              },
                            },
                            {
                              events: ["DOCUMENT_CLICK", "DROPDOWN_CLOSE"],
                              handlers: {
                                dropdown: {
                                  action: "close",
                                  componentId: "profile-menu",
                                },
                              },
                            },
                          ],
                          bindings: {
                            settings: {
                              profile: {
                                default: [{ type: "class", action: "add" }],
                              },
                            },
                          },
                        },
                        dropdown: {
                          collectionId: "header-menu",
                          settings: { translateId: "profile-menu" },
                          behavior: [
                            {
                              events: ["COMPONENT_SET"],
                              handlers: { collection: { action: "fetch" } },
                            },
                            {
                              events: ["DROPDOWN_OPEN"],
                              handlers: {
                                scroll: { action: "setScroll", scrollbars: !0 },
                              },
                            },
                          ],
                          layout: [["scroll"]],
                          content: { scroll: { layout: [["&item"]] } },
                        },
                      },
                    },
                  },
                },
                navbar: {
                  collectionId: "navbar",
                  behavior: [
                    {
                      events: ["COMPONENTS_READY", "DOM_RESIZE"],
                      handlers: {
                        component: { action: "setMore", moreId: "navbar-more" },
                      },
                    },
                    {
                      events: ["BREAKPOINT_CHANGED"],
                      handlers: {
                        component: {
                          action: "setMore",
                          moreId: "navbar-more",
                          delay: 3,
                        },
                      },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: {
                        scroll: { action: "setScroll", scrollbars: !0 },
                      },
                    },
                  ],
                  layout: [["scroll"]],
                  content: { scroll: { layout: [["&item"]] } },
                },
                "search-form": {
                  element: "form",
                  settings: {
                    active: null,
                    validate: "novalidate",
                    search: "icon-search",
                    close: "icon-close",
                    txt: "search-title",
                    haveParental: {
                      transform: "parental",
                      options: { action: "haveParental" },
                    },
                  },
                  behavior: [
                    {
                      events: ["COMPONENT_READY"],
                      handlers: {
                        form: { action: "setForm", fields: ["searchText"] },
                      },
                    },
                    {
                      events: ["PAGE_CHANGED", "PARENTAL_CHANGED"],
                      handlers: { form: { action: "hideSearchPage" } },
                    },
                  ],
                  bindings: {
                    settings: {
                      haveParental: {
                        default: [
                          {
                            type: "class",
                            action: "remove",
                            value: "have-parental",
                          },
                        ],
                        true: [
                          {
                            type: "class",
                            action: "add",
                            value: "have-parental",
                          },
                        ],
                      },
                      validate: {
                        default: [
                          {
                            type: "attribute",
                            action: "set",
                            attribute: "novalidate",
                          },
                          {
                            type: "attribute",
                            action: "set",
                            attribute: "onsubmit",
                            value: "return false;",
                          },
                        ],
                      },
                      active: {
                        null: [
                          { type: "class", action: "add", value: "hidden" },
                        ],
                        default: [
                          { type: "class", action: "remove", value: "hidden" },
                        ],
                      },
                    },
                  },
                  layout: [["search-icon", "searchText", "close"]],
                  content: {
                    "search-icon": {
                      element: "a",
                      behavior: [
                        {
                          events: ["click", "OK"],
                          state: "default",
                          handlers: { form: { action: "search" } },
                        },
                      ],
                      bindings: {
                        settings: {
                          search: {
                            default: [{ type: "class", action: "add" }],
                          },
                        },
                      },
                    },
                    close: {
                      element: "a",
                      behavior: [
                        {
                          events: ["click"],
                          handlers: { form: { action: "hideSearch" } },
                        },
                      ],
                      bindings: {
                        settings: {
                          close: {
                            default: [{ type: "class", action: "add" }],
                          },
                        },
                      },
                    },
                    searchText: {
                      element: "input",
                      behavior: [
                        {
                          events: ["change", "blur", "keyup"],
                          handlers: {
                            validate: { action: "required" },
                            form: { action: "setInput" },
                          },
                        },
                      ],
                      bindings: {
                        settings: {
                          txt: {
                            default: [
                              {
                                type: "attribute",
                                action: "set",
                                attribute: "placeholder",
                                translate: !0,
                              },
                              {
                                type: "attribute",
                                action: "set",
                                attribute: "type",
                                value: "text",
                              },
                            ],
                          },
                        },
                      },
                    },
                  },
                },
                error: {
                  settings: {
                    "button-ok": "ok",
                    "button-info": "more",
                    linkout: null,
                  },
                  behavior: [],
                  layout: [["title"], ["text"], ["buttons"]],
                  content: {
                    title: {
                      bindings: {
                        root: {
                          title: { default: [{ type: "text", action: "set" }] },
                        },
                      },
                    },
                    text: {
                      bindings: {
                        root: {
                          text: { default: [{ type: "text", action: "set" }] },
                        },
                      },
                    },
                    buttons: {
                      layout: [["ok"], ["more-info"]],
                      content: {
                        ok: {
                          element: "button",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: { modal: { action: "close" } },
                            },
                          ],
                          bindings: {
                            settings: {
                              "button-ok": {
                                default: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "btn",
                                  },
                                  {
                                    type: "text",
                                    action: "set",
                                    translate: !0,
                                  },
                                ],
                              },
                            },
                          },
                        },
                        "more-info": {
                          element: "button",
                          bindings: {
                            settings: {
                              "button-info": {
                                default: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "btn",
                                  },
                                  {
                                    type: "text",
                                    action: "set",
                                    translate: !0,
                                  },
                                ],
                              },
                              linkout: {
                                default: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "btn",
                                  },
                                ],
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                "modal-error": {
                  bindings: {
                    settings: {
                      error: {
                        null: [
                          { type: "class", action: "add", value: "hidden" },
                        ],
                        default: [
                          { type: "class", action: "remove", value: "hidden" },
                          { type: "text", action: "set", translate: !0 },
                        ],
                      },
                    },
                  },
                },
                modal: {
                  settings: {
                    active: null,
                    backdrop: null,
                    backdropClose: null,
                    fullscreen: null,
                    title: null,
                    image: null,
                    animate: null,
                    dropdown: null,
                    translateId: null,
                    close: "icon-close",
                  },
                  behavior: [
                    {
                      events: ["MODAL_OPEN"],
                      handlers: { modal: { action: "open" } },
                    },
                    {
                      events: ["MODAL_CLOSE", "PAGE_CHANGED"],
                      handlers: { modal: { action: "close" } },
                    },
                    {
                      events: ["DOCUMENT_CLICK"],
                      handlers: { modal: { action: "closeBackdrop" } },
                    },
                  ],
                  bindings: {
                    settings: {
                      active: {
                        null: [
                          { type: "class", action: "add", value: "hidden" },
                        ],
                        default: [
                          { type: "class", action: "remove", value: "hidden" },
                        ],
                      },
                      backdrop: {
                        null: [
                          {
                            type: "class",
                            action: "remove",
                            value: "backdrop",
                          },
                        ],
                        default: [
                          { type: "class", action: "add", value: "backdrop" },
                        ],
                      },
                      animate: {
                        null: [
                          { type: "class", action: "remove", value: "animate" },
                        ],
                        default: [
                          { type: "class", action: "add", value: "animate" },
                        ],
                      },
                      image: {
                        null: [
                          { type: "class", action: "remove", value: "image" },
                        ],
                        default: [
                          { type: "class", action: "add", value: "image" },
                        ],
                      },
                      fullscreen: {
                        null: [
                          {
                            type: "class",
                            action: "remove",
                            value: "fullscreen",
                          },
                        ],
                        default: [
                          { type: "class", action: "add", value: "fullscreen" },
                        ],
                      },
                      contentComponent: {
                        default: [{ type: "class", action: "add" }],
                      },
                    },
                  },
                  layout: [["modal-container"]],
                  content: {
                    "modal-container": {
                      layout: [
                        ["modal-image"],
                        ["modal-header"],
                        ["modal-body"],
                      ],
                      content: {
                        "modal-image": {
                          bindings: {
                            settings: {
                              image: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                          layout: [["image"]],
                          content: {
                            image: {
                              layout: [["img"]],
                              content: {
                                img: {
                                  element: "img",
                                  bindings: {
                                    settings: {
                                      image: {
                                        default: [
                                          {
                                            type: "attribute",
                                            action: "set",
                                            attribute: "src",
                                          },
                                        ],
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                        "modal-header": {
                          bindings: {
                            settings: {
                              title: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                                default: [
                                  {
                                    type: "class",
                                    action: "remove",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                          layout: [["title", "close"]],
                          content: {
                            title: {
                              bindings: {
                                settings: {
                                  title: {
                                    default: [
                                      {
                                        type: "text",
                                        action: "set",
                                        translate: !0,
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                            close: {
                              element: "a",
                              bindings: {
                                settings: {
                                  close: {
                                    default: [{ type: "class", action: "add" }],
                                  },
                                },
                              },
                              behavior: [
                                {
                                  events: ["click"],
                                  handlers: { modal: { action: "close" } },
                                },
                              ],
                            },
                          },
                        },
                        "modal-body": {},
                      },
                    },
                  },
                },
                parental: {
                  settings: {
                    title: "parentalTitle",
                    text: "parentalText",
                    "pin-text": "pin-text",
                    "unlock-btn": "unlock",
                    "cancel-btn": "cancel",
                    callback: null,
                    error: {
                      default: null,
                      errorPinEmpty: "emptyPin",
                      errorPinWrong: "wrongPin",
                    },
                  },
                  behavior: [
                    {
                      events: ["COMPONENT_SET"],
                      handlers: { form: { action: "setForm", fields: [] } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: { parental: { action: "focus" } },
                    },
                    {
                      events: ["PARENTAL_SET_CALLBACK"],
                      handlers: { parental: { action: "setCallback" } },
                    },
                  ],
                  layout: [
                    ["title"],
                    ["text"],
                    ["pin-field"],
                    ["modal-error"],
                    ["buttons"],
                  ],
                  content: {
                    title: {
                      bindings: {
                        settings: {
                          title: {
                            default: [
                              { type: "text", action: "set", translate: !0 },
                            ],
                          },
                        },
                      },
                    },
                    text: {
                      bindings: {
                        settings: {
                          text: {
                            default: [
                              { type: "text", action: "set", translate: !0 },
                            ],
                          },
                        },
                      },
                    },
                    buttons: {
                      layout: [["cancel"], ["unlock"]],
                      content: {
                        cancel: {
                          element: "button",
                          behavior: [
                            {
                              events: ["click"],
                              state: "default",
                              handlers: { modal: { action: "close" } },
                            },
                          ],
                          bindings: {
                            settings: {
                              "cancel-btn": {
                                default: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "btn",
                                  },
                                  {
                                    type: "text",
                                    action: "set",
                                    translate: !0,
                                  },
                                  {
                                    type: "attribute",
                                    action: "set",
                                    attribute: "type",
                                    value: "button",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        unlock: {
                          element: "button",
                          behavior: [
                            {
                              events: ["click", "OK"],
                              state: "default",
                              handlers: { parental: { action: "checkPin" } },
                            },
                          ],
                          bindings: {
                            settings: {
                              "unlock-btn": {
                                default: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "btn",
                                  },
                                  {
                                    type: "text",
                                    action: "set",
                                    translate: !0,
                                  },
                                  {
                                    type: "attribute",
                                    action: "set",
                                    attribute: "type",
                                    value: "button",
                                  },
                                ],
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                "pin-field": {
                  layout: [["pin-text", "pin-input"]],
                  content: {
                    "pin-text": {
                      element: "label",
                      bindings: {
                        settings: {
                          "pin-text": {
                            default: [
                              { type: "text", action: "set", translate: !0 },
                              {
                                type: "attribute",
                                action: "set",
                                attribute: "for",
                                value: "pin",
                              },
                            ],
                          },
                        },
                      },
                    },
                    "pin-input": {
                      element: "input",
                      behavior: [
                        {
                          events: ["change", "blur", "keyup"],
                          handlers: { form: { action: "setInput" } },
                        },
                      ],
                      bindings: {
                        settings: {
                          "pin-text": {
                            default: [
                              {
                                type: "attribute",
                                action: "set",
                                attribute: "id",
                                value: "pin",
                              },
                              {
                                type: "attribute",
                                action: "set",
                                attribute: "type",
                                value: "password",
                              },
                              {
                                type: "attribute",
                                action: "set",
                                attribute: "maxlength",
                                value: "4",
                              },
                              {
                                type: "attribute",
                                action: "set",
                                attribute: "pattern",
                                value: "[0-9]*",
                              },
                              {
                                type: "attribute",
                                action: "set",
                                attribute: "inputmode",
                                value: "numeric",
                              },
                            ],
                          },
                        },
                      },
                    },
                  },
                },
                purchase: {
                  collectionId: "purchase",
                  qa: "modal-purchase",
                  settings: {
                    price: "",
                    uri: "",
                    rentLabel: "",
                    "pin-text": "pin-text",
                    pinRequired: !1,
                    "rent-btn": "ok",
                    "no-btn": "no",
                    "yes-btn": "yes",
                    "cancel-btn": "cancel",
                    error: {
                      default: null,
                      errorPinEmpty: "emptyPin",
                      errorPinWrong: "wrongPin",
                      "0003-1110": "notFound",
                      "0001-1101": "notFound",
                      "0001-1304": "limitExceeded",
                      "0001-1201": "billingDisabled",
                      "0002-1122": "casError",
                      "0002-1123": "casError",
                    },
                  },
                  behavior: [
                    {
                      events: ["COMPONENT_SET"],
                      handlers: {
                        purchase: { action: "prepare" },
                        form: { action: "setForm", fields: [] },
                      },
                    },
                    {
                      events: ["PARENTAL_CHANGED"],
                      handlers: { purchase: { action: "close" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: {
                        purchase: { action: "focus" },
                        image: {
                          action: "fallback",
                          property: "image",
                          containerId: "poster-image",
                          "no-image-components": ["purchase"],
                        },
                      },
                    },
                    {
                      events: ["PURCHASE_SUCCESS"],
                      handlers: { purchase: { action: "success" } },
                    },
                    {
                      events: ["PURCHASE_ERROR"],
                      handlers: { purchase: { action: "error" } },
                    },
                  ],
                  layout: [["price"], ["pin"], ["no-pin"]],
                  content: {
                    price: {
                      bindings: {
                        settings: {
                          rentLabel: {
                            default: [{ type: "text", action: "set" }],
                          },
                        },
                      },
                    },
                    pin: {
                      bindings: {
                        settings: {
                          pinRequired: {
                            null: [
                              { type: "class", action: "add", value: "hidden" },
                            ],
                          },
                        },
                      },
                      layout: [["pin-field"], ["modal-error"], ["buttons"]],
                      content: {
                        buttons: {
                          layout: [["cancel"], ["ok"]],
                          content: {
                            cancel: {
                              element: "button",
                              behavior: [
                                {
                                  events: ["click", "OK"],
                                  state: "default",
                                  handlers: { purchase: { action: "close" } },
                                },
                              ],
                              bindings: {
                                settings: {
                                  "cancel-btn": {
                                    default: [
                                      {
                                        type: "class",
                                        action: "add",
                                        value: "btn",
                                      },
                                      {
                                        type: "text",
                                        action: "set",
                                        translate: !0,
                                      },
                                      {
                                        type: "attribute",
                                        action: "set",
                                        attribute: "type",
                                        value: "button",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                            ok: {
                              element: "button",
                              behavior: [
                                {
                                  events: ["click", "OK"],
                                  state: "default",
                                  handlers: {
                                    purchase: { action: "checkPin" },
                                  },
                                },
                              ],
                              bindings: {
                                settings: {
                                  "rent-btn": {
                                    default: [
                                      {
                                        type: "class",
                                        action: "add",
                                        value: "btn",
                                      },
                                      {
                                        type: "text",
                                        action: "set",
                                        translate: !0,
                                      },
                                      {
                                        type: "attribute",
                                        action: "set",
                                        attribute: "type",
                                        value: "button",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                    "no-pin": {
                      bindings: {
                        settings: {
                          pinRequired: {
                            true: [
                              { type: "class", action: "add", value: "hidden" },
                            ],
                          },
                        },
                      },
                      layout: [["modal-error"], ["buttons"]],
                      content: {
                        buttons: {
                          layout: [["yes"], ["no"]],
                          content: {
                            yes: {
                              element: "button",
                              behavior: [
                                {
                                  events: ["click", "OK"],
                                  state: "default",
                                  handlers: { purchase: { action: "send" } },
                                },
                              ],
                              bindings: {
                                settings: {
                                  "yes-btn": {
                                    default: [
                                      {
                                        type: "class",
                                        action: "add",
                                        value: "btn",
                                      },
                                      {
                                        type: "text",
                                        action: "set",
                                        translate: !0,
                                      },
                                      {
                                        type: "attribute",
                                        action: "set",
                                        attribute: "type",
                                        value: "button",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                            no: {
                              element: "button",
                              behavior: [
                                {
                                  events: ["click", "OK"],
                                  state: "default",
                                  handlers: { purchase: { action: "close" } },
                                },
                              ],
                              bindings: {
                                settings: {
                                  "no-btn": {
                                    default: [
                                      {
                                        type: "class",
                                        action: "add",
                                        value: "btn",
                                      },
                                      {
                                        type: "text",
                                        action: "set",
                                        translate: !0,
                                      },
                                      {
                                        type: "attribute",
                                        action: "set",
                                        attribute: "type",
                                        value: "button",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                "playback-error": {
                  settings: {
                    error: {
                      404: "playbackFailed",
                      461: "prmDeviceType",
                      462: "prmGeoBlocked",
                      463: "prmMissingService",
                      464: "prmNetworkType",
                      default: null,
                      concurrencyError: "prmMaxStreams",
                      prmNotAllowed: "prmNotAllowed",
                      prmConnectivity: "prmConnectivity",
                      playbackFailed: "playbackFailed",
                      playbackFailedCas: "playbackFailedCas",
                      restrictedContent: "restrictedContent",
                    },
                    errorTitle: {
                      default: "errorTitle",
                      restrictedContent: "restrictedContentTitle",
                    },
                    detailsMessage: null,
                  },
                  bindings: {
                    settings: {
                      error: {
                        null: [
                          { type: "class", action: "add", value: "hidden" },
                        ],
                        default: [
                          { type: "class", action: "remove", value: "hidden" },
                        ],
                        restrictedContent: [
                          { type: "class", action: "add", value: "restricted" },
                        ],
                      },
                    },
                  },
                  layout: [
                    ["error-icon"],
                    ["error-title"],
                    ["error-text"],
                    ["error-buttons"],
                  ],
                  content: {
                    "error-icon": { element: "span" },
                    "error-title": {
                      bindings: {
                        settings: {
                          errorTitle: {
                            default: [
                              { type: "text", action: "set", translate: !0 },
                            ],
                          },
                        },
                      },
                    },
                    "error-text": {
                      bindings: {
                        settings: {
                          error: {
                            default: [
                              { type: "text", action: "set", translate: !0 },
                            ],
                          },
                        },
                      },
                    },
                    "error-buttons": {
                      layout: [["dismiss"], ["details"], ["unlock"]],
                      content: {
                        dismiss: {
                          element: "button",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: { links: { action: "back" } },
                            },
                          ],
                          bindings: {
                            settings: {
                              error: {
                                default: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "btn",
                                  },
                                  {
                                    type: "text",
                                    action: "set",
                                    value: "dismiss",
                                    translate: !0,
                                  },
                                ],
                                restrictedContent: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        details: {
                          element: "button",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: { error: { action: "concurrency" } },
                            },
                          ],
                          bindings: {
                            settings: {
                              error: {
                                default: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "btn",
                                  },
                                  {
                                    type: "text",
                                    action: "set",
                                    value: "details",
                                    translate: !0,
                                  },
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                                prmMaxStreams: [
                                  {
                                    type: "class",
                                    action: "remove",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        unlock: {
                          element: "button",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: {
                                parental: { action: "toggleParental" },
                              },
                            },
                          ],
                          bindings: {
                            settings: {
                              error: {
                                default: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "btn",
                                  },
                                  {
                                    type: "text",
                                    action: "set",
                                    value: "unlock",
                                    translate: !0,
                                  },
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                                restrictedContent: [
                                  {
                                    type: "class",
                                    action: "remove",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                playback: {
                  collectionId: "playback-asset",
                  settings: {
                    nextProgram: !1,
                    showInfo: null,
                    trickplay: null,
                    paused: null,
                  },
                  behavior: [
                    {
                      events: ["COMPONENT_SET"],
                      handlers: { playback: { action: "set" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: { playback: { action: "ready" } },
                    },
                    {
                      events: ["PARENTAL_CHANGED"],
                      handlers: { playback: { action: "parentalChanged" } },
                    },
                    {
                      events: ["CHANNEL_CHANGE"],
                      handlers: { playback: { action: "channelChange" } },
                    },
                    {
                      events: ["CLEAR_PLAYBACK_INFO"],
                      handlers: { playback: { action: "clearPlaybackInfo" } },
                    },
                    {
                      events: ["PLAYBACK_FINISHED"],
                      handlers: { playback: { action: "playbackFinished" } },
                    },
                    {
                      events: ["PLAYBACK_TIME_UPDATED", "NEXT_PROGRAM_START"],
                      handlers: { playback: { action: "playbackTimeUpdated" } },
                    },
                    {
                      events: ["PLAYBACK_ERROR"],
                      handlers: { error: { action: "playback" } },
                    },
                    {
                      events: ["TRICKPLAY_STOP"],
                      handlers: { playback: { action: "stopContent" } },
                    },
                    {
                      events: ["TRICKPLAY_RESTART"],
                      handlers: { playback: { action: "restartContent" } },
                    },
                    {
                      events: ["TRICKPLAY_INFO"],
                      handlers: { playback: { action: "info" } },
                    },
                    {
                      events: ["DOCUMENT_MOUSEMOVE", "DOCUMENT_TOUCHEND"],
                      handlers: { playback: { action: "channelNavToggle" } },
                    },
                    {
                      events: ["TOGGLE_NAV_AUTOHIDE"],
                      handlers: { playback: { action: "toggleNavAutoHide" } },
                    },
                    {
                      events: ["TIMEOUT"],
                      handlers: { playback: { action: "hideChannelNav" } },
                    },
                    {
                      events: ["TUNE_TIMEOUT"],
                      handlers: { playback: { action: "tuneChannel" } },
                    },
                  ],
                  layout: [
                    ["player-wrapper"],
                    ["playback-schedule"],
                    ["next-schedule"],
                    ["playback-channels"],
                  ],
                  content: {
                    "player-wrapper": {
                      layout: [
                        ["player-close"],
                        ["player"],
                        ["channel-change"],
                        ["playback-info"],
                        ["playback-error"],
                      ],
                      content: {
                        player: { component: "player" },
                        "player-close": {
                          settings: {
                            "player-close": "icon-back",
                            visible: null,
                          },
                          element: "a",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: { links: { action: "back" } },
                            },
                          ],
                          bindings: {
                            settings: {
                              "player-close": {
                                default: [{ type: "class", action: "add" }],
                              },
                              visible: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                                true: [
                                  {
                                    type: "class",
                                    action: "remove",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        "channel-change": {
                          collectionId: "epg-channels",
                          behavior: [
                            {
                              events: ["COMPONENT_SET"],
                              handlers: { playback: { action: "channelsSet" } },
                            },
                            {
                              events: ["COMPONENT_READY"],
                              handlers: {
                                image: {
                                  action: "fallback",
                                  setting: "logo",
                                  containerId: "channel-logo",
                                  image: "logo-image",
                                  "no-image-components": ["logo-no-image"],
                                },
                              },
                            },
                          ],
                          settings: {
                            enabled: null,
                            visible: null,
                            logo: null,
                            callSign: null,
                            number: null,
                            currentChannel: null,
                          },
                          bindings: {
                            settings: {
                              visible: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                                true: [
                                  {
                                    type: "class",
                                    action: "remove",
                                    value: "hidden",
                                  },
                                ],
                              },
                              enabled: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                          layout: [
                            ["channel-arrows"],
                            ["channel-number"],
                            ["channel-logo"],
                          ],
                          content: {
                            "channel-number": {
                              bindings: {
                                settings: {
                                  number: {
                                    null: [
                                      {
                                        type: "class",
                                        action: "add",
                                        value: "hidden",
                                      },
                                    ],
                                    default: [
                                      {
                                        type: "class",
                                        action: "remove",
                                        value: "hidden",
                                      },
                                      {
                                        type: "text",
                                        action: "set",
                                        translate: !0,
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                            "channel-logo": {
                              layout: [["logo-no-image"], ["logo-image"]],
                              content: {
                                "logo-no-image": {
                                  bindings: {
                                    settings: {
                                      logo: {
                                        default: [
                                          {
                                            type: "class",
                                            action: "add",
                                            value: "hidden",
                                          },
                                        ],
                                        null: [
                                          {
                                            type: "class",
                                            action: "remove",
                                            value: "hidden",
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  layout: [["call-sign"]],
                                  content: {
                                    "call-sign": {
                                      bindings: {
                                        settings: {
                                          callSign: {
                                            default: [
                                              { type: "text", action: "set" },
                                            ],
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                                "logo-image": {
                                  bindings: {
                                    settings: {
                                      logo: {
                                        null: [
                                          {
                                            type: "class",
                                            action: "add",
                                            value: "hidden",
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  layout: [["img"]],
                                  content: {
                                    img: {
                                      element: "img",
                                      bindings: {
                                        settings: {
                                          logo: {
                                            default: [
                                              {
                                                type: "attribute",
                                                action: "set",
                                                attribute: "src",
                                              },
                                            ],
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            "channel-arrows": {
                              layout: [
                                ["channel-arrow-up"],
                                ["channel-arrow-down"],
                              ],
                              content: {
                                "channel-arrow-up": {
                                  element: "a",
                                  behavior: [
                                    {
                                      events: ["click"],
                                      handlers: {
                                        playback: {
                                          action: "channelChange",
                                          direction: 1,
                                        },
                                      },
                                    },
                                  ],
                                },
                                "channel-arrow-down": {
                                  element: "a",
                                  behavior: [
                                    {
                                      events: ["click"],
                                      handlers: {
                                        playback: {
                                          action: "channelChange",
                                          direction: -1,
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            },
                          },
                        },
                        "playback-info": {
                          settings: {
                            title: null,
                            visible: null,
                            subtitle: null,
                            trickplay: null,
                            restricted: null,
                          },
                          behavior: [
                            {
                              events: ["TRICKPLAY_TOGGLE"],
                              handlers: {
                                playback: { action: "trickplayToggle" },
                              },
                            },
                          ],
                          bindings: {
                            settings: {
                              visible: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                                true: [
                                  {
                                    type: "class",
                                    action: "remove",
                                    value: "hidden",
                                  },
                                ],
                              },
                              trickplay: {
                                null: [
                                  {
                                    type: "class",
                                    action: "remove",
                                    value: "trickplay",
                                  },
                                ],
                                true: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "trickplay",
                                  },
                                ],
                              },
                              restricted: {
                                true: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                          layout: [["title"], ["subtitle"]],
                          content: {
                            title: {
                              bindings: {
                                settings: {
                                  title: {
                                    null: [
                                      {
                                        type: "class",
                                        action: "add",
                                        value: "hidden",
                                      },
                                      {
                                        type: "text",
                                        action: "set",
                                        value: "",
                                      },
                                    ],
                                    default: [
                                      {
                                        type: "class",
                                        action: "remove",
                                        value: "hidden",
                                      },
                                      { type: "text", action: "set" },
                                    ],
                                  },
                                },
                              },
                            },
                            subtitle: {
                              layout: [["subtitle", "genres"]],
                              content: {
                                subtitle: {
                                  bindings: {
                                    settings: {
                                      subtitle: {
                                        null: [
                                          {
                                            type: "class",
                                            action: "add",
                                            value: "hidden",
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  layout: [["subtitleItems"]],
                                  content: {
                                    subtitleItems: { component: "list" },
                                  },
                                },
                                genres: {
                                  bindings: {
                                    settings: {
                                      subtitle: {
                                        default: [
                                          {
                                            type: "class",
                                            action: "add",
                                            value: "hidden",
                                          },
                                        ],
                                        null: [
                                          {
                                            type: "class",
                                            action: "remove",
                                            value: "hidden",
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  layout: [["genre"]],
                                  content: { genre: { component: "list" } },
                                },
                              },
                            },
                          },
                        },
                        "playback-error": { component: "playback-error" },
                      },
                    },
                    "playback-schedule": {
                      collectionId: "epg-schedules",
                      behavior: [
                        {
                          events: ["COMPONENT_READY"],
                          handlers: { playback: { action: "scheduleReady" } },
                        },
                      ],
                    },
                    "next-schedule": {
                      collectionId: "epg-schedules",
                      behavior: [
                        {
                          events: ["COMPONENT_READY"],
                          handlers: {
                            playback: { action: "nextScheduleReady" },
                          },
                        },
                      ],
                    },
                    "playback-channels": {
                      collectionId: "epg-channels",
                      behavior: [
                        {
                          events: ["COMPONENT_SET"],
                          handlers: { playback: { action: "channelsSet" } },
                        },
                        {
                          events: ["COMPONENT_READY"],
                          handlers: { playback: { action: "channelsReady" } },
                        },
                      ],
                    },
                  },
                },
                player: {
                  collectionId: "prm-content",
                  settings: {
                    playing: !1,
                    concurrency: !1,
                    concurrencyData: {
                      status: "stop",
                      playbackResourceId: null,
                      skipOnError: !1,
                    },
                    playerParent: null,
                    buttons: null,
                    asset: {},
                  },
                  behavior: [
                    {
                      events: ["PLAYER_SET"],
                      handlers: { player: { action: "set" } },
                    },
                    {
                      events: ["PLAYER_LOAD"],
                      handlers: { player: { action: "load" } },
                    },
                    {
                      events: ["PLAYER_UNLOAD"],
                      handlers: { player: { action: "unload" } },
                    },
                    {
                      events: ["PLAYER_PLAY"],
                      handlers: { player: { action: "play" } },
                    },
                    {
                      events: ["PLAYER_UPDATE"],
                      handlers: { player: { action: "updateTrickPlay" } },
                    },
                    {
                      events: ["PLAYER_CLOSE"],
                      handlers: { player: { action: "close" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: { prm: { action: "ready" } },
                    },
                    {
                      events: ["PRM_FETCH"],
                      handlers: { prm: { action: "fetch" } },
                    },
                    {
                      events: ["PRM_SUCCESS"],
                      handlers: { prm: { action: "success" } },
                    },
                    {
                      events: ["PRM_RETRY_SOURCE"],
                      handlers: { prm: { action: "retrySource" } },
                    },
                    {
                      events: ["PRM_UPDATE_RESOURCE"],
                      handlers: { prm: { action: "updateResource" } },
                    },
                    {
                      events: ["PRM_CONCURRENCY_CHECK"],
                      handlers: { prm: { action: "concurrencyCheck" } },
                    },
                    {
                      events: ["PRM_CONCURRENCY_CHECK_INTERVAL"],
                      handlers: { prm: { action: "concurrencyCheckInterval" } },
                    },
                    {
                      events: ["PRM_CONCURRENCY_STOP"],
                      handlers: { prm: { action: "concurrencyStop" } },
                    },
                    {
                      events: ["PRM_CONCURRENCY_SUCCESS"],
                      handlers: { prm: { action: "concurrencySuccess" } },
                    },
                    {
                      events: ["PRM_DRM_PROXY_ERROR"],
                      handlers: { prm: { action: "drmProxyError" } },
                    },
                    {
                      events: ["PRM_CONCURRENCY_ERROR"],
                      handlers: { prm: { action: "concurrencyError" } },
                    },
                    {
                      events: ["EXIT_PAGE"],
                      handlers: { player: { action: "close" } },
                    },
                    {
                      events: ["PRM_RETRY"],
                      handlers: { prm: { action: "prmRetry" } },
                    },
                    {
                      events: ["LEFT"],
                      handlers: { player: { action: "skip", back: !0 } },
                    },
                    {
                      events: ["RIGHT"],
                      handlers: { player: { action: "skip" } },
                    },
                  ],
                },
                prompt: {
                  element: "a",
                  qa: "prompt",
                  settings: {
                    "no-wrap": null,
                    custom: null,
                    app: null,
                    image: null,
                    text: null,
                  },
                  behavior: [
                    {
                      events: ["click"],
                      handlers: { links: { action: "prompt" } },
                    },
                  ],
                  bindings: {
                    settings: {
                      custom: { default: [{ type: "html", action: "set" }] },
                      app: {
                        default: [
                          { type: "class", action: "remove", value: "hidden" },
                        ],
                        null: [
                          { type: "class", action: "add", value: "hidden" },
                        ],
                      },
                      "no-wrap": {
                        default: [
                          { type: "class", action: "add", value: "no-wrap" },
                        ],
                        null: [
                          { type: "class", action: "remove", value: "no-wrap" },
                        ],
                      },
                    },
                  },
                  layout: [["prompt-body"]],
                  content: {
                    "prompt-body": {
                      bindings: {
                        settings: { custom: { default: "noAppend" } },
                      },
                      layout: [["image", "text-container", "button"]],
                      content: {
                        image: {
                          bindings: {
                            settings: {
                              image: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                          layout: [["img"]],
                          content: {
                            img: {
                              element: "img",
                              bindings: {
                                settings: {
                                  image: {
                                    default: [
                                      {
                                        type: "attribute",
                                        action: "set",
                                        attribute: "src",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                        "text-container": {
                          bindings: {
                            settings: {
                              image: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "no-image",
                                  },
                                ],
                                default: [
                                  {
                                    type: "class",
                                    action: "remove",
                                    value: "no-image",
                                  },
                                ],
                              },
                            },
                          },
                          layout: [["title-container"], ["text"]],
                          content: {
                            "title-container": {
                              layout: [["title", "app"]],
                              content: {
                                title: {
                                  element: "span",
                                  bindings: {
                                    settings: {
                                      app: {
                                        default: [
                                          {
                                            type: "text",
                                            action: "set",
                                            value: "launch",
                                            translate: !0,
                                          },
                                        ],
                                      },
                                    },
                                  },
                                },
                                app: {
                                  element: "span",
                                  bindings: {
                                    settings: {
                                      app: {
                                        default: [
                                          {
                                            type: "text",
                                            action: "set",
                                            translate: !0,
                                          },
                                        ],
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            text: {
                              bindings: {
                                settings: {
                                  text: {
                                    default: [{ type: "text", action: "set" }],
                                  },
                                },
                              },
                            },
                          },
                        },
                        button: {
                          layout: [["btn"]],
                          content: {
                            btn: {
                              bindings: {
                                settings: {
                                  app: {
                                    default: [
                                      {
                                        type: "text",
                                        action: "set",
                                        value: "launch",
                                        translate: !0,
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                "detail-item": {
                  qa: "detail-item",
                  element: "a",
                  behavior: [
                    {
                      events: ["click"],
                      handlers: { links: { action: "navigate" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: {
                        series: { action: "getEpisode" },
                        image: {
                          action: "fallback",
                          containerId: "image-container",
                        },
                      },
                    },
                  ],
                  layout: [["image-container"], ["info-container"]],
                  content: {
                    "image-container": {
                      layout: [["image"], ["icon-play"], ["progress"]],
                      content: {
                        image: {
                          bindings: {
                            current: {
                              image: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "no-image",
                                  },
                                ],
                              },
                            },
                          },
                          layout: [["img"]],
                          content: {
                            img: {
                              qa: "detail-item-img",
                              element: "img",
                              bindings: {
                                current: {
                                  image: {
                                    default: [
                                      {
                                        type: "attribute",
                                        action: "set",
                                        attribute: "src",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                        "icon-play": {
                          qa: "detail-item-icon-play",
                          bindings: {
                            current: {
                              default: [
                                { type: "class", action: "add", value: "icon" },
                              ],
                              progress: {
                                0: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        progress: {
                          qa: "detail-item-progress",
                          layout: [["progress-bar"]],
                          content: {
                            "progress-bar": {
                              bindings: {
                                current: {
                                  progress: {
                                    default: [
                                      {
                                        type: "style",
                                        action: "add",
                                        style: "width",
                                        unit: "%",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                          bindings: {
                            current: {
                              progress: {
                                0: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                        },
                      },
                    },
                    "info-container": {
                      layout: [
                        ["number", "title"],
                        ["labels"],
                        ["description"],
                      ],
                      content: {
                        number: {
                          qa: "detail-item-number",
                          bindings: {
                            current: {
                              "episode-number": {
                                default: [{ type: "text", action: "set" }],
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        title: {
                          qa: "detail-item-title",
                          bindings: {
                            current: {
                              title: {
                                default: [{ type: "text", action: "set" }],
                              },
                            },
                          },
                        },
                        labels: {
                          layout: [["duration"], ["rating"]],
                          content: {
                            duration: {
                              qa: "detail-item-duration",
                              element: "label",
                              bindings: {
                                current: {
                                  duration: {
                                    null: [
                                      {
                                        type: "class",
                                        action: "add",
                                        value: "hidden",
                                      },
                                    ],
                                    default: [{ type: "text", action: "set" }],
                                  },
                                },
                              },
                            },
                            rating: {
                              qa: "detail-item-rating",
                              element: "label",
                              bindings: {
                                current: {
                                  rating: {
                                    null: [
                                      {
                                        type: "class",
                                        action: "add",
                                        value: "hidden",
                                      },
                                    ],
                                    default: [{ type: "text", action: "set" }],
                                  },
                                },
                              },
                            },
                          },
                        },
                        description: {
                          qa: "detail-item-description",
                          bindings: {
                            current: {
                              description: {
                                default: [{ type: "text", action: "set" }],
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                "detail-stripe": {
                  collectionId: "episodes",
                  settings: { page: "asset" },
                  bindings: {
                    current: {
                      null: [{ type: "class", action: "add", value: "hidden" }],
                      default: [
                        { type: "class", action: "remove", value: "hidden" },
                      ],
                    },
                  },
                  layout: [["scroll-wrapper"]],
                  content: {
                    "scroll-wrapper": {
                      qa: "detail-stripe-scroll-wrapper",
                      behavior: [
                        {
                          events: ["COMPONENT_READY", "COMPONENTS_READY"],
                          handlers: {
                            scroll: {
                              action: "setScroll",
                              scrollbars: !0,
                              vertical: !0,
                            },
                          },
                        },
                        {
                          events: ["SCROLL_END"],
                          handlers: { scroll: { action: "scrollEnd" } },
                        },
                      ],
                      layout: [["scroll"]],
                      content: { scroll: { layout: [["&detail-item"]] } },
                    },
                  },
                },
                "gop-poster": {
                  element: "a",
                  qa: "gop-poster",
                  behavior: [
                    {
                      events: ["mouseover"],
                      responsive: {
                        mouse: { component: { action: "zoom", state: "in" } },
                      },
                      handlers: { component: {} },
                    },
                    {
                      events: ["mouseleave"],
                      responsive: { mouse: { component: { action: "zoom" } } },
                      handlers: { component: {} },
                    },
                    {
                      events: ["click"],
                      handlers: { links: { action: "navigate" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: {
                        image: {
                          action: "fallback",
                          containerId: "poster-wrapper",
                        },
                      },
                    },
                  ],
                  bindings: {
                    current: {
                      default: [
                        { type: "class", action: "add", value: "poster" },
                      ],
                    },
                  },
                  layout: [["poster-wrapper"]],
                  content: {
                    "poster-wrapper": {
                      layout: [["no-image", "image"]],
                      content: {
                        "no-image": {
                          bindings: {
                            current: { image: { default: "noAppend" } },
                          },
                          layout: [["middle-row"]],
                          content: {
                            "middle-row": {
                              layout: [["label"]],
                              content: {
                                label: {
                                  qa: "gop-poster-label",
                                  element: "span",
                                  bindings: {
                                    current: {
                                      noImageTitle: {
                                        default: [
                                          { type: "text", action: "set" },
                                        ],
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                        image: {
                          bindings: {
                            current: { image: { null: "noAppend" } },
                          },
                          layout: [["img"]],
                          content: {
                            img: {
                              element: "img",
                              bindings: {
                                current: {
                                  image: {
                                    default: [
                                      {
                                        type: "attribute",
                                        action: "set",
                                        attribute: "src",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                gop: {
                  collectionId: "stripe",
                  behavior: [
                    {
                      events: ["COMPONENT_SET"],
                      handlers: { collection: { action: "fetch" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: {
                        component: { action: "stripeReady" },
                        scroll: { action: "scrollEndGop" },
                      },
                    },
                  ],
                  bindings: {
                    settings: {
                      responseType: {
                        default: [{ type: "class", action: "add" }],
                      },
                      orientation: {
                        default: [{ type: "class", action: "add" }],
                      },
                      style: { default: [{ type: "class", action: "add" }] },
                      effect: { default: [{ type: "class", action: "add" }] },
                      size: { default: [{ type: "class", action: "add" }] },
                      mode: { default: [{ type: "class", action: "add" }] },
                    },
                    current: {
                      null: [{ type: "class", action: "add", value: "hidden" }],
                      default: [
                        { type: "class", action: "remove", value: "hidden" },
                        { type: "class", action: "add", value: "stripe" },
                      ],
                    },
                  },
                  layout: [["title-wrapper"], ["scroll-wrapper"]],
                  content: {
                    "title-wrapper": {
                      layout: [["title"]],
                      content: {
                        title: {
                          element: "h4",
                          bindings: {
                            settings: {
                              title: {
                                default: [
                                  {
                                    type: "text",
                                    action: "set",
                                    value: "title",
                                    translate: !0,
                                  },
                                ],
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                        },
                      },
                    },
                    "scroll-wrapper": {
                      qa: "gop-scroll",
                      behavior: [
                        {
                          events: ["COMPONENT_READY"],
                          handlers: {
                            scroll: {
                              action: "setScroll",
                              vertical: !0,
                              disableWheel: !0,
                            },
                          },
                        },
                      ],
                      layout: [["scroll"]],
                      content: { scroll: { layout: [["&gop-poster"]] } },
                    },
                  },
                },
                poster: {
                  element: "a",
                  behavior: [
                    {
                      events: ["mouseover"],
                      responsive: {
                        mouse: { component: { action: "zoom", state: "in" } },
                      },
                      handlers: { component: {} },
                    },
                    {
                      events: ["mouseleave"],
                      responsive: { mouse: { component: { action: "zoom" } } },
                      handlers: { component: {} },
                    },
                    {
                      events: ["click"],
                      handlers: { links: { action: "navigate" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: {
                        image: {
                          action: "fallback",
                          containerId: "poster-wrapper",
                        },
                      },
                    },
                  ],
                  layout: [["poster-wrapper"]],
                  content: {
                    "poster-wrapper": {
                      layout: [
                        ["number", "no-image", "image", "progress", "info"],
                      ],
                      content: {
                        number: {
                          bindings: {
                            current: {
                              number: {
                                default: [{ type: "text", action: "set" }],
                              },
                            },
                          },
                        },
                        "no-image": {
                          bindings: {
                            current: {
                              isStack: {
                                default: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "stack",
                                  },
                                ],
                              },
                              image: {
                                default: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                          layout: [["middle-row"]],
                          content: {
                            "middle-row": {
                              layout: [["icon", "label"]],
                              content: {
                                icon: {
                                  element: "i",
                                  bindings: {
                                    settings: {
                                      "footer-icon": {
                                        default: [
                                          { type: "class", action: "add" },
                                        ],
                                      },
                                    },
                                  },
                                },
                                label: {
                                  element: "span",
                                  bindings: {
                                    current: {
                                      noImageTitle: {
                                        default: [
                                          { type: "text", action: "set" },
                                        ],
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                        image: {
                          bindings: {
                            current: {
                              image: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                          layout: [["img"]],
                          content: {
                            img: {
                              element: "img",
                              bindings: {
                                current: {
                                  image: {
                                    default: [
                                      {
                                        type: "attribute",
                                        action: "set",
                                        attribute: "src",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                        progress: {
                          layout: [["progress-bar"]],
                          content: {
                            "progress-bar": {
                              bindings: {
                                current: {
                                  progress: {
                                    default: [
                                      {
                                        type: "style",
                                        action: "add",
                                        style: "width",
                                        unit: "%",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                          bindings: {
                            settings: {
                              progress: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "invisible",
                                  },
                                ],
                              },
                            },
                            current: {
                              progress: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                              progressBar: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                                default: [
                                  {
                                    type: "class",
                                    action: "remove",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        info: {
                          layout: [["row1", "row2", "row3"]],
                          content: {
                            row1: {
                              layout: [["title", "releasedYear"]],
                              content: {
                                title: {
                                  bindings: {
                                    current: {
                                      title: {
                                        default: [
                                          { type: "text", action: "set" },
                                        ],
                                      },
                                    },
                                  },
                                },
                                releasedYear: {
                                  bindings: {
                                    current: {
                                      releasedYear: {
                                        default: [
                                          { type: "text", action: "set" },
                                        ],
                                        null: [
                                          {
                                            type: "class",
                                            action: "add",
                                            value: "hidden",
                                          },
                                        ],
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            row2: {
                              layout: [["subtitle", "genre"]],
                              content: {
                                subtitle: {
                                  bindings: {
                                    current: {
                                      subtitle: {
                                        default: [
                                          { type: "text", action: "set" },
                                        ],
                                        null: [
                                          {
                                            type: "class",
                                            action: "add",
                                            value: "hidden",
                                          },
                                        ],
                                      },
                                    },
                                  },
                                },
                                genre: {
                                  bindings: {
                                    current: {
                                      genre: {
                                        default: [
                                          { type: "text", action: "set" },
                                          {
                                            type: "class",
                                            action: "remove",
                                            value: "hidden",
                                          },
                                        ],
                                        null: [
                                          {
                                            type: "class",
                                            action: "add",
                                            value: "hidden",
                                          },
                                        ],
                                      },
                                      subtitle: {
                                        default: [
                                          {
                                            type: "class",
                                            action: "add",
                                            value: "hidden",
                                          },
                                        ],
                                        null: [
                                          {
                                            type: "class",
                                            action: "remove",
                                            value: "hidden",
                                          },
                                        ],
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            row3: {
                              bindings: {
                                current: {
                                  description: {
                                    default: [{ type: "text", action: "set" }],
                                    null: [
                                      {
                                        type: "class",
                                        action: "add",
                                        value: "hidden",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                "simple-stripe": {
                  collectionId: "simple",
                  settings: { title: "title" },
                  bindings: {
                    current: {
                      null: [{ type: "class", action: "add", value: "hidden" }],
                    },
                  },
                  layout: [["title"], ["scroll-wrapper"]],
                  content: {
                    title: {
                      element: "h4",
                      bindings: {
                        settings: {
                          title: {
                            default: [
                              {
                                type: "text",
                                action: "set",
                                value: "title",
                                translate: !0,
                              },
                            ],
                            null: [
                              { type: "class", action: "add", value: "hidden" },
                            ],
                          },
                        },
                      },
                    },
                    "scroll-wrapper": {
                      layout: [["scroll"]],
                      content: { scroll: { layout: [["&item"]] } },
                    },
                  },
                },
                stripe: {
                  qa: "stripe",
                  collectionId: "stripe",
                  behavior: [
                    {
                      events: ["COMPONENT_SET"],
                      handlers: { collection: { action: "fetch" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: {
                        component: { action: "stripeReady" },
                        scroll: { action: "setArrows" },
                      },
                    },
                  ],
                  bindings: {
                    settings: {
                      responseType: {
                        default: [{ type: "class", action: "add" }],
                      },
                      orientation: {
                        default: [{ type: "class", action: "add" }],
                      },
                      style: { default: [{ type: "class", action: "add" }] },
                      effect: { default: [{ type: "class", action: "add" }] },
                      header: {
                        default: [
                          {
                            type: "class",
                            action: "add",
                            value: "have-header",
                          },
                        ],
                      },
                      size: { default: [{ type: "class", action: "add" }] },
                      mode: { default: [{ type: "class", action: "add" }] },
                      bigInfo: {
                        default: [
                          { type: "class", action: "add", value: "expanded" },
                        ],
                      },
                      info: {
                        true: [
                          { type: "class", action: "add", value: "info-all" },
                        ],
                        selected: [
                          { type: "class", action: "add", value: "info" },
                        ],
                      },
                    },
                    current: {
                      null: [{ type: "class", action: "add", value: "hidden" }],
                      default: [
                        { type: "class", action: "remove", value: "hidden" },
                      ],
                    },
                  },
                  layout: [
                    ["title-wrapper"],
                    ["stripe-header", "scroll-wrapper"],
                  ],
                  content: {
                    "title-wrapper": {
                      layout: [["title", "seeAll"]],
                      content: {
                        title: {
                          element: "h4",
                          bindings: {
                            settings: {
                              title: {
                                default: [
                                  {
                                    type: "text",
                                    action: "set",
                                    value: "title",
                                    translate: !0,
                                  },
                                ],
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        seeAll: {
                          element: "a",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: { links: { action: "seeAll" } },
                            },
                          ],
                          bindings: {
                            settings: {
                              seeAllButton: {
                                true: [
                                  {
                                    type: "text",
                                    action: "set",
                                    value: "seeAll",
                                    translate: !0,
                                  },
                                ],
                                false: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                          },
                        },
                      },
                    },
                    "stripe-header": {
                      element: "a",
                      behavior: [
                        {
                          events: ["click"],
                          handlers: { links: { action: "seeAll" } },
                        },
                      ],
                      layout: [["middle-row"]],
                      content: {
                        "middle-row": {
                          layout: [["icon", "label"]],
                          content: {
                            icon: {
                              element: "i",
                              bindings: {
                                settings: {
                                  headerIcon: {
                                    default: [{ type: "class", action: "add" }],
                                  },
                                  headerSvg: {
                                    default: [
                                      {
                                        type: "class",
                                        action: "add",
                                        value: "svg",
                                      },
                                      { type: "text", action: "set" },
                                    ],
                                  },
                                },
                              },
                            },
                            label: {
                              layout: [["label-child"]],
                              content: {
                                "label-child": {
                                  bindings: {
                                    settings: {
                                      header: {
                                        default: [
                                          {
                                            type: "text",
                                            action: "set",
                                            value: "header",
                                            translate: !0,
                                          },
                                        ],
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                    "scroll-wrapper": {
                      behavior: [
                        {
                          events: ["COMPONENT_READY"],
                          handlers: {
                            scroll: {
                              action: "setScroll",
                              horizontal: !0,
                              disableWheel: !0,
                            },
                          },
                        },
                        {
                          events: ["SCROLL_OPTIMIZED", "SCROLL_END"],
                          handlers: { scroll: { action: "setArrows" } },
                        },
                      ],
                      layout: [["scroll"], ["arrow-left", "arrow-right"]],
                      content: {
                        "arrow-left": {
                          element: "a",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: {
                                scroll: { action: "btn", direction: "prev" },
                              },
                            },
                          ],
                        },
                        "arrow-right": {
                          element: "a",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: {
                                scroll: { action: "btn", direction: "next" },
                              },
                            },
                          ],
                        },
                        scroll: { layout: [["&poster"]] },
                      },
                    },
                  },
                },
                "super-hero": {
                  qa: "superHeroStripe",
                  collectionId: "super-hero",
                  bindings: {
                    settings: {
                      showTitle: {
                        default: [
                          { type: "class", action: "add", value: "title" },
                        ],
                      },
                      showInfo: {
                        true: [
                          { type: "class", action: "add", value: "info-all" },
                        ],
                        selected: [
                          { type: "class", action: "add", value: "info" },
                        ],
                      },
                    },
                    current: {
                      null: [{ type: "class", action: "add", value: "hidden" }],
                      default: [
                        { type: "class", action: "remove", value: "hidden" },
                      ],
                    },
                  },
                  behavior: [
                    {
                      events: ["COMPONENT_SET"],
                      handlers: { collection: { action: "fetch" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: { component: { action: "stripeReady" } },
                    },
                    {
                      events: ["PAGE_SCROLL"],
                      handlers: { scroll: { action: "superhero" } },
                    },
                  ],
                  layout: [["scroll-wrapper"]],
                  content: {
                    "scroll-wrapper": {
                      behavior: [
                        {
                          events: ["COMPONENT_READY"],
                          handlers: {
                            scroll: {
                              action: "setScroll",
                              scrollbars: !1,
                              horizontal: !0,
                              disableWheel: !0,
                              snap: ".super-item",
                              momentum: !1,
                              bounce: !0,
                            },
                            component: { action: "restoreSuperheroState" },
                          },
                        },
                        {
                          events: ["SCROLL_END"],
                          handlers: { scroll: { action: "startWrap" } },
                        },
                        {
                          events: ["SCROLL_START"],
                          handlers: { scroll: { action: "stopWrap" } },
                        },
                        {
                          events: ["SCROLL_SET", "SCROLL_READY"],
                          handlers: { component: { action: "selectedDot" } },
                        },
                        {
                          events: ["INTERVAL"],
                          handlers: { scroll: { action: "auto" } },
                        },
                      ],
                      layout: [["scroll"], ["left", "right"], ["dots"]],
                      content: {
                        left: {
                          element: "a",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: {
                                scroll: {
                                  action: "btnItem",
                                  direction: "prev",
                                },
                              },
                            },
                          ],
                          layout: [["gradient"]],
                          content: { gradient: { element: "span" } },
                        },
                        right: {
                          element: "a",
                          behavior: [
                            {
                              events: ["click"],
                              handlers: {
                                scroll: {
                                  action: "btnItem",
                                  direction: "next",
                                },
                              },
                            },
                          ],
                          layout: [["gradient"]],
                          content: { gradient: { element: "span" } },
                        },
                        scroll: { layout: [["&super-item"]] },
                        dots: {
                          layout: [["&dot"]],
                          content: {
                            dot: {
                              element: "a",
                              behavior: [
                                {
                                  events: ["click"],
                                  handlers: { scroll: { action: "btnIndex" } },
                                },
                              ],
                            },
                          },
                        },
                      },
                    },
                  },
                },
                "super-item": {
                  element: "a",
                  behavior: [
                    {
                      events: ["click"],
                      handlers: { links: { action: "navigate" } },
                    },
                    {
                      events: ["COMPONENT_READY"],
                      handlers: {
                        image: {
                          action: "fallback",
                          containerId: "image",
                          property: "image",
                          image: "picture",
                        },
                      },
                    },
                  ],
                  layout: [["image", "info-container"]],
                  content: {
                    image: {
                      layout: [["picture"]],
                      content: {
                        picture: {
                          bindings: {
                            current: {
                              image: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "no-image",
                                  },
                                ],
                              },
                            },
                          },
                          layout: [["img"]],
                          content: {
                            img: {
                              element: "img",
                              behavior: [
                                {
                                  events: [
                                    "COMPONENT_SET",
                                    "BREAKPOINT_CHANGED",
                                  ],
                                  handlers: { image: { action: "breakpoint" } },
                                },
                              ],
                              bindings: {
                                current: {
                                  image: {
                                    default: [
                                      {
                                        type: "attribute",
                                        action: "set",
                                        attribute: "src-default",
                                      },
                                    ],
                                  },
                                  "image-phone": {
                                    default: [
                                      {
                                        type: "attribute",
                                        action: "set",
                                        attribute: "src-small",
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                    "info-container": {
                      layout: [["title"], ["description"], ["more"]],
                      content: {
                        title: {
                          bindings: {
                            settings: {
                              showTitle: {
                                null: [
                                  {
                                    type: "class",
                                    action: "add",
                                    value: "hidden",
                                  },
                                ],
                                default: [
                                  {
                                    type: "class",
                                    action: "remove",
                                    value: "hidden",
                                  },
                                ],
                              },
                            },
                            current: {
                              title: {
                                default: [{ type: "text", action: "set" }],
                              },
                            },
                          },
                        },
                        description: {
                          bindings: {
                            current: {
                              description: {
                                default: [{ type: "text", action: "set" }],
                              },
                            },
                          },
                        },
                        more: {
                          element: "button",
                          layout: [["icon"], ["label"]],
                          content: {
                            icon: {
                              element: "i",
                              bindings: {
                                current: {
                                  icon: {
                                    default: [{ type: "class", action: "add" }],
                                  },
                                },
                              },
                            },
                            label: {
                              element: "span",
                              bindings: {
                                current: {
                                  more: {
                                    default: [
                                      {
                                        type: "text",
                                        action: "set",
                                        translate: !0,
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              constants: {
                analytics: {
                  PARAMS_IDS: {
                    EVENT_ID: 10,
                    EVENT_TIME: 11,
                    APPLICATION_ID: 12,
                    OBJECT_TYPE_ID: 13,
                    OBJECT_ID: 14,
                    PROTOCOL_ID: 15,
                    EVENT_VALUE_ID: 16,
                    PLAYER_STATUS_ID: 17,
                    TRICKPLAY_ID: 18,
                    LOG_LEVEL_ID: 19,
                    LOG_VALUE: 20,
                    DURATION: 21,
                    SUB_OBJECT_ID: 22,
                    STRIPE_ID: 23,
                    PAGE_ID: 24,
                    PAGE_FROM: 25,
                    STRIPE_FROM: 26,
                  },
                  PARAMS_VALUES: {
                    APPLICATION_ID: { Minerva: 1 },
                    OBJECT_TYPE_ID: {
                      TV_CHANNEL: 1,
                      "PPV Channel": 2,
                      TV_SCHEDULE: 3,
                      "CUTV (older cutv ASQ based)": 3,
                      Youtube: 4,
                      Picasa: 5,
                      Metachannels: 6,
                      ASSET: 7,
                      NDVR: 8,
                      LDVR: 9,
                      DLNA: 10,
                      Widget: 11,
                      RESTART_TV: 12,
                      TRAILER: 13,
                      "VOD Bundle": 14,
                    },
                    PROTOCOL_ID: {
                      Http: 1,
                      HLS: 2,
                      RTSP: 3,
                      "DVB-T": 4,
                      "DVB-C": 5,
                      "DVB-S": 6,
                      "DVB-S2": 7,
                      ATSCC: 8,
                      SS: 9,
                      DLNA: 10,
                      "Multicast Channel": 11,
                      "ISDB-T": 12,
                    },
                    EVENT_VALUE_ID: {
                      Clean: 1,
                      Dirty: 2,
                      Unused: 3,
                      autodeleted: 4,
                      usercommand: 5,
                    },
                    PLAYER_STATUS_ID: { playbackCompleted: 1, userCommand: 2 },
                    TRICKPLAY_ID: { FF: 1, RW: 2, Skip: 3, PAUSE: 4, SEEK: 5 },
                    LOG_LEVEL_ID: {
                      Error: 1,
                      Warning: 2,
                      Info: 3,
                      Fatal: 4,
                      Debug: 5,
                    },
                    EVENT_ID: {
                      ENTER_EPG: 1,
                      EXIT_EPG: 2,
                      ENTER_WEB_VOD: 3,
                      EXIT_WEB_VOD: 4,
                      TUNE_IN: 51,
                      TUNE_OUT: 52,
                      LIVE_TRICKPLAY: 53,
                      PURCHASE_VOD: 41,
                      START_PLAYING: 31,
                      ASSET_TRICKPLAY: 35,
                      STOP_PLAYING: 36,
                      START_RECORDING: 60,
                      STOP_RECORDING: 61,
                      DELETE_RECORDING: 74,
                      ADD_BOOKMARK: 76,
                      SEARCH_RESULT: 81,
                      SEARCH_VOD: 82,
                      SEARCH_EPG: 84,
                      LOGIN_SUCCESS: 101,
                      LOGOUT: 102,
                    },
                  },
                },
                "content-types": {
                  asset: "ASSET",
                  channel: "CHANNEL",
                  season: "SEASON",
                  series: "SERIES",
                  episode: "EPISODE",
                  movie: "MOVIE",
                  trailer: "TRAILER",
                  tv_channel: "TV_CHANNEL",
                  tv_schedule: "TV_SCHEDULE",
                  vod_series: "VOD_SERIES",
                  vod_season: "VOD_SEASON",
                },
                "drm-types": {
                  fairplay: "fairplay",
                  playready: "playready",
                  widevine: "widevine",
                },
                media: {
                  touch: "(pointer: coarse)",
                  mouse: "(pointer: fine)",
                  portrait: "(orientation: portrait)",
                  landscape: "(orientation: landscape)",
                  small: "(max-width: 899px) and (max-height: 899px)",
                  "small-portrait":
                    "(max-width: 899px) and (max-height: 899px) and (orientation: portrait)",
                  "small-landscape":
                    "(max-width: 899px) and (max-height: 899px) and (min-width: 450px) and (orientation: landscape)",
                  medium:
                    "(min-width: 900px) and (max-width: 1439px), (min-height: 900px) and (max-height: 1439px) and (max-width: 1439px)",
                  "medium-portrait":
                    "(min-width: 900px) and (max-width: 1439px) and (orientation: portrait), (min-height: 900px) and (max-height: 1439px) and (max-width: 1439px) and (orientation: portrait)",
                  "medium-landscape":
                    "(min-width: 900px) and (max-width: 1439px) and (orientation: landscape), (min-height: 900px) and (max-height: 1439px) and (max-width: 1439px) and (orientation: landscape)",
                  mobile:
                    "(max-width: 1439px), (max-height: 1439px) and (max-width: 1439px)",
                  large:
                    "(min-width: 1440px) and (max-width: 1920px), (min-height: 1440px) and (max-height: 1920px) and (max-width: 1920px)",
                  uhd:
                    "(min-width: 1921px) and (max-width: 3840px), (min-height: 1921px) and (max-height: 3840px) and (max-width: 3840px)",
                  retina:
                    "only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)",
                },
                sizes: {
                  asset: {
                    normal: { width: 1920, height: 1080 },
                    phone: { width: 712, height: 1137 },
                  },
                  "asset-poster": {
                    normal: { width: 450, height: 670 },
                    phone: { width: 100, height: 200 },
                  },
                  "super-hero": {
                    normal: { width: 1920, height: 1080 },
                    phone: { width: 712, height: 1137 },
                  },
                  channel: { width: 60, height: 60 },
                  "gop-height": {
                    visible: {
                      "(max-height: 1080px)": 3,
                      "(min-height: 1081px) and (max-height: 1920px)": 8,
                      "(min-height: 1081px) and (max-height: 1279px)": 6,
                      "(min-height: 1921px)": 12,
                    },
                  },
                  "channel-asset": { width: 160, height: 160 },
                  schedule: { width: 168, height: 93 },
                  season: { width: 1920, height: 1080 },
                  episode: {
                    width: 400,
                    height: 220,
                    visible: {
                      "(max-height: 1080px)": 5,
                      "(max-width: 700px) and (max-height: 900px)": 7,
                      "(max-width: 700px) and (min-height: 901px)": 10,
                      "(min-height: 1081px) and (max-height: 1920px)": 15,
                      "(min-height: 1921px)": 15,
                    },
                  },
                },
                "stripe-grid-sizes": {
                  portrait: {
                    large: {
                      large: { count: 7, screen: 90 },
                      medium: { count: 4, screen: 90 },
                      small: { count: 2, screen: 80 },
                      "small-landscape": { count: 3, screen: 80 },
                    },
                    medium: {
                      large: { count: 8, screen: 81.5 },
                      medium: { count: 6, screen: 83 },
                      small: { count: 3, screen: 94.4 },
                      "small-landscape": { count: 5, screen: 88.5 },
                    },
                    small: {
                      large: { count: 9, screen: 90 },
                      medium: { count: 6, screen: 90 },
                      small: { count: 3, screen: 80 },
                      "small-landscape": { count: 4, screen: 80 },
                    },
                  },
                  landscape: {
                    large: {
                      large: { count: 3, screen: 80 },
                      medium: { count: 2, screen: 80 },
                      small: { count: 1, screen: 70 },
                      "small-landscape": { count: 1.5, screen: 70 },
                    },
                    medium: {
                      large: { count: 3.2, screen: 80 },
                      medium: { count: 2.2, screen: 80 },
                      small: { count: 1.2, screen: 70 },
                      "small-landscape": { count: 1.7, screen: 70 },
                    },
                    small: {
                      large: { count: 3.4, screen: 80 },
                      medium: { count: 2.4, screen: 80 },
                      small: { count: 1.4, screen: 70 },
                      "small-landscape": { count: 1.9, screen: 70 },
                    },
                  },
                  square: {
                    large: {
                      large: { count: 7, screen: 90 },
                      medium: { count: 4, screen: 90 },
                      small: { count: 2, screen: 80 },
                      "small-landscape": { count: 3, screen: 80 },
                    },
                    medium: {
                      large: { count: 8, screen: 90 },
                      medium: { count: 5, screen: 90 },
                      small: { count: 2.5, screen: 80 },
                      "small-landscape": { count: 3.5, screen: 80 },
                    },
                    small: {
                      large: { count: 9, screen: 90 },
                      medium: { count: 6, screen: 90 },
                      small: { count: 3, screen: 80 },
                      "small-landscape": { count: 4, screen: 80 },
                    },
                  },
                },
                "stripe-ratio": { portrait: 1.5, landscape: 0.5625, square: 1 },
                "stripe-sizes": {
                  portrait: {
                    large: {
                      large: { count: 6, screen: 87 },
                      medium: { count: 4, screen: 87 },
                      small: { count: 1.9, screen: 78.5 },
                      "small-landscape": { count: 2.9, screen: 78.5 },
                    },
                    medium: {
                      large: { count: 7, screen: 87 },
                      medium: { count: 5, screen: 87 },
                      small: { count: 2.2, screen: 78.5 },
                      "small-landscape": { count: 3.2, screen: 78.5 },
                    },
                    small: {
                      large: { count: 8.5, screen: 87 },
                      medium: { count: 6, screen: 87 },
                      small: { count: 2.8, screen: 78.5 },
                      "small-landscape": { count: 3.8, screen: 78.5 },
                    },
                  },
                  landscape: {
                    large: {
                      large: { count: 3, screen: 82 },
                      medium: { count: 2, screen: 82 },
                      small: { count: 1, screen: 87 },
                      "small-landscape": { count: 1.5, screen: 87 },
                    },
                    medium: {
                      large: { count: 3.2, screen: 82 },
                      medium: { count: 2.2, screen: 82 },
                      small: { count: 1.2, screen: 87 },
                      "small-landscape": { count: 1.7, screen: 87 },
                    },
                    small: {
                      large: { count: 3.4, screen: 82 },
                      medium: { count: 2.4, screen: 82 },
                      small: { count: 1.4, screen: 87 },
                      "small-landscape": { count: 1.9, screen: 87 },
                    },
                  },
                  square: {
                    large: {
                      large: { count: 6, screen: 87 },
                      medium: { count: 4, screen: 87 },
                      small: { count: 1.9, screen: 78.5 },
                      "small-landscape": { count: 2.9, screen: 78.5 },
                    },
                    medium: {
                      large: { count: 7, screen: 87 },
                      medium: { count: 5, screen: 87 },
                      small: { count: 2.2, screen: 78.5 },
                      "small-landscape": { count: 3.2, screen: 78.5 },
                    },
                    small: {
                      large: { count: 8.5, screen: 87 },
                      medium: { count: 6, screen: 87 },
                      small: { count: 2.8, screen: 78.5 },
                      "small-landscape": { count: 3.8, screen: 78.5 },
                    },
                  },
                },
              },
              locales: {
                eng: {
                  asset: {
                    "duration-title": "Duration:",
                    cast: "Cast:",
                    directors: "Directors:",
                    genre: "Genre:",
                    "other-sources": "Other Ways to Watch:",
                  },
                  date: {
                    days: {
                      1: "Monday",
                      2: "Tuesday",
                      3: "Wednesday",
                      4: "Thursday",
                      5: "Friday",
                      6: "Saturday",
                      7: "Sunday",
                    },
                    months: {
                      1: "January",
                      2: "February",
                      3: "March",
                      4: "April",
                      5: "May",
                      6: "June",
                      7: "July",
                      8: "August",
                      9: "September",
                      10: "October",
                      11: "November",
                      12: "December",
                    },
                  },
                  "epg-dropdown": {
                    "all-channels": "All Channels",
                    title: "Channel Lists",
                  },
                  index: {
                    loading: "Loading, please wait...",
                    "loading-short": "Loading...",
                    username: "Username",
                    password: "Password",
                    login: "Log In",
                    "login-cognito": "Log In",
                    "login-sso": "Log In",
                    logout: "Logout",
                    signup: "Sign Up",
                    home: "Home",
                    profile: "My Profile",
                    settings: "Settings",
                    "live-tv": "Live TV",
                    search: "Search",
                    "search-title": "Search title ...",
                    play: "Play",
                    pause: "Pause",
                    stop: "Stop",
                    audio: "Audio",
                    volume: "Volume",
                    subtitles: "Subtitles",
                    subtitlesCC: "Subtitles/CC",
                    fullscreen: "Fullscreen",
                    info: "Info",
                    watch: "Watch",
                    rent: "Rent",
                    "rent-for": "Rent for",
                    restart: "Restart",
                    resume: "Resume",
                    episodes: "Episodes",
                    trailer: "Trailer",
                    "watch-trailer": "Watch Trailer",
                    lock: "Lock",
                    unlock: "Unlock",
                    confirm: "Confirm",
                    ok: "OK",
                    cancel: "Cancel",
                    "pin-text": "PIN",
                    emptyPin: "PIN cannot be empty",
                    wrongPin: "Wrong PIN",
                    yes: "Yes",
                    no: "No",
                    dismiss: "Dismiss",
                    details: "Details",
                    hour: "h",
                    min: "min",
                    day: "day",
                    days: "days",
                    today: "Today",
                    yesterday: "Yesterday",
                    tomorrow: "Tomorrow",
                    "no-content": "Content not available.",
                    more: "More Info",
                    "nav-more": "More",
                    season: "Season",
                    episode: "Episode",
                    "season-short": "S",
                    "episode-short": "E",
                    seeAll: "See All",
                    noContent:
                      "Sorry, no titles are currently available for this selection",
                    restrictedContent: "Restricted content",
                    "restricted-page":
                      "The current page is under Parental control.",
                    deviceId: "Device ID: ",
                    launch: "Launch",
                  },
                  "login-footer": {
                    terms: "Terms of Use",
                    help: "Help",
                    privacy: "Privacy Policy",
                  },
                  "login-form": {
                    checkbox: "Remember me",
                    "error-credentials":
                      "The information entered was incorrect. Please try again.",
                    "error-customer":
                      "Your device is already assigned to another customer. Please call your service provider to resolve this issue.",
                    "error-device":
                      "There is a problem accessing your account from this device. Please try again or contact customer support.",
                    "error-device-max":
                      "You've reached the maximum number of devices allowed on your account. Contact your service provider for further details.",
                    "error-location":
                      "Unable to login: This service is not available from your location.",
                    "error-account":
                      "Your account is inactive. Please call your service provider to reactivate your account.",
                    "error-account2":
                      "Unable to login: Account error, please contact customer support.",
                    "error-account3":
                      "Unable to login: Account is inactive, please contact customer support.",
                    "error-connection":
                      "Connectivity problem. Unable to reach the authentication server. Please try again or contact customer support.",
                    "error-server": "Generic server error.",
                  },
                  navbar: {
                    vod: "On Demand",
                    series: "Series",
                    tv: "TV Programs",
                    fav: "My List",
                  },
                  "playback-error": {
                    restrictedContent:
                      "Unlock or click up or down to change the channel",
                    restrictedContentTitle: "Restricted Content",
                    prmNotAllowed:
                      "This playback is not available on your device.",
                    prmConnectivity:
                      "Connectivity Problem. Please try to play the content again later.",
                    errorTitle: "This content can't be played.",
                    prmMaxStreams:
                      "This video cannot be played, because you have reached the limit of active video streams for this account.",
                    prmMaxStreamsText:
                      "This video cannot be played, because you have reached the limit of active video streams for this account. Stop at least one device and try again.",
                    prmMaxStreamsDevices:
                      "This video cannot be played, because you have reached the limit of {1} active video streams for this account.\nThe following devices are currently active:\n {0}\nPlease stop at least one device and try again.",
                    prmMaxStreamsDevicesOne:
                      "This video cannot be played, because you have reached the limit of One active video stream for this account.\nThe following device is currently active:\n {0}\nPlease stop the device and try again.",
                    prmDeviceType:
                      "This content is not available to this device. (20213)",
                    prmGeoBlocked:
                      "Sorry, this content is not available in your current location",
                    prmMissingService:
                      "This content is not available to you because you are not subscribed to this service. (20223)",
                    prmNetworkType:
                      "This content is not available on your current client network type. (20233)",
                    playbackFailed:
                      "There is a problem with playback of this content.",
                    playbackFailedCas:
                      "This content is not available on your device. Please contact your service provider.",
                  },
                  register: { noaccount: "Don't have account?" },
                  parental: {
                    parentalTitle: "Unlock Parental Control",
                    parentalText: "Enter PIN to Unlock",
                  },
                  purchase: {
                    notFound: "Missing content",
                    limitExceeded:
                      "Available allowance is not sufficient for renting this content.",
                    billingDisabled:
                      "Billing system error, please try again later.",
                    casError:
                      "This content is not available on your device. Please contact your service provider.",
                    "rent-text":
                      "Are you sure you want to buy this title for {0} for {1}?",
                    "rent-text-pin":
                      "Enter your PIN to buy this title for {0} for {1}",
                  },
                  adult: { title: "Adult", header: "Adult" },
                  "all-titles": { title: "All Titles", header: "All Titles" },
                  "cast-stripe": { title: "Cast:" },
                  "continue-watching": {
                    title: "Continue Watching",
                    header: "Continue Watching",
                  },
                  "directors-stripe": { title: "Directors:" },
                  favorites: { title: "Favorites", header: "Favorites" },
                  free: { title: "Free", header: "Free" },
                  "genre-stripe": { title: "Genre:" },
                  "just-for-you": { title: "Favorites", header: "Favorites" },
                  kids: { title: "Kids", header: "Kids" },
                  "last-chance-to-watch": {
                    title: "Last Chance To Watch",
                    header: "Last Chance To Watch",
                  },
                  "live-tv": { title: "Live TV", header: "Live TV" },
                  "most-watched-on-demand": {
                    title: "Most Watched On Demand",
                    header: "Most Watched On Demand",
                  },
                  "most-watched-on-tv": {
                    title: "Most Watched On TV",
                    header: "Most Watched On TV",
                  },
                  movies: { title: "Movies", header: "Movies" },
                  "on-demand": {
                    title: "On Demand Catalog",
                    header: "On Demand Catalog",
                  },
                  "other-sources": {
                    title: "Other Ways to Watch",
                    header: "Other Ways to Watch",
                  },
                  rentals: { title: "Rentals", header: "Rentals" },
                  series: { title: "Series", header: "Series" },
                  "similar-titles": {
                    title: "Similar Titles",
                    header: "Similar Titles",
                  },
                  "tv-search": { title: "Live TV", header: "Live TV" },
                  tv: { title: "TV", header: "TV" },
                  "vod-search": {
                    title: "On Demand Movies and Shows",
                    header: "On Demand Movies and Shows",
                  },
                },
                spa: {
                  asset: {
                    "duration-title": "Duración:",
                    cast: "Elenco:",
                    directors: "Directores:",
                    genre: "Género:",
                    "other-sources": "Miralo también en",
                  },
                  date: {
                    days: {
                      1: "Lunes",
                      2: "Martes",
                      3: "Miércoles",
                      4: "Jueves",
                      5: "Viernes",
                      6: "Sábado",
                      7: "Domingo",
                    },
                    months: {
                      1: "Enero",
                      2: "Febrero",
                      3: "Marzo",
                      4: "Abril",
                      5: "Mayo",
                      6: "Junio",
                      7: "Julio",
                      8: "Agosto",
                      9: "Septiembre",
                      10: "Octubre",
                      11: "Noviembre",
                      12: "Diciembre",
                    },
                  },
                  "epg-dropdown": {
                    "all-channels": "Todos los canales",
                    title: "Canal Listas",
                  },
                  index: {
                    loading: "Cargando por favor espere…",
                    "loading-short": "Cargando…",
                    username: "Nombre de usuario",
                    password: "Contraseña",
                    login: "Iniciar sesión",
                    "login-cognito": "Iniciar sesión",
                    "login-sso": "Iniciar sesión",
                    logout: "Cerrar la sesión",
                    signup: "Regístrate",
                    home: "Home",
                    profile: "Mi perfil",
                    settings: "Configuraciones",
                    "live-tv": "TV en directo",
                    search: "Buscar",
                    "search-title": "Buscar título....",
                    play: "Play",
                    pause: "Pausa",
                    stop: "Stop",
                    audio: "Auido",
                    volume: "Volumen",
                    subtitles: "Subtítulos",
                    subtitlesCC: "Subtítulos/CC",
                    fullscreen: "Pantalla Completa",
                    info: "Info",
                    watch: "Ver",
                    rent: "Alquiler",
                    "rent-for": "Precio",
                    restart: "Reiniciar",
                    resume: "Continuar",
                    episodes: "Episodios",
                    trailer: "Tráiler",
                    "watch-trailer": "Tráiler",
                    lock: "Bloquear",
                    unlock: "Unlock",
                    confirm: "Confirmar",
                    ok: "OK",
                    cancel: "Cancelar",
                    "pin-text": "PIN",
                    emptyPin: "Ingresá tu PIN para continuar",
                    wrongPin: "PIN erróneo",
                    yes: "Sí",
                    no: "No",
                    dismiss: "Descartar",
                    details: "Detalles",
                    hour: "h",
                    min: "mins.",
                    day: "día",
                    days: "días",
                    today: "Hoy",
                    yesterday: "Ayer",
                    tomorrow: "Mañana",
                    "no-content": "Contenido no disponible",
                    more: "Mas info",
                    "nav-more": "Más",
                    season: "Temporada",
                    episode: "del episodio",
                    "season-short": "S",
                    "episode-short": "E",
                    seeAll: "Ver más",
                    noContent:
                      "Lo sentimos no hay títulos disponibles para esta selección.",
                    restrictedContent: "Contenido restringido",
                    "restricted-page": "Esta página está bajo control parental",
                    deviceId: "ID de dispositivo:",
                  },
                  "login-footer": {
                    terms: "Términos de Uso",
                    help: "Ayuda",
                    privacy: "Política de privacidad",
                  },
                  "login-form": {
                    checkbox: "Recuérdame",
                    "error-credentials":
                      "La información ingresada fue incorrecta. Por favor intente nuevamente.",
                    "error-customer":
                      "Su dispositivo se encuentra asociado a otra cuenta. Por favor contáctese con nosotros.",
                    "error-device":
                      "Hay un problema acceder a su cuenta desde este dispositivo. Por favor, reintente o contacte el servicio clientes.",
                    "error-device-max":
                      "Tu cuenta ha alcanzado el máximo de dispositivos permitidos. Por favor, contacta a tu proveedor de servicio para más detalles.",
                    "error-location":
                      "Imposible de conectarse: Este servicio no está disponible desde su lugar.",
                    "error-account":
                      "Su cuenta no es activa. Por favor, llame su proveedor de servicios para reactivar su cuenta.",
                    "error-account2":
                      "No ha sido posible iniciar sesión. Se detectó un error en su cuenta. Por favor, comuníquese con atención al cliente.",
                    "error-account3":
                      "No ha sido posible iniciar sesión. Su cuenta está inactiva. Por favor, comuníquese con atención al cliente.",
                    "error-connection":
                      "Problemas de conexión. No ha sido posible contactar con el servidor. Por favor, intente de nuevo o comuníquese con atención al cliente.",
                    "error-server": "Error genérico del servidor.",
                  },
                  navbar: {
                    vod: "En Demanda",
                    series: "Series",
                    tv: "Programas de televisión",
                    fav: "Mi lista",
                  },
                  "playback-error": {
                    restrictedContent:
                      "Desbloquee, presione arriba o abajo para cambiar el canal.",
                    restrictedContentTitle: "Contenido restringido",
                    prmNotAllowed:
                      "Esta reproducción no está disponible en su dispositivo",
                    prmConnectivity:
                      "Hay un problema con la conexión. Por favor, intentá nuevamente en unos minutos.",
                    errorTitle:
                      "Estamos teniendo inconvenientes intentando reproducir este contenido",
                    prmMaxStreams:
                      "Estamos teniendo inconvenientes intentando reproducir este contenido porque se ha alcanzado el límite de dispositivos activos para esta cuenta.",
                    prmMaxStreamsText:
                      "Estamos teniendo inconvenientes intentando reproducir este contenido porque se ha alcanzado el límite de dispositivos activos para esta cuenta. Detenga al menos un dispositivo y vuelva a intentarlo.",
                    prmMaxStreamsDevices:
                      "Estamos teniendo inconvenientes intentando reproducir este contenido porque se ha alcanzado el límite de dispositivos activos para esta cuenta. Detenga al menos un dispositivo y vuelva a intentarlo.",
                    prmMaxStreamsDevicesOne:
                      "Estamos teniendo inconvenientes intentando reproducir este contenido porque se ha alcanzado el límite de dispositivos activos para esta cuenta. Detenga al menos un dispositivo y vuelva a intentarlo.",
                    prmDeviceType:
                      "No podemos reproducir este tipo de contenido en tu dispositivo.",
                    prmGeoBlocked:
                      "Te pedimos disculpas, no es posible reproducir este contenido en tu ubicación.",
                    prmMissingService:
                      "No podemos reproducir este tipo de contenido en tu dispositivo.",
                    prmNetworkType:
                      "No podemos reproducir este tipo de contenido en tu dispositivo.",
                    playbackFailed:
                      "Estamos teniendo inconvenientes intentando reproducir este contenido",
                    playbackFailedCas:
                      "Estamos teniendo inconvenientes intentando reproducir este contenido. \\nPor favor, volvé a intentar y si el problema persiste, comunicate con nosotros con el código de error.",
                  },
                  register: { noaccount: "¿Aún no tienes una cuenta?" },
                  parental: {
                    parentalTitle: "Desbloquear control parental",
                    parentalText: "Ingresar PIN",
                  },
                  purchase: {
                    notFound: "Contenido no encontrado",
                    limitExceeded:
                      "La asignación disponible no es suficiente para alquilar este contenido.",
                    billingDisabled:
                      "El PIN es incorrecto. Por favor ingresalo nuevamente",
                    casError:
                      "Estamos teniendo inconvenientes intentando reproducir este contenido. \\nPor favor, volvé a intentar y si el problema persiste, comunicate con nosotros con el código de error.",
                    "rent-text": "Está seguro de querer comprar este título?",
                    "rent-text-pin": "Ingresá tu PIN",
                  },
                  adult: { title: "Adultos", header: "Adultos" },
                  "all-titles": {
                    title: "Todos los Títulos",
                    header: "Todos los Títulos",
                  },
                  "cast-stripe": { title: "Actores:" },
                  "continue-watching": {
                    title: "Continuar viendo",
                    header: "Continuar viendo",
                  },
                  "directors-stripe": { title: "Directores:" },
                  favorites: { title: "Favoritos", header: "Favoritos" },
                  free: { title: "Gratis", header: "Gratis" },
                  "genre-stripe": { title: "Género:" },
                  "just-for-you": { title: "Favoritos", header: "Favoritos" },
                  kids: { title: "Niños", header: "Niños" },
                  "last-chance-to-watch": {
                    title: "Última oportunidad",
                    header: "Última oportunidad",
                  },
                  "live-tv": {
                    title: "TV en directo",
                    header: "TV en directo",
                  },
                  "most-watched-on-demand": {
                    title: "Más visto a Pedido",
                    header: "Más visto a Pedido",
                  },
                  "most-watched-on-tv": {
                    title: "Más visto a TV",
                    header: "Más visto a TV",
                  },
                  movies: { title: "Películas", header: "Películas" },
                  "on-demand": {
                    title: "A Pedido Catálogo",
                    header: "A Pedido Catálogo",
                  },
                  "other-sources": {
                    title: "Miralo también en",
                    header: "Miralo también en",
                  },
                  rentals: { title: "Alquileres", header: "Alquileres" },
                  series: { title: "Series", header: "Series" },
                  "similar-titles": {
                    title: "Títulos similares",
                    header: "Títulos similares",
                  },
                  "tv-search": {
                    title: "TV en directo",
                    header: "TV en directo",
                  },
                  tv: { title: "TV", header: "TV" },
                  "vod-search": {
                    title: "Películas y shows a pedido",
                    header: "Películas y shows a pedido",
                  },
                },
              },
              layouts: {
                default: {
                  body: { layout: [["header"], ["page"], ["modal"]] },
                },
                simple: { body: { layout: [["page"]] } },
              },
              pages: {
                asset: { layout: "default", content: { layout: [["asset"]] } },
                epg: {
                  layout: "default",
                  content: { layout: [["epg-container"]] },
                },
                fullscreen: {
                  layout: "simple",
                  content: {
                    layout: [["playback"], ["modal"]],
                    content: { playback: { component: "playback" } },
                  },
                },
                grid_of_posters: {
                  layout: "default",
                  content: {
                    layout: [["grid-of-posters"]],
                    content: {
                      "grid-of-posters": {
                        behavior: [
                          {
                            events: ["COMPONENT_SET"],
                            handlers: { component: { action: "grid" } },
                          },
                        ],
                      },
                    },
                  },
                },
                landing_page: {
                  layout: "default",
                  content: {
                    layout: [["stripes"]],
                    content: {
                      stripes: {
                        settings: {
                          layout: [
                            ["super-hero"],
                            ["live-tv"],
                            ["on-demand"],
                            ["continue-watching"],
                            ["favorites"],
                            ["most-watched-on-demand"],
                            ["most-watched-on-tv"],
                            ["last-chance-to-watch"],
                          ],
                        },
                        behavior: [
                          {
                            events: ["COMPONENT_SET"],
                            handlers: { component: { action: "stripes" } },
                          },
                        ],
                      },
                    },
                  },
                },
                login: {
                  layout: "simple",
                  content: {
                    layout: [
                      ["login-container"],
                      ["login-footer"],
                      ["version"],
                    ],
                    content: {
                      "login-container": {
                        settings: {
                          loading: null,
                          deviceId: "deviceId",
                          device: {
                            transform: "utils",
                            options: { action: "getDeviceId" },
                          },
                        },
                        bindings: {
                          settings: {
                            loading: {
                              default: [
                                {
                                  type: "class",
                                  action: "add",
                                  value: "pending",
                                },
                              ],
                              null: [
                                {
                                  type: "class",
                                  action: "remove",
                                  value: "pending",
                                },
                              ],
                            },
                          },
                        },
                        layout: [
                          ["logo"],
                          ["login-form"],
                          ["register"],
                          ["device"],
                          ["version"],
                        ],
                        content: {
                          logo: {},
                          register: {
                            settings: {
                              noaccount: "noaccount",
                              signup: "signup",
                              signupLink: null,
                            },
                            bindings: {
                              settings: {
                                signupLink: {
                                  null: [
                                    {
                                      type: "class",
                                      action: "add",
                                      value: "hidden",
                                    },
                                  ],
                                },
                              },
                            },
                            layout: [["noaccount"], ["signup"]],
                            content: {
                              noaccount: {
                                element: "span",
                                bindings: {
                                  settings: {
                                    noaccount: {
                                      default: [
                                        {
                                          type: "text",
                                          action: "set",
                                          translate: !0,
                                        },
                                      ],
                                    },
                                  },
                                },
                              },
                              signup: {
                                element: "a",
                                bindings: {
                                  settings: {
                                    signupLink: {
                                      default: [
                                        {
                                          type: "attribute",
                                          action: "set",
                                          attribute: "href",
                                        },
                                      ],
                                    },
                                    signup: {
                                      default: [
                                        {
                                          type: "text",
                                          action: "set",
                                          translate: !0,
                                        },
                                        {
                                          type: "attribute",
                                          action: "set",
                                          attribute: "type",
                                          value: "button",
                                        },
                                      ],
                                    },
                                  },
                                },
                              },
                            },
                          },
                          device: {
                            bindings: {
                              settings: {
                                device: {
                                  null: [
                                    {
                                      type: "class",
                                      action: "add",
                                      value: "hidden",
                                    },
                                  ],
                                  default: [
                                    {
                                      type: "class",
                                      action: "remove",
                                      value: "hidden",
                                    },
                                  ],
                                },
                              },
                            },
                            layout: [["label", "text"]],
                            content: {
                              label: {
                                element: "span",
                                bindings: {
                                  settings: {
                                    deviceId: {
                                      default: [
                                        {
                                          type: "text",
                                          action: "set",
                                          translate: !0,
                                        },
                                      ],
                                    },
                                  },
                                },
                              },
                              text: {
                                element: "span",
                                bindings: {
                                  settings: {
                                    device: {
                                      default: [
                                        { type: "text", action: "set" },
                                      ],
                                    },
                                  },
                                },
                              },
                            },
                          },
                          version: {
                            settings: {
                              version: {
                                transform: "utils",
                                options: { action: "getVersion" },
                              },
                            },
                            bindings: {
                              settings: { version: { null: "noAppend" } },
                            },
                            layout: [["label", "text"]],
                            content: {
                              label: {
                                element: "span",
                                bindings: {
                                  settings: {
                                    version: {
                                      default: [
                                        {
                                          type: "text",
                                          action: "set",
                                          value: "Version: ",
                                        },
                                      ],
                                    },
                                  },
                                },
                              },
                              text: {
                                element: "span",
                                bindings: {
                                  settings: {
                                    version: {
                                      default: [
                                        { type: "text", action: "set" },
                                      ],
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                      "login-footer": {
                        settings: {
                          terms: "terms",
                          termsLink: null,
                          privacy: "privacy",
                          privacyLink: null,
                          help: "help",
                          helpLink: null,
                        },
                        layout: [["terms", "help", "privacy"]],
                        content: {
                          terms: {
                            element: "a",
                            bindings: {
                              settings: {
                                termsLink: {
                                  null: [
                                    {
                                      type: "class",
                                      action: "add",
                                      value: "hidden",
                                    },
                                  ],
                                  default: [
                                    {
                                      type: "attribute",
                                      action: "set",
                                      attribute: "href",
                                    },
                                  ],
                                },
                                terms: {
                                  default: [
                                    {
                                      type: "text",
                                      action: "set",
                                      translate: !0,
                                    },
                                  ],
                                },
                              },
                            },
                          },
                          help: {
                            element: "a",
                            bindings: {
                              settings: {
                                helpLink: {
                                  null: [
                                    {
                                      type: "class",
                                      action: "add",
                                      value: "hidden",
                                    },
                                  ],
                                  default: [
                                    {
                                      type: "attribute",
                                      action: "set",
                                      attribute: "href",
                                    },
                                  ],
                                },
                                help: {
                                  default: [
                                    {
                                      type: "text",
                                      action: "set",
                                      translate: !0,
                                    },
                                  ],
                                },
                              },
                            },
                          },
                          privacy: {
                            element: "a",
                            bindings: {
                              settings: {
                                privacyLink: {
                                  null: [
                                    {
                                      type: "class",
                                      action: "add",
                                      value: "hidden",
                                    },
                                  ],
                                  default: [
                                    {
                                      type: "attribute",
                                      action: "set",
                                      attribute: "href",
                                    },
                                  ],
                                },
                                privacy: {
                                  default: [
                                    {
                                      type: "text",
                                      action: "set",
                                      translate: !0,
                                    },
                                  ],
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                on_demand: {
                  layout: "default",
                  content: {
                    layout: [["stripes"]],
                    content: {
                      stripes: {
                        settings: {
                          layout: [
                            ["just-for-you"],
                            ["movies"],
                            ["free"],
                            ["tv"],
                            ["kids"],
                            ["rentals"],
                            ["all-titles"],
                            ["continue-watching"],
                            ["adult"],
                          ],
                        },
                        behavior: [
                          {
                            events: ["COMPONENT_SET"],
                            handlers: { component: { action: "stripes" } },
                          },
                        ],
                      },
                    },
                  },
                },
                search: {
                  layout: "default",
                  content: {
                    layout: [["search-result"]],
                    content: {
                      "search-result": {
                        behavior: [
                          {
                            events: ["COMPONENT_SET"],
                            handlers: { component: { action: "searchResult" } },
                          },
                        ],
                      },
                    },
                  },
                },
                series: {
                  layout: "default",
                  content: { layout: [["series"]] },
                },
              },
            });
        }.apply(t, [t]);
        void 0 === n || (e.exports = n);
      },
      209: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.event,
                    n = e.component,
                    o = e.action,
                    s = e.details;
                  (e = { add: p, reset: u, send: d }),
                    o && e[o] && e[o]({ event: t, component: n, details: s });
                });
              var o,
                s,
                a,
                i = null,
                r = null;
              function l(e, t, n) {
                var o, s;
                "TV_SCHEDULE" === e.playback.contentType &&
                  ((o = "TV_SCHEDULE"),
                  (s = e.playback.channelId),
                  Date.now() < e.playback.endDateTime && (o = "RESTART_TV"),
                  (n.SUB_OBJECT_ID = e.playback.programId)),
                  "ASSET" === e.playback.contentType &&
                    ((o = e.playback.contentType), (s = e.playback.resourceId)),
                  "TRAILER" === e.playback.contentType &&
                    ((o = e.playback.contentType), (s = e.playback.trailerId)),
                  (t.OBJECT_TYPE_ID = o),
                  (n.OBJECT_ID = s);
              }
              function c(e) {
                var t = n.System.getItem("analytics") || [];
                0 < t.length &&
                  (n.System.publish("DATA_FETCH", null, {
                    component: e,
                    override: { params: { event: t } },
                  }),
                  n.System.removeItem("analytics"));
              }
              function p(e) {
                var t = e.event,
                  p = e.component,
                  d = e.details,
                  u = n.System.getItem("providers");
                (t = (e = { event: t, details: d }).event),
                  (e = e.details),
                  ("ENTER_PAGE" !== (t = t.type) && "EXIT_PAGE" !== t) ||
                    ("epg" === e
                      ? ("ENTER_PAGE" === t && (t = "ENTER_EPG"),
                        "EXIT_PAGE" === t && (t = "EXIT_EPG"))
                      : (t = !1)),
                  e.searchType &&
                    ("tv" === e.searchType && (t = "SEARCH_EPG"),
                    "vod" === e.searchType && (t = "SEARCH_VOD")),
                  (e = t),
                  u && u.analytics
                    ? ((o = n.Source.constants.analytics),
                      (i = u.analytics.params.numEvent),
                      (r = 60 * u.analytics.params.frequency * 1e3),
                      n.System.interval(p.element, p.id, r),
                      e &&
                        ((t = p),
                        (d = (function (e, t) {
                          var n = {},
                            i = { EVENT_ID: e },
                            r = {};
                          return (
                            "START_PLAYING" === e &&
                              ((i.PROTOCOL_ID = t.prm.protocol),
                              l(t, i, r),
                              (s = i.OBJECT_TYPE_ID),
                              (a = t.prm.protocol)),
                            "STOP_PLAYING" === e &&
                              (t.prm && t.playback
                                ? ((i.PROTOCOL_ID = t.prm.protocol),
                                  (i.PLAYER_STATUS_ID = t.prm.playbackCompleted
                                    ? "playbackCompleted"
                                    : "userCommand"),
                                  l(t, i, r))
                                : ((i.PROTOCOL_ID = a),
                                  (i.PLAYER_STATUS_ID = "userCommand")),
                              (i.OBJECT_TYPE_ID = s),
                              (r.DURATION = t.prm.duration)),
                            "TUNE_IN" === e &&
                              ((i.OBJECT_TYPE_ID = t.playback.contentType),
                              (i.PROTOCOL_ID = t.prm.protocol),
                              (r.OBJECT_ID = t.playback.channelId),
                              (r.SUB_OBJECT_ID = t.playback.programId),
                              (s = t.playback.contentType),
                              (a = t.prm.protocol)),
                            "TUNE_OUT" === e &&
                              ((i.OBJECT_TYPE_ID = t.playback.contentType),
                              (i.PROTOCOL_ID = t.prm.protocol),
                              (r.OBJECT_ID = t.playback.channelId),
                              (r.SUB_OBJECT_ID = t.playback.programId),
                              (r.DURATION = t.prm.tuneOutDuration)),
                            "ASSET_TRICKPLAY" === e &&
                              ((i.PROTOCOL_ID = t.prm.protocol),
                              (i.TRICKPLAY_ID = t.playback.trickPlayMode),
                              l(t, i, r),
                              (i.OBJECT_TYPE_ID = s),
                              (r.DURATION = t.playback.trickPlayPosition)),
                            "LIVE_TRICKPLAY" === e &&
                              ((i.OBJECT_TYPE_ID = t.playback.contentType),
                              (i.PROTOCOL_ID = t.prm.protocol),
                              (i.TRICKPLAY_ID = t.playback.trickPlayMode),
                              (r.OBJECT_ID = t.playback.channelId),
                              (r.SUB_OBJECT_ID = t.playback.programId),
                              (r.DURATION = t.playback.trickPlayPosition)),
                            "PURCHASE_VOD" === e &&
                              ((i.OBJECT_TYPE_ID = t.playback.contentType),
                              (i.PROTOCOL_ID = t.prm.protocol),
                              (r.OBJECT_ID = t.playback.resourceId.toString()),
                              (r.EVENT_VALUE_ID = t.playback.price.toString())),
                            t.searchText && (r.EVENT_VALUE_ID = t.searchText),
                            (i.APPLICATION_ID = "Minerva"),
                            (i.LOG_LEVEL_ID = "Info"),
                            (r.EVENT_TIME = Math.round(Date.now() / 1e3)),
                            (function (e, t) {
                              for (
                                var n, s = 0;
                                s < Object.keys(t).length;
                                s += 1
                              )
                                (n = Object.keys(t)[s]),
                                  (e[o.PARAMS_IDS[n]] =
                                    o.PARAMS_VALUES[n][t[n]]);
                            })(n, i),
                            (function (e, t) {
                              for (
                                var n, s = 0;
                                s < Object.keys(t).length;
                                s += 1
                              )
                                (n = Object.keys(t)[s]),
                                  (e[o.PARAMS_IDS[n]] = t[n]);
                            })(n, r),
                            n
                          );
                        })((u = e), (p = d))),
                        (p = n.System.getItem("analytics") || []).push(d),
                        n.System.setItem("analytics", p),
                        (p.length !== i && "LOGOUT" !== u) || c(t)))
                    : "EXIT_PAGE" !== e &&
                      n.System.error(
                        "ANALYTICS",
                        "Missing analytics parameters. EVENT: ".concat(e)
                      );
              }
              function d(e) {
                c(e.component);
              }
              function u(e) {
                (e = e.component), n.System.clearTimer(e.id);
              }
            }.apply(t, n)) || (e.exports = n);
      },
      9002: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              function s(e) {
                var t = e.component,
                  o = n.Source.constants["content-types"],
                  s = n.State.router.params.type;
                (e = n.System.getItem(["customer", "enableVOD"])),
                  (s !== o.asset && s !== o.trailer) || e
                    ? n.System.publish("DATA_FETCH", null, { component: t })
                    : n.System.publish("DOM_RENDER", null, { component: t });
              }
              function a(e) {
                var t,
                  s,
                  a,
                  i = e.component,
                  r = n.Source.constants,
                  l = i.data,
                  c = (0, o.getRequestSize)(r["stripe-sizes"].portrait.medium),
                  p = r["content-types"];
                l &&
                  null === l.restricted &&
                  ((e = l.genre
                    .map(function (e) {
                      return e.label;
                    })
                    .join(", ")),
                  (i = l),
                  (r = n.System.component("rent")) &&
                    i["rent-button-label"] &&
                    ((r.settings.text = i["rent-button-label"]),
                    n.System.publish("DOM_REFRESH", null, {
                      component: r.components["text-wrapper"].components.text,
                    })),
                  (n.System.component("cast-stripe").clearData = !0),
                  (n.System.component("directors-stripe").clearData = !0),
                  n.System.publish("DATA_FETCH", null, {
                    component: n.System.component("genre-stripe"),
                    override: { data: l.genre },
                  }),
                  n.System.publish("DATA_FETCH", null, {
                    component: n.System.component("cast-stripe"),
                    override: { data: l.cast },
                  }),
                  n.System.publish("DATA_FETCH", null, {
                    component: n.System.component("directors-stripe"),
                    override: { data: l.directors },
                  }),
                  -1 !==
                    [p.tv_schedule, p.movie, p.episode].indexOf(
                      n.State.router.params.type
                    ) &&
                    ((t = l),
                    (s = c),
                    (a = n.System.component("other-sources")),
                    (0, o.setStripe)({
                      component: a,
                      title: !0,
                      page: "asset",
                      info: "selected",
                      style: "zoom",
                      orientation: "square",
                      url: "content/item/movie/" + t.programId,
                      visibleItems: s,
                      maxItems: 25,
                    }),
                    n.System.publish("DATA_FETCH", null, { component: a })),
                  (r = l),
                  (t = c),
                  (s = p),
                  (a = n.State.router.params.type),
                  (c = n.System.component("similar-titles")),
                  (p = n.State.router.id),
                  (a = a) === s.tv_schedule &&
                    ((p = r.programId),
                    r.episodic && ((a = s.season), (p = r.seasonId))),
                  (0, o.setStripe)({
                    component: c,
                    title: !0,
                    page: "asset",
                    info: "selected",
                    style: "zoom",
                    url: "content/similars",
                    tags: { mtags: "VERTICAL" },
                    contentType: a,
                    contentID: p,
                    visibleItems: t,
                    maxItems: 25,
                  }),
                  n.System.publish("DATA_FETCH", null, { component: c }),
                  n.System.publish("DOM_HEADER", null, {
                    title: l.title,
                    description: l.description,
                    keywords: e,
                  }));
              }
              function i(e) {
                (e = e.component),
                  n.System.publish("DATA_FETCH", null, { component: e });
              }
              function r(e) {
                var t = e.component;
                (e = n.System.getItem("parentalStatus") || "locked"),
                  t.data.baseRestricted && "locked" === e
                    ? (n.System.publish("ROUTER_CHANGE_URL", null, {
                        page: n.Settings.router.page.default,
                      }),
                      n.System.publish("ROUTER_PARSE"))
                    : n.System.publish("DATA_FETCH", null, { component: t });
              }
              function l(e) {
                var t = e.component,
                  o = e.rootComponent,
                  s = t.element.offsetWidth;
                s < (e = t.components.text.element.offsetWidth) &&
                  ((s = -(e = (e + s) / 50) / 2 + "s"),
                  (e += "s"),
                  (o.settings.marquee = !0),
                  (o.settings.animationDelay = s),
                  (o.settings.animationDuration = e),
                  n.System.publish("DOM_REFRESH", null, {
                    component: t.components.text,
                  }));
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.component,
                    n = e.rootComponent,
                    o = e.action;
                  (e = {
                    set: s,
                    ready: a,
                    buttonMarquee: l,
                    breakpoint: i,
                    parentalChanged: r,
                  }),
                    o && e[o] && e[o]({ component: t, rootComponent: n });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      158: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.action;
                  (e = { login: n.System.login, logout: n.System.logout }),
                    t && e[t] && e[t]();
                });
            }.apply(t, n)) || (e.exports = n);
      },
      1650: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              function o(e) {
                var t,
                  o = e.data,
                  s = e.options,
                  a = { type: o.contentType },
                  i = n.Source.constants["content-types"];
                if (!o.price && !o.purchased && a.type === i.asset)
                  return (
                    (t = o),
                    (e = n.System.component("freeVod")),
                    ((i = { purchase: {} }).purchase.price = 0),
                    (i.purchase.content = t.uri),
                    (i.purchase.share =
                      !1 === n.System.getItem(["user", "recordPrivate"])),
                    void n.System.publish(
                      "DATA_FETCH",
                      null,
                      {
                        collectionId: "purchase",
                        component: e,
                        override: { params: i },
                      },
                      !1
                    )
                  );
                s.resume && (a.time = o.bookmark),
                  n.System.publish("ROUTER_NAVIGATE", null, {
                    page: "fullscreen",
                    id: o.id,
                    params: a,
                  });
              }
              function s(e) {
                (e = e.data),
                  n.System.publish("ROUTER_NAVIGATE", null, {
                    page: "fullscreen",
                    id: e.channelId,
                    params: { type: "TV_CHANNEL" },
                  });
              }
              function a(e) {
                (e = e.data),
                  n.System.publish("ROUTER_NAVIGATE", null, {
                    page: "fullscreen",
                    id: e.id,
                    params: { type: e.contentType },
                  });
              }
              function i(e) {
                (e = e.data),
                  n.System.publish("ROUTER_NAVIGATE", null, {
                    page: "fullscreen",
                    id: e.trailer,
                    params: { type: "TRAILER", asset: e.id },
                  });
              }
              function r(e) {
                var t = e.data,
                  o = n.Source.constants["content-types"];
                (e = { seasonId: t.seasonId }),
                  t.contentType === o.tv_schedule && (e.type = o.series),
                  n.System.publish("ROUTER_NAVIGATE", null, {
                    page: "series",
                    id: t.seriesId,
                    params: e,
                  });
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.component,
                    n = e.action,
                    l = e.options;
                  (e = {
                    playAsset: o,
                    watchAsset: s,
                    restartAsset: a,
                    playTrailer: i,
                    episodes: r,
                  }),
                    n && e[n] && e[n]({ data: t.data, options: l });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      1527: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              function o(e) {
                (e = e.component),
                  n.System.publish("DATA_FETCH", null, { component: e });
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.component,
                    n = e.action;
                  (e = { fetch: o }), n && e[n] && e[n]({ component: t });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      4740: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              function s(e, t, n, o) {
                "left" === t &&
                  e.previousElementSibling &&
                  ((e.previousElementSibling.style = o
                    ? ""
                    : "transform: translateX(-".concat(n, "%)")),
                  s(e.previousElementSibling, t, n, o)),
                  "right" === t &&
                    e.nextElementSibling &&
                    ((e.nextElementSibling.style = o
                      ? ""
                      : "transform: translateX(".concat(n, "%)")),
                    s(e.nextElementSibling, t, n, o));
              }
              function a(e, t) {
                var o = n.System.component(t.moreId);
                e.data &&
                  o &&
                  setTimeout(function () {
                    var t = o.components.dropdown,
                      s = e.components.scroll.components,
                      a = t.components.scroll.components,
                      i = a[Object.keys(a)[0]].id;
                    (o.settings.activePage = null),
                      (o.settings.positionSet = null),
                      t.cache.forEach(function (e, t) {
                        (e.isVisible = !0),
                          (t += 1),
                          n.System.publish("DOM_REFRESH", null, {
                            component: a[i + t],
                          });
                      }),
                      Object.keys(s).forEach(function (r) {
                        var l = s[r],
                          c = t.cache[l.index - 1];
                        (r = l.element).parentElement &&
                          (r.offsetTop < 4
                            ? ((c.isVisible = null),
                              (o.settings.left = r.offsetLeft + r.offsetWidth),
                              n.System.publish("DOM_REFRESH", null, {
                                component: a[i + l.index],
                              }),
                              (o.settings.left = r.offsetLeft + r.offsetWidth))
                            : o.settings.positionSet ||
                              (o.settings.positionSet =
                                e.element.offsetLeft + o.settings.left + 60),
                          c.isVisible &&
                            c.selected &&
                            (o.settings.activePage = !0));
                      }),
                      n.System.publish("DOM_REFRESH", null, { component: o });
                  });
              }
              function i(e, t, o, s) {
                e.forEach(function (e) {
                  var n = e[0];
                  -1 === t.list.indexOf(n) &&
                    0 < s &&
                    (o.source.layout.push(e), t.list.push(n), --s);
                }),
                  n.System.publish("DOM_PARSE", null, "page");
              }
              function r(e) {
                var t = e.element,
                  o = e.options,
                  a = "grid_of_posters" !== n.State.router.page,
                  i = !t.previousElementSibling,
                  r = !t.nextElementSibling;
                (e = 12),
                  o.state && "in" === o.state
                    ? (t.classList.add("selected"),
                      a &&
                        (r &&
                          ((t.style =
                            "transform: translateX(-10%) scale(1.2) !important"),
                          (e = 22)),
                        i &&
                          ((t.style =
                            "transform: translateX(10%) scale(1.2) !important"),
                          (e = 22)),
                        s(t, "left", e),
                        s(t, "right", e)))
                    : (t.classList.remove("selected"),
                      (t.style = ""),
                      s(t, "left", e, !0),
                      s(t, "right", e, !0));
              }
              function l(e) {
                var t,
                  s = e.component,
                  a = n.Source.constants,
                  i = n.State.router.id,
                  r =
                    !!n.Settings.stripes[i] &&
                    (0, o.copy)(n.Settings.stripes[i]),
                  l = (0, o.getRequestSize)(
                    a["stripe-grid-sizes"].portrait.medium
                  );
                (e = (0, o.getRequestSize)(a.sizes["gop-height"].visible)),
                  (a = r.settings ? r.settings.responseType : ""),
                  (l *= e),
                  (e = s.source),
                  (r =
                    r ||
                    (!!n.Settings.app[i] && (0, o.copy)(n.Settings.app[i])))
                    ? ((r.component = "gop"),
                      ("tv-search" !== i && "vod-search" !== i) ||
                        ((t = n.State.router.params.searchText),
                        "tv-search" === i &&
                          n.System.publish("SEARCH_RESULT", null, {
                            searchType: "tv",
                            searchText: t,
                          }),
                        "vod-search" === i &&
                          n.System.publish("SEARCH_RESULT", null, {
                            searchType: "vod",
                            searchText: t,
                          })),
                      (0, o.setStripe)({
                        component: r,
                        title: !0,
                        page: "asset",
                        style: "zoom",
                        searchText: t,
                        visibleItems: l,
                        maxItems: !1,
                        mode: "grid",
                        responseType: a,
                      }),
                      (e.layout = [[i], ["empty-page"]]),
                      (e.content = {}),
                      (e.content[i] = r))
                    : ((s.settings = { show: !0 }),
                      (e.layout = [["empty-page"]])),
                  n.System.publish("DOM_PARSE", null, "page");
              }
              function c(e) {
                var t,
                  o,
                  s,
                  a,
                  i = e.component;
                i.prepared ||
                  ((i.prepared = !0),
                  (t = n.State.router.params.searchText),
                  (o = n.Settings.app["tv-search"]),
                  (a = n.Settings.app["vod-search"]),
                  (s = o.collection),
                  (e = a.collection),
                  (i = i.source),
                  (s.params.searchText = encodeURIComponent(t)),
                  (e.params.searchText = encodeURIComponent(t)),
                  (i.layout = [["tv-search"], ["vod-search"]]),
                  (i.content = {}),
                  (i.content["tv-search"] = o),
                  (i.content["vod-search"] = a),
                  n.System.publish("DOM_PARSE", null, "page"),
                  (i = n.System.component("search-form")),
                  (a = n.System.component("searchText").element),
                  n.System.publish("SEARCH_RESULT", null, {
                    searchText: n.State.router.params.searchText,
                  }),
                  null === i.settings.active
                    ? ((i.settings.active = "active"),
                      (a.value = n.State.router.params.searchText),
                      n.System.publish("DOM_RENDER", null, { component: i }))
                    : (a.value = n.State.router.params.searchText),
                  i.form && n.System.publish("change", a));
              }
              function p() {
                var e,
                  t,
                  o = n.System.component("stripes");
                o &&
                  ((e = o.settings.stripes),
                  (t = o.settings.layout),
                  e.checkList.length < t.length &&
                    !e.pagination &&
                    ((e.pagination = 5), i(t, e, o, 5)));
              }
              function d(e) {
                var t,
                  o,
                  s,
                  a,
                  r,
                  l,
                  c,
                  p = e.component,
                  d = n.System.component("grid-of-posters");
                p.ready ||
                  ((r = p).settings &&
                    "grid_of_posters" !== n.State.router.page &&
                    ((l = (c = r.collection).options),
                    (c = c.state),
                    (c =
                      "conditional" === r.settings.seeAll &&
                      l.maxItems &&
                      c.dataMore),
                    (!0 !== r.settings.seeAll && !c) ||
                      r.settings.seeAllButton ||
                      ((r.settings.seeAllButton = !0),
                      n.System.publish("DOM_RENDER", null, { component: r }))),
                  n.System.component("stripes") &&
                    ((t = p),
                    (s = n.System.component("stripes")),
                    (a = n.System.component("empty-page")),
                    (e = n.System.component("page")),
                    (l = n.State.system.responsive.touch
                      ? e.iscroll.maxScrollY === window.screen.height
                      : 0 === e.iscroll.maxScrollY),
                    (c = t.id),
                    (r = s.settings.stripes),
                    (e = s.settings.layout),
                    r.checkList.push(c),
                    t.data
                      ? ((r.info[c].data = !0), r.visiblList.push(c))
                      : ((r.info[c].data = !1), r.emptyList.push(c)),
                    r.list.length === e.length && (r.inited = !0),
                    r.inited ||
                      r.checkList.length !== r.list.length ||
                      (0 <
                        (o =
                          r.initStripes -
                          (r.list.length - r.emptyList.length)) &&
                      e.length !== r.list.length
                        ? i(e, r, s, o)
                        : ((r.allStripes = r.initStripes), (r.inited = !0))),
                    r.pagination &&
                      r.checkList.length === r.list.length &&
                      (0 <
                        (o =
                          r.allStripes +
                          r.pagination -
                          (r.list.length - r.emptyList.length)) &&
                      e.length !== r.list.length
                        ? i(e, r, s, o)
                        : ((r.allStripes += r.pagination),
                          (r.pagination = !1))),
                    r.inited && l && r.list.length < e.length && i(e, r, s, 2),
                    r.emptyList.length === r.list.length &&
                      ((s.settings.show = !0),
                      n.System.publish("DOM_REFRESH", null, { component: a }))),
                  p.data
                    ? !p.scrollToElement ||
                      ((a = n.System.component(p.scrollToElement)) &&
                        (p.components["scroll-wrapper"].iscroll.scrollTo(
                          -Math.abs(a.element.offsetLeft),
                          -Math.abs(a.element.offsetTop)
                        ),
                        delete p.scrollToElement,
                        n.System.publish("SCROLL_END", null)))
                    : d &&
                      ((d.settings = { show: !0 }),
                      n.System.publish("DOM_REFRESH", null, {
                        component: n.System.component("empty-page"),
                      })),
                  (p.ready = !0));
              }
              function u(e) {
                e = e.component;
                var t,
                  n = (0, o.getHistoryData)("focusData");
                n &&
                  n.component === e.component.id &&
                  ((t = 0),
                  Object.keys(e.components.scroll.components).forEach(function (
                    e,
                    o
                  ) {
                    e === n.item && (t = o - 1);
                  }),
                  e.iscroll.goToPage(t, 0, 0, !1),
                  (0, o.removeHistoryData)("focusData"));
              }
              function m(e) {
                var t = e.component,
                  o = (e = t.iscroll) && e.currentPage.pageX,
                  s = t.components.dots.components;
                Object.keys(s).forEach(function (e, t) {
                  t - 1 === o
                    ? n.System.binding(s[e].element, "selected", {
                        type: "class",
                        action: "add",
                      })
                    : n.System.binding(s[e].element, "selected", {
                        type: "class",
                        action: "remove",
                      });
                });
              }
              function h(e) {
                var t = e.component,
                  o = e.options,
                  s = n.System.component(o.rootData),
                  a = ((e = o.containerId), t.components[e].components),
                  i = !1;
                t.data &&
                  (t.data.forEach(function (e) {
                    e && e.id === s.settings[o.property || "id"] && (i = e.id);
                  }),
                  Object.keys(a).forEach(function (e) {
                    a[e].index === i
                      ? n.System.binding(a[e].element, "selected", {
                          type: "class",
                          action: "add",
                        })
                      : n.System.binding(a[e].element, "selected", {
                          type: "class",
                          action: "remove",
                        });
                  }));
              }
              function g(e) {
                var t = e.component;
                t.loaded
                  ? n.System.publish("DOM_REFRESH", null, {
                      component: n.System.component("empty-page"),
                    })
                  : ((t.source.layout = [["empty-page"]]),
                    (t.source.content = {}),
                    (t.settings.stripes = {
                      initStripes: 5,
                      info: {},
                      list: [],
                      checkList: [],
                      visiblList: [],
                      emptyList: [],
                    }),
                    0 < t.settings.layout.length &&
                      (t.settings.layout.forEach(function (e, o) {
                        var s = e[0],
                          a = (t.settings.content || n.Settings.stripes)[s];
                        a
                          ? (o < t.settings.stripes.initStripes &&
                              (t.source.layout.push(e),
                              t.settings.stripes.list.push(s)),
                            (t.settings.stripes.info[s] = {}),
                            (t.source.content[s] = a))
                          : (t.settings.stripes.info[s] = { invalid: !0 });
                      }),
                      delete t.settings.content),
                    (t.loaded = !0),
                    n.System.publish("DOM_PARSE", null, "page"),
                    t.source.layout &&
                      1 === t.source.layout.length &&
                      ((t.settings.show = !0),
                      n.System.publish("COMPONENT_SET", t.element, !1, !0)));
              }
              function f(e) {
                var t = e.component,
                  o = e.options;
                t.data &&
                  o.components &&
                  o.collectionId &&
                  Array.isArray(o.components) &&
                  o.components.forEach(function (e) {
                    n.System.publish("DATA_FETCH", null, {
                      collectionId: o.collectionId,
                      component: n.System.component(e),
                    });
                  });
              }
              function y(e) {
                var t = e.component;
                (e = e.options).delay
                  ? (0, o.waitFrames)(e.delay).then(a.bind(this, t, e))
                  : a(t, e);
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.element,
                    n = e.component,
                    o = e.action,
                    s = e.options,
                    a = e.details;
                  (e = {
                    grid: l,
                    zoom: r,
                    searchResult: c,
                    stripePagination: p,
                    stripeReady: d,
                    restoreSuperheroState: u,
                    selectedDot: m,
                    selected: h,
                    stripes: g,
                    fetchComponents: f,
                    setMore: y,
                  }),
                    o &&
                      e[o] &&
                      e[o]({
                        element: t,
                        component: n,
                        options: s,
                        details: a,
                      });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      3275: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              function o(e) {
                n.System.binding(e.element, "selected", {
                  type: "class",
                  action: "toggle",
                }),
                  e.element.classList.contains("selected") &&
                    n.System.publish(
                      "DROPDOWN_OPEN",
                      e.components.dropdown.element
                    );
              }
              function s(e) {
                e.components.dropdown &&
                  e.components.dropdown.iscroll &&
                  e.components.dropdown.iscroll.scrollTo(0, 0),
                  n.System.binding(e.element, "selected", {
                    type: "class",
                    action: "remove",
                  });
              }
              function a(e, t) {
                (e = e.components.dropdown),
                  (t.collectionId = e.collectionId),
                  (t.reuse = !0),
                  (t.fullscreen = !0),
                  (t.dropdown = !0),
                  (t.title = " "),
                  e.settings && (t = Object.assign(t, e.settings)),
                  n.System.publish("MODAL_OPEN", null, t);
              }
              function i(e) {
                var t = e.options;
                (e = n.System.component(t.componentId)),
                  n.State.system.responsive.small ? a(e, t) : o(e);
              }
              function r(e) {
                var t;
                (e = e.options),
                  n.State.system.responsive.small
                    ? (t = n.System.component(
                        e.componentId
                      )).element.classList.contains("selected") &&
                      (s(t), a(t, e))
                    : ((t = n.System.component("modal").settings.active),
                      (e = n.System.component("modal").settings.dropdown),
                      t &&
                        e &&
                        (n.System.publish("MODAL_CLOSE"),
                        (t = n.System.component(t)) && o(t)));
              }
              function l(e) {
                var t = e.target,
                  o = e.options,
                  a = n.System.component(o.componentId),
                  i = t && t._reference && !t._reference.component;
                (e =
                  t &&
                  t._reference &&
                  t._reference.component &&
                  "dropdown" === t._reference.component.id),
                  (o =
                    t &&
                    t._reference &&
                    e &&
                    t._reference.component.parent.id === a.id),
                  (e = t && t._reference && t._reference.parent.id !== a.id),
                  (!t || i || (!o && e)) && a && s(a);
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.element,
                    n = e.component,
                    o = e.action,
                    s = e.details,
                    a = e.options;
                  (e = { toggle: i, check: r, close: l }),
                    o &&
                      e[o] &&
                      e[o]({
                        component: n,
                        target: s.target,
                        element: t,
                        options: a,
                      });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      5083: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              var s, a, i, r, l;
              function c(e) {
                return ""
                  .concat((0, o.formatDate)(e, { day: "numeric" }), " ")
                  .concat((0, o.formatDate)(e, { month: "short" }), " (")
                  .concat((0, o.formatDate)(e, { weekday: "short" }), ")");
              }
              function p(e) {
                var t,
                  o = e.data,
                  s = n.System.component([
                    "epg-schedules-container" + e.index,
                    "epg-schedules",
                  ]);
                o &&
                  s &&
                  ((t = parseInt(o.id, 10)),
                  (e = a.dateFrom),
                  (o = a.dateTo),
                  a.needSchedules
                    ? ((s.clearData = !0),
                      n.System.publish("DATA_FETCH", null, {
                        component: s,
                        override: {
                          params: { dateFrom: e, dateTo: o },
                          options: { id: t, reset: !0 },
                        },
                      }))
                    : n.System.publish("DOM_RENDER", null, { component: s }));
              }
              function d() {
                var e, t, n;
                (a.needSchedules = !0),
                  a.initTime &&
                    ((e = a.initTime.fq && a.times.tq),
                    (t = a.initTime.tq && a.times.qq),
                    (n = a.initTime.qq && a.times.tq),
                    e || t || n
                      ? ((a.needSchedules = !0), (a.initTime = a.times))
                      : (a.needSchedules = !1));
              }
              function u() {
                var e,
                  t,
                  o,
                  i,
                  r,
                  c,
                  d = n.System.component("epg-channels"),
                  u =
                    d.components.scroll.components["epg-channels-all"]
                      .components,
                  m =
                    !!u[Object.keys(u)[1]] &&
                    u[Object.keys(u)[1]].element.offsetHeight + 2;
                m &&
                  ((e = n.State.system.responsive.small
                    ? s.hiddenChannelsSmall
                    : s.hiddenChannels),
                  (t = d.iscroll ? Math.abs(d.iscroll.y) : 0),
                  (o = d.element.offsetHeight + t),
                  (i = !1),
                  (r = t),
                  0 < (c = m * e) && ((t -= c), (o += c)),
                  (a.channels = a.channels || []),
                  (a.channelsVisible = []),
                  (a.channelsList = a.channelsList || []),
                  Object.keys(u).forEach(function (e, s) {
                    var c,
                      h,
                      g = u[e];
                    0 < g.index &&
                      0 < g.element.offsetHeight &&
                      ((c = g.element.offsetTop + g.element.offsetHeight),
                      a.firstLoad && (g.data.visible = !1),
                      c <= o && t <= c
                        ? (!l &&
                            !i &&
                            r <= c &&
                            ((d.scrollToElement = {
                              index: s,
                              visibility:
                                Math.round(((c - r) / (m / 100)) * 100) / 100,
                            }),
                            (i = !0)),
                          a.channelsVisible.push(g.index),
                          -1 === a.channelsList.indexOf(e) &&
                            ((h = !g.data.visible),
                            a.channels.push(g),
                            a.channelsList.push(e),
                            h &&
                              (g.data.imageurl &&
                                ((g.data.image = g.data.imageurl),
                                (g.data.imageurl = !1)),
                              (g.data.visible = g.data.image || !0),
                              n.System.publish("DOM_REFRESH", null, {
                                component: g.components.image,
                              }),
                              n.System.publish("DOM_REFRESH", null, {
                                component: g.components.image.components.img,
                              }),
                              n.System.publish("DOM_REFRESH", null, {
                                component: g.components["no-image"],
                              })),
                            p(g)))
                        : ((h = n.System.component(
                            "epg-schedules-container" + g.index
                          ).components["epg-schedules"]),
                          (e = a.channelsList.indexOf(e)),
                          (h.data = null),
                          (h.cache = null),
                          (h.element.innerHTML = ""),
                          a.firstLoad &&
                            ((g.data.visible = !1),
                            g.data.image && (g.data.imageurl = g.data.image),
                            (g.data.image = !1),
                            n.System.publish("DOM_REFRESH", null, {
                              component: g.components.image,
                            }),
                            n.System.publish("DOM_REFRESH", null, {
                              component: g.components.image.components.img,
                            }),
                            n.System.publish("DOM_REFRESH", null, {
                              component: g.components["no-image"],
                            })),
                          n.System.publish("DOM_REFRESH", null, {
                            component: h,
                          }),
                          -1 < e &&
                            (a.channelsList.splice(e, 1),
                            a.channels.splice(e, 1))));
                  }),
                  (a.firstLoad = !1));
              }
              function m(e) {
                var t = n.System.component("epg-timeslot"),
                  s = (0, o.getHistoryData)("scrollX");
                e.iscroll &&
                  a.centerHorizontal &&
                  (e.iscroll.refresh(),
                  s
                    ? (e.iscroll.scrollTo(-Math.abs(s), 0),
                      t.iscroll.scrollTo(-Math.abs(s), 0))
                    : (e.iscroll.scrollTo(
                        -Math.abs(
                          n.System.component("epg-timeslot-item3").element
                            .offsetLeft
                        ),
                        0
                      ),
                      t.iscroll.scrollTo(
                        -Math.abs(
                          n.System.component("epg-timeslot-item3").element
                            .offsetLeft
                        ),
                        0
                      )));
              }
              function h(e) {
                var t = e.component,
                  s = new Date(),
                  a = (0, o.getHistoryData)(),
                  i = new Date(),
                  r = "all",
                  l = "all-channels";
                (e = n.System.getSource("collections", "epg-channels").url),
                  a &&
                    a.list &&
                    (a.currentTime && (i = new Date(a.currentTime)),
                    (r = a.list),
                    (l = a.listName),
                    (e = a.url)),
                  s.setHours(s.getHours(), s.getMinutes(), 0, 0),
                  (t.settings = {
                    channels: !1,
                    channelsVisible: !1,
                    channelsList: !1,
                    responsive: (0, o.copy)(n.State.system.responsive),
                    now: s,
                    currentTime: i,
                    centerHorizontal: !0,
                    list: r,
                    listName: l,
                    url: e,
                  });
              }
              function g() {
                var e = n.System.component("epg-channels"),
                  t = ["contents", "content"];
                "all" !== a.list && (t = ["contents", "favoriteContent"]),
                  a.channels
                    ? (a.channels.forEach(function (e) {
                        p(e);
                      }),
                      _({ component: e }))
                    : ((a.needSchedules = !0),
                      (e.clearData = !0),
                      n.System.publish("DATA_FETCH", null, {
                        component: e,
                        override: {
                          contentPath: t,
                          params: {
                            size: n.System.getItem(
                              "channels-count",
                              "collections"
                            ),
                          },
                          url: a.url,
                        },
                      }));
              }
              function f(e) {
                ((e = e.component).data && !e.refresh) ||
                  n.System.publish("DATA_FETCH", null, {
                    component: e,
                    override: {
                      data: (function () {
                        var e = [],
                          t = a.now,
                          s = a.currentTime,
                          i = new Date(t.getTime()),
                          r = new Date(s.getTime()),
                          l = n.System.getItem("reverseEPG"),
                          p = n.System.getItem("futureEPG");
                        if (
                          (i.setHours(0, 0, 0, 0),
                          r.setHours(0, 0, 0, 0),
                          0 < l)
                        )
                          for (var d = l; 0 < d; --d) {
                            var u = (0, o.transformDate)(i, i.getDate() - d);
                            d === l && (a.dateFirst = u.getTime()),
                              1 < d
                                ? e.push({
                                    id: d === l ? "first" : null,
                                    text: c(u),
                                    date: u,
                                    selected: u.getTime() === r.getTime(),
                                  })
                                : e.push({
                                    id: d === l ? "first" : null,
                                    text: "yesterday",
                                    date: u,
                                    selected: u.getTime() === r.getTime(),
                                  });
                          }
                        else a.dateFirst = i.getTime();
                        if (
                          (e.push({
                            id: "today",
                            text: "today",
                            date: i,
                            selected: i.getTime() === r.getTime(),
                          }),
                          0 < p)
                        )
                          for (var m = 1; m <= p; m += 1) {
                            var h,
                              g = (0, o.transformDate)(i, i.getDate() + m);
                            m === p &&
                              ((h = new Date(g.getTime())).setHours(
                                24,
                                0,
                                0,
                                0
                              ),
                              (a.dateLast = h.getTime())),
                              1 < m
                                ? e.push({
                                    id: m === p ? "last" : null,
                                    text: c(g),
                                    date: g,
                                    selected: g.getTime() === r.getTime(),
                                  })
                                : e.push({
                                    id: m === p ? "last" : null,
                                    text: "tomorrow",
                                    date: g,
                                    selected: g.getTime() === r.getTime(),
                                  });
                          }
                        else
                          (s = new Date(i.getTime())).setHours(24, 0, 0, 0),
                            (a.dateLast = s.getTime());
                        return e;
                      })(),
                    },
                  });
              }
              function y(e) {
                var t,
                  o = e.component;
                o.data &&
                  ((t = n.State.system.responsive.small ? 1 : 3),
                  (t =
                    (e = n.System.component("epg-dates-itemtoday").element)
                      .offsetWidth * t),
                  0 < (t = e.offsetLeft - t - o.element.offsetLeft - 2) &&
                    o.iscroll &&
                    o.iscroll.scrollTo(-Math.abs(t), 0),
                  v({ component: o }));
              }
              function v(e) {
                var t = (o = e.component).iscroll,
                  o =
                    ((e = o.components["arrow-left"].element),
                    o.components["arrow-right"].element);
                t &&
                  (0 === t.maxScrollX
                    ? (n.System.binding(o, "hidden", {
                        type: "class",
                        action: "add",
                      }),
                      n.System.binding(e, "hidden", {
                        type: "class",
                        action: "add",
                      }))
                    : (n.System.binding(o, "hidden", {
                        type: "class",
                        action: "remove",
                      }),
                      n.System.binding(e, "hidden", {
                        type: "class",
                        action: "remove",
                      }),
                      0 !== t.x && t.x === t.maxScrollX
                        ? n.System.binding(o, "hidden", {
                            type: "class",
                            action: "add",
                          })
                        : 0 === t.x &&
                          n.System.binding(e, "hidden", {
                            type: "class",
                            action: "add",
                          })));
              }
              function b(e) {
                ((e = e.component).data && !e.refresh) ||
                  n.System.publish("DATA_FETCH", null, { component: e });
              }
              function S(e) {
                (e = e.component),
                  (a.visibleTime = n.State.system.responsive.small
                    ? s.visibleTimeSmall
                    : s.visibleTime),
                  (a.timeBuffer = n.State.system.responsive.small
                    ? s.timeBufferSmall
                    : s.timeBuffer),
                  n.System.publish("DATA_FETCH", null, {
                    component: e,
                    override: {
                      data: (function () {
                        var e = [],
                          t = s.timeFormat,
                          n = new Date(a.currentTime.getTime()),
                          i = a.timeBuffer,
                          r = (c = n.getMinutes()) <= 15,
                          l = 15 < c && c <= 30,
                          c = 15 < c && c <= 45,
                          p = a.visibleTime;
                        (a.times = { fq: !1, sq: !1, tq: !1, qq: !1 }),
                          r
                            ? ((a.times.fq = !0),
                              2 === p
                                ? n.setHours(n.getHours() - 2, 0, 0, 0)
                                : n.setHours(n.getHours() - 3, 30, 0, 0))
                            : c
                            ? ((a.times.tq = !0),
                              2 === p
                                ? n.setHours(n.getHours() - 2, 30, 0, 0)
                                : n.setHours(n.getHours() - 2, 0, 0, 0))
                            : (l ? (a.times.sq = !0) : (a.times.qq = !0),
                              2 === p
                                ? n.setHours(n.getHours() - 1, 0, 0, 0)
                                : n.setHours(n.getHours() - 2, 30, 0, 0));
                        for (var d = i; 0 < d; --d) {
                          n.setHours(n.getHours(), n.getMinutes() + 30, 0, 0);
                          var u = new Date(n.getTime());
                          d === i && (a.dateFrom = u.getTime()),
                            e.push({
                              id: d === i ? "first" : null,
                              date: u,
                              text: (0, o.formatTime)(u, t),
                            });
                        }
                        for (var m = 0; m < p; m += 1) {
                          n.setHours(n.getHours(), n.getMinutes() + 30, 0, 0);
                          var h = new Date(n.getTime());
                          e.push({ date: h, text: (0, o.formatTime)(h, t) });
                        }
                        for (var g = 0; g < i; g += 1) {
                          n.setHours(n.getHours(), n.getMinutes() + 30, 0, 0);
                          var f,
                            y = new Date(n.getTime());
                          g + 1 === i &&
                            ((f = new Date(n.getTime())).setHours(
                              n.getHours(),
                              n.getMinutes() + 30,
                              0,
                              0
                            ),
                            (a.dateTo = f.getTime())),
                            e.push({
                              id: g + 1 === i ? "last" : null,
                              date: y,
                              text: (0, o.formatTime)(y, t),
                            });
                        }
                        return e;
                      })(),
                    },
                  });
              }
              function T() {
                var e = n.System.component(["epg-timeslot", "arrow-left"])
                    .element,
                  t = n.System.component(["epg-timeslot", "arrow-right"])
                    .element;
                n.System.binding(t, "hidden", {
                  type: "class",
                  action: "remove",
                }),
                  n.System.binding(e, "hidden", {
                    type: "class",
                    action: "remove",
                  }),
                  a.dateFirst >= a.dateFrom &&
                    n.System.binding(e, "hidden", {
                      type: "class",
                      action: "add",
                    }),
                  a.dateLast <= a.dateTo &&
                    n.System.binding(t, "hidden", {
                      type: "class",
                      action: "add",
                    }),
                  m(n.System.component("epg-schedules-all"));
              }
              function E(e) {
                m(e.component);
              }
              function _(e) {
                var t = e.component;
                (e = (0, o.getHistoryData)("scrollY")),
                  t.iscroll && e && t.iscroll.scrollTo(0, -Math.abs(e)),
                  (a.firstLoad = !0),
                  (function () {
                    a.percentView =
                      (n.System.component("epg-schedules-all").element
                        .offsetWidth /
                        document.body.offsetWidth) *
                      100;
                    var e = n.System.component("epg-time-shadow").element,
                      t = n.State.system.responsive.small
                        ? a.percentView / 60
                        : a.percentView / 120,
                      r = (a.now.getTime() - a.dateFrom) / 1e3 / 60,
                      l = n.State.system.responsive.small ? 220 : 180;
                    (r *= t),
                      (t = !1),
                      a.currentTime.getDate() !== a.now.getDate() && (r = 0),
                      r <= 0 || l < r
                        ? ((a.initTime = !1),
                          n.System.binding(e, "hidden", {
                            type: "class",
                            action: "add",
                          }))
                        : ((t = !0),
                          n.System.binding(e, "hidden", {
                            type: "class",
                            action: "remove",
                          }),
                          n.System.binding(e, r, {
                            type: "style",
                            action: "add",
                            style: "width",
                            unit: "vw",
                          })),
                      t &&
                        (n.System.timeout(i.element, i.id, s.update),
                        d(),
                        a.initTime || (a.initTime = a.times)),
                      u(),
                      (0, o.setHistoryData)(),
                      setTimeout(function () {
                        a.updating = !1;
                      }, 100);
                  })();
              }
              function I(e) {
                (e = e.newSchedules),
                  (a.updating = !0),
                  (a.currentTime = new Date(
                    a.currentTime.getTime() + s.update
                  )),
                  (a.now = new Date(a.now.getTime() + s.update)),
                  n.System.clearTimer(i.id),
                  (n.System.component("epg-dates").refresh = !0),
                  (n.System.component("epg-timeslot").refresh = !0),
                  (a.centerHorizontal = !1),
                  e && (a.centerHorizontal = !0),
                  f({ component: n.System.component("epg-dates") }),
                  S({ component: n.System.component("epg-timeslot") }),
                  d(),
                  e && (a.needSchedules = !0),
                  g();
              }
              function w() {
                I({ newSchedules: !0 });
              }
              function k() {
                n.System.checkTimer(i.id) &&
                  ((a.resumeTimer = !0), n.System.clearTimer(i.id));
              }
              function O() {
                a.resumeTimer &&
                  ((a.resumeTimer = !1),
                  n.System.timeout(i.element, i.id, s.update));
              }
              function R() {
                (a.needSchedules = !0), O(), u(), D();
              }
              function x(e) {
                var t = e.component,
                  o = ((e = n.System.component("epg-channels")), t.data);
                a.list !== o.id &&
                  (e.iscroll && e.iscroll.scrollTo(0, 0),
                  (a.list = o.id),
                  (a.listName = o.name),
                  (a.url = o.url),
                  (a.channels = !1),
                  (a.channelsVisible = !1),
                  (a.channelsList = !1),
                  (a.needSchedules = !0),
                  (a.centerHorizontal = !0),
                  (a.initTime = !1),
                  n.System.clearTimer(i.id),
                  (t.component.refresh = !0),
                  (e.collection = { state: {} }),
                  (e.data = !1),
                  n.Source.collections["channels-list"].data.forEach(function (
                    e
                  ) {
                    e.id === o.id ? (e.selected = !0) : (e.selected = !1);
                  }),
                  b({ component: t.component }),
                  n.System.publish("DOM_RENDER", null, {
                    component: n.System.component("epg-dropdown").components[
                      "dropdown-toggle"
                    ],
                  }),
                  g()),
                  n.System.publish("DROPDOWN_CLOSE"),
                  n.System.publish("MODAL_CLOSE");
              }
              function A(e) {
                var t = { year: "numeric", month: "numeric", day: "numeric" },
                  s = (l = e.component).data.date,
                  r = l.component,
                  l =
                    ((e = (0, o.formatDate)(s, t)),
                    (0, o.formatDate)(a.currentTime, t));
                (t = e === (0, o.formatDate)(a.now, t)),
                  (l === e && !t) ||
                    ((s = new Date(s.getTime())),
                    t
                      ? (s.setHours(a.now.getHours(), a.now.getMinutes(), 0, 0),
                        (a.centerHorizontal = !0))
                      : (s.setHours(
                          a.currentTime.getHours(),
                          a.currentTime.getMinutes(),
                          0,
                          0
                        ),
                        (a.centerHorizontal = !1)),
                    (a.needSchedules = !0),
                    (a.initTime = !1),
                    (a.currentTime = s),
                    (r.refresh = !0),
                    (n.System.component("epg-timeslot").refresh = !0),
                    n.System.clearTimer(i.id),
                    n.System.component("epg-schedules").forEach(function (e) {
                      e.element.innerHTML = "";
                    }),
                    f({ component: r }),
                    S({ component: n.System.component("epg-timeslot") }),
                    g());
              }
              function P() {
                var e, t, s, i;
                a.responsive &&
                  ((e = a.responsive.large && !n.State.system.responsive.large),
                  (t =
                    a.responsive.medium && !n.State.system.responsive.medium),
                  (s = a.responsive.small && !n.State.system.responsive.small),
                  (i = a.responsive.uhd && !n.State.system.responsive.uhd),
                  e || t || s || i
                    ? (((n.State.dom.page.element.innerHTML = ""),
                      o.setHistoryData)(),
                      (r =
                        r ||
                        setTimeout(function () {
                          (r = !1),
                            n.System.reset("page"),
                            n.System.publish("DOM_PAGE");
                        }, 250)))
                    : E({
                        component: n.System.component("epg-schedules-all"),
                      }));
              }
              function C() {
                var e = n.System.component("epg-channels"),
                  t = n.System.component("epg-schedules-all");
                t &&
                  e &&
                  ((0, o.setHistoryData)(
                    a.currentTime.getTime(),
                    "currentTime"
                  ),
                  (0, o.setHistoryData)(a.list, "list"),
                  (0, o.setHistoryData)(a.listName, "listName"),
                  (0, o.setHistoryData)(a.url, "url"),
                  (0, o.setHistoryData)(t.iscroll.x, "scrollX"),
                  (0, o.setHistoryData)(e.iscroll.y, "scrollY"));
              }
              function D() {
                a.channelsVisible &&
                  a.channelsVisible.forEach(function (e) {
                    var t =
                      !!n.System.component("epg-schedules-container" + e) &&
                      n.System.component("epg-schedules-container" + e)
                        .components["epg-schedules"].components;
                    t &&
                      Object.keys(t).forEach(function (e) {
                        0 !== (e = t[e]).index &&
                          ((e = e.components["epg-schedule-content"]),
                          n.System.publish(
                            "DOM_REFRESH",
                            null,
                            { component: e },
                            !0
                          ));
                      });
                  });
              }
              function L(e) {
                var t = e.component,
                  o = n.System.component("epg-timeslot");
                (e = n.System.component("epg-schedules-all")),
                  o &&
                    e &&
                    ("epg-timeslot" === t.id
                      ? e.iscroll && e.iscroll.scrollTo(t.iscroll.x, 0)
                      : o.iscroll && o.iscroll.scrollTo(t.iscroll.x, 0));
              }
              function N(e) {
                var t,
                  s = e.component,
                  a = s.scrollToElement;
                a &&
                  ((l = !0),
                  (t =
                    !!(e = (t =
                      s.components.scroll.components["epg-channels-all"])
                      .components[Object.keys(t.components)[a.index]]) &&
                    e.element.offsetHeight + 2) &&
                    !s.iscroll &&
                    ((t -= (t / 100) * a.visibility),
                    (a = n.System.component("epg-channels").element),
                    e.element.scrollIntoView(),
                    a.scrollBy(0, t),
                    (0, o.waitFrames)(10).then(function () {
                      (l = !1), n.System.publish("DOM_RESIZE");
                    })));
              }
              function M(e) {
                var t,
                  o,
                  s,
                  i = e.options,
                  r = e.details,
                  l = i.direction || r;
                a.updating ||
                  ((t = new Date(a.currentTime.getTime())),
                  (s = (o = n.System.component("epg-timeslot")).components[
                    "arrow-left"
                  ].element.classList.contains("hidden")),
                  (e = o.components["arrow-right"].element.classList.contains(
                    "hidden"
                  )),
                  (i = n.System.component(
                    "epg-timeslot-itemfirst"
                  ).data.date.getTime()),
                  (r = n.System.component(
                    "epg-timeslot-itemlast"
                  ).data.date.getTime()),
                  (o = "prev" === l && s),
                  (s = "next" === l && e),
                  (e = (i - a.dateFirst) / 6e4),
                  (i = (a.dateLast - r) / 6e4),
                  (r = t.getMinutes()),
                  "prev" === l
                    ? (r -= 30 == e ? 30 : 60)
                    : (r += 30 == i ? 30 : 60),
                  t.setHours(t.getHours(), r, 0, 0),
                  o || s || ((a.currentTime = t), I({ newSchedules: !0 })));
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.component,
                    o = e.action,
                    r = e.options,
                    l = e.details;
                  (e = {
                    init: h,
                    ready: g,
                    loadDates: f,
                    datesReady: y,
                    setDaysArrows: v,
                    loadList: b,
                    loadTime: S,
                    hoursReady: T,
                    setTimeScroll: E,
                    channelsReady: _,
                    update: I,
                    parentalChange: w,
                    stopTimer: k,
                    resumeTimer: O,
                    scrollChannels: R,
                    changeList: x,
                    changeDate: A,
                    reload: P,
                    save: C,
                    refreshSchedules: D,
                    syncHeader: L,
                    orientationChanged: N,
                    pagination: M,
                  }),
                    (i = n.System.component("epg-container")),
                    (s = n.Settings.app.epg),
                    (a = i.settings),
                    o && e[o] && e[o]({ component: t, options: r, details: l });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      9275: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.component,
                    n = e.rootComponent,
                    o = e.action,
                    s = e.details;
                  (e = { concurrency: a, playback: i }),
                    o &&
                      e[o] &&
                      e[o]({ component: t, rootComponent: n, details: s });
                });
              var s = [465, 466, 467];
              function a(e) {
                var t = e.rootComponent;
                (e = n.System.translate(["playback-error", "errorTitle"])),
                  n.System.publish(
                    "MODAL_OPEN",
                    null,
                    {
                      componentId: "error",
                      data: { title: e, text: t.settings.detailsMessage },
                      backdrop: !0,
                      backdropClose: !0,
                    },
                    !0
                  );
              }
              function i(e) {
                var t,
                  a,
                  i,
                  r,
                  l,
                  c = e.component,
                  p = e.details,
                  d = n.System.component("playback-error");
                (d.state = p.error),
                  -1 !== s.indexOf(p.error) &&
                    ((d.state = "concurrencyError"),
                    (i = (t = { component: d, details: p }).component),
                    (e = t.details),
                    (r = !1),
                    (l = []),
                    e.devices &&
                      e.devices.length &&
                      e.devices.forEach(function (e) {
                        (a = e.deviceName || "Unknown"),
                          (r = r || "Unknown" !== a),
                          l.push(a);
                      }),
                    (e.limit && r) || (l = []),
                    l.length
                      ? ((t =
                          1 < e.limit
                            ? "prmMaxStreamsDevices"
                            : "prmMaxStreamsDevicesOne"),
                        (i.settings.detailsMessage = (0,
                        o.stringInsert)(
                          n.System.translate(["playback-error", t]),
                          [l.join("\n"), e.limit]
                        )))
                      : (i.settings.detailsMessage = n.System.translate([
                          "playback-error",
                          "prmMaxStreamsText",
                        ]))),
                  n.System.publish("DOM_RENDER", null, { component: d }),
                  p.error &&
                    (n.System.publish("TRICKPLAY_TOGGLE", null, {
                      component: c,
                      show: !1,
                    }),
                    n.System.publish("CLEAR_PLAYBACK_INFO", null, {
                      component: c,
                    }));
              }
            }.apply(t, n)) || (e.exports = n);
      },
      9757: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              function o(e) {
                var t = !1;
                e.fields.forEach(function (n) {
                  e.params[n] || (t = !0);
                }),
                  (e.invalid = t);
              }
              function s(e) {
                var t = n.System.component("login-container");
                t &&
                  ((t.settings.loading = e),
                  n.System.publish("DOM_REFRESH", null, { component: t }));
              }
              function a(e) {
                (e = e.options).type &&
                  n.Settings.app.login.sso[e.type] &&
                  location.replace(n.Settings.app.login.sso[e.type]);
              }
              function i(e) {
                var t = e.component,
                  o = e.rootComponent;
                if (
                  n.State.router.params.token &&
                  (n.Settings.app.login.sso.cognito ||
                    n.Settings.app.login.sso.generic)
                )
                  try {
                    var a = JSON.parse(n.State.router.params.token);
                    if ((delete n.State.router.params.token, a.mnError)) {
                      var i = "error-server";
                      try {
                        var r = JSON.parse(a.mnError);
                        (i = "oauth"), (o.settings.error.oauth = r.response);
                      } catch (e) {
                        n.System.error(
                          "FORM",
                          "Failed to parse JSON",
                          a.mnError
                        );
                      }
                      d({ rootComponent: o, details: i, options: {} });
                    } else {
                      var l = a.mnEdgeEndPoint;
                      (n.Settings["base-api"] = "".concat(
                        l,
                        "/xtv-ws-client/api/"
                      )),
                        (n.Settings["base-api-ssl"] = "".concat(
                          l,
                          "/xtv-ws-client/api/"
                        )),
                        n.System.publish("DATA_FETCH", null, {
                          component: t,
                          collectionId: "login-oauth",
                          override: {
                            url: "v1/provision/token/oauth/".concat(
                              a.mnProviderId
                            ),
                            params: { token: a.mnToken },
                          },
                        });
                    }
                  } catch (e) {
                    delete n.State.router.params.token,
                      d({
                        rootComponent: o,
                        details: "error-server",
                        options: {},
                      });
                  }
                else s(!1);
              }
              function r(e) {
                var t = e.component;
                l({ component: t, options: e.options }),
                  (t.settings.ssoGeneric = n.Settings.app.login.sso.generic),
                  (t.settings.ssoCognito = n.Settings.app.login.sso.cognito),
                  (t.settings.credentials = n.Settings.app.login.default),
                  n.Settings.app.login.redirect && s(!0);
              }
              function l(e) {
                var t = e.component;
                (e = e.options),
                  t.form ||
                    (t.form = { fields: e.fields, params: {}, invalid: !0 });
              }
              function c(e) {
                var t = e.component,
                  n = e.element,
                  s = e.form;
                (e = t.id),
                  "invalid" !== t.state
                    ? ((s.params[e] = s.params[e] || {}),
                      (s.params[e].default = n.value),
                      n.classList.remove("invalid"))
                    : (delete s.params[e], n.classList.add("invalid")),
                  o(s);
              }
              function p(e) {
                var t = e.component,
                  n = e.element;
                (e = e.form),
                  (t = t.id),
                  (e.params[t] = { default: n.checked }),
                  o(e);
              }
              function d(e) {
                var t = e.rootComponent,
                  o = e.element,
                  s = e.options;
                (e = e.details),
                  (t.state = e || "error"),
                  (t.parent.settings.loading = !1),
                  n.System.publish("DOM_RENDER", null, { component: t }),
                  n.System.publish("DOM_RENDER", null, { component: t.parent }),
                  s.timeout && n.System.timeout(o, t.id, s.timeout);
              }
              function u(e) {
                ((e = e.rootComponent).state = "default"),
                  n.System.publish("DOM_RENDER", null, { component: e }),
                  n.System.clearTimer(e.id);
              }
              function m(e) {
                ((e = e.rootComponent).settings.active = null),
                  (n.System.component("header").settings.searchOpen = null),
                  n.System.publish("DOM_RENDER", null, { component: e }),
                  n.System.publish("DOM_REFRESH", null, {
                    component: n.System.component("search-trigger"),
                  });
              }
              function h(e) {
                (e = e.rootComponent),
                  "search" !== n.State.router.page &&
                    ((e.settings.active = null),
                    (n.System.component("header").settings.searchOpen = null),
                    n.System.publish("DOM_RENDER", null, { component: e }),
                    n.System.publish("DOM_REFRESH", null, {
                      component: n.System.component("search-trigger"),
                    }));
              }
              function g(e) {
                var t = e.rootComponent;
                (e = e.form).invalid
                  ? e.fields.forEach(function (e) {
                      (e = t.components[e]) &&
                        (e.element.focus(), e.element.blur());
                    })
                  : n.System.publish("ROUTER_NAVIGATE", null, {
                      page: "search",
                      params: {
                        searchText: encodeURIComponent(
                          e.params.searchText.default
                        ),
                      },
                    });
              }
              function f(e) {
                var t = e.rootComponent;
                (e = e.form),
                  (t.state = "loading"),
                  n.System.publish("DOM_RENDER", null, { component: t }),
                  e.invalid
                    ? (e.fields.forEach(function (e) {
                        (e = t.components[e]) &&
                          (e.element.focus(), e.element.blur());
                      }),
                      n.System.publish("FORM_ERROR", null, "error"))
                    : n.System.publish("DATA_FETCH", null, {
                        component: t,
                        override: { params: e.params },
                      });
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t,
                    n = e.element,
                    o = e.component,
                    s = e.options,
                    y = e.action,
                    v = e.details,
                    b = {
                      oauth: a,
                      checkOauth: i,
                      setForm: l,
                      setLoginForm: r,
                      setInput: c,
                      setCheckbox: p,
                      showError: d,
                      hideError: u,
                      hideSearch: m,
                      hideSearchPage: h,
                      search: g,
                      send: f,
                    };
                  y &&
                    b[y] &&
                    ((e = (t = o.component || o) && t.form),
                    b[y]({
                      rootComponent: t,
                      form: e,
                      element: n,
                      component: o,
                      options: s,
                      action: y,
                      details: v,
                    }));
                });
            }.apply(t, n)) || (e.exports = n);
      },
      2668: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              function s(e) {
                var t = e.component;
                (e = "default"),
                  n.State.system.responsive.small &&
                    (e = n.State.system.responsive["small-landscape"]
                      ? "default"
                      : "small"),
                  (e = t.element.getAttribute("src-".concat(e))),
                  t.element.setAttribute("src", e || "");
              }
              function a(e) {
                var t = e.component;
                r({ component: t, options: (e = e.options) }),
                  (e = (t = { component: t, options: e }).component),
                  (t = t.options)["image-component"],
                  (e = (0, o.findInObject)(e, [
                    "components",
                    t["image-component"],
                  ])) &&
                    ((t = e.components.img.element),
                    (e = "default"),
                    n.State.system.responsive.small &&
                      (e = n.State.system.responsive["small-landscape"]
                        ? "default"
                        : "small"),
                    (e = t.getAttribute("src-".concat(e))),
                    t.setAttribute("src", e || ""));
              }
              function i(e) {
                var t,
                  s = e.component,
                  a = e.options,
                  i = a.property || "image";
                (e = a.image || "image"),
                  s.data &&
                    s.data[i] &&
                    !s.data.restricted &&
                    (t = a["image-component"]
                      ? (0, o.findInObject)(s, a["image-component"])
                      : s.components[e]) &&
                    !t.components.img.imgAppend &&
                    (n.System.binding(t.components.img.element, s.data[i], {
                      type: "attribute",
                      action: "set",
                      attribute: "src",
                    }),
                    (t.components.img.imgAppend = !0),
                    (t.components.img.element.onerror = function () {
                      (s.data[i] = null),
                        n.System.publish("DOM_REFRESH", null, { component: t });
                    }));
              }
              function r(e) {
                var t,
                  s = e.component,
                  a = e.options,
                  i = a.containerId,
                  r = a.property || "image",
                  l = a.setting || "image",
                  c = a.image || "image",
                  p =
                    ((e =
                      (s.data && s.data[r]) || (s.settings && s.settings[l])),
                    [s]);
                e &&
                  (a["image-component"]
                    ? (t = (0, o.findInObject)(s, [
                        "components",
                        a["image-component"],
                      ]))
                    : (t = i
                        ? s.components[i].components[c]
                        : (0, o.findInObject)(s, ["components", c])).parent
                        .components["no-image"] &&
                      p.push(t.parent.components["no-image"]),
                  Array.isArray(a["no-image-components"]) &&
                    a["no-image-components"].forEach(function (e) {
                      (e = n.System.component(e)) && p.push(e);
                    }),
                  t &&
                    ((a = t.components.img.element),
                    p.push(t),
                    (a.onerror = function () {
                      p.forEach(function (e) {
                        var t, o;
                        (o = (t = { property: r, setting: l, component: e })
                          .property),
                          (e = t.setting),
                          (t = t.component).data && (t.data[o] = null),
                          t.settings && (t.settings[e] = null),
                          "super-item" === t.id && (t.component.refresh = !0),
                          n.System.publish("DOM_REFRESH", null, {
                            component: t,
                          });
                      });
                    })));
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.component,
                    n = e.action,
                    o = e.options;
                  (e = {
                    fallback: r,
                    append: i,
                    breakpoint: s,
                    breakpointSourceAndFallback: a,
                  }),
                    n && e[n] && e[n]({ component: t, options: o });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      6259: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              function s(e) {
                var t = e.rootComponent,
                  o = n.System.getItem(["customer", "parentalControlOn"]),
                  s = n.System.getItem("parentalStatus") || "locked";
                (e = n.System.component("parental-icon")),
                  o &&
                    ("locked" === s
                      ? (n.System.publish("MODAL_CLOSE"),
                        n.System.publish("MODAL_OPEN", null, {
                          componentId: "parental",
                          backdrop: !0,
                          backdropClose: !0,
                        }))
                      : (n.System.removeItem("parentalTimeout"),
                        n.System.setItem("parentalStatus", "locked"),
                        n.System.publish("MODAL_CLOSE"),
                        n.System.publish("PARENTAL_CHANGED", null),
                        n.System.publish("DATA_FETCH_ALL", null, {
                          tag: "parental",
                        }),
                        n.System.publish("DOM_RENDER", null, { component: e }),
                        n.System.clearTimer(t.id)));
              }
              function a() {
                var e = n.System.component("search-form"),
                  t = n.System.component("searchText").element;
                (e.settings.active = "active"),
                  (n.System.component("header").settings.searchOpen = !0),
                  "search" !== n.State.router.page
                    ? (t.value = "")
                    : (t.value = n.State.router.params.searchText),
                  n.System.publish("DOM_RENDER", null, { component: e }),
                  n.System.publish("DOM_REFRESH", null, {
                    component: n.System.component("search-trigger"),
                  }),
                  t.focus();
              }
              function i(e) {
                var t = e.component;
                (e = e.data), console.log(t, e, "prompt click");
              }
              function r(e) {
                var t,
                  i = e.component,
                  r = e.data,
                  l = e.element,
                  c = e.rootComponent,
                  p = e.options,
                  d = e.event;
                "page" === r.type
                  ? c.scrolling ||
                    (c.parent &&
                      c.parent.component &&
                      c.parent.component.scrolling) ||
                    ((0, o.saveComponentToHistory)({
                      component: i,
                      rootComponent: c,
                    }),
                    (t = n.Source.constants["content-types"]),
                    (e = r.params || {}),
                    (i = { page: p.pageId || r.pageId }),
                    r.paramsType &&
                      (e.type = p.origin ? r.contentType : r.paramsType),
                    r.paramsSeason &&
                      ((e.seasonId = r.paramsSeason), (e.type = t.series)),
                    0 < Object.keys(e).length && (i.params = e),
                    r.linkId && (i.id = p.origin ? r.id : r.linkId),
                    r.restricted
                      ? (d.stopPropagation(),
                        n.System.publish("MODAL_OPEN", null, {
                          componentId: "parental",
                          backdrop: !0,
                          backdropClose: !0,
                        }),
                        n.System.publish("PARENTAL_SET_CALLBACK", null, {
                          event: "ROUTER_NAVIGATE",
                          options: i,
                        }))
                      : i.page && n.System.publish("ROUTER_NAVIGATE", null, i))
                  : "logout" === r.type
                  ? (n.System.publish("LOGOUT"), n.System.logout())
                  : "lang" === r.type
                  ? n.System.publish("ROUTER_LANGUAGE", null, { lang: r.lang })
                  : "parental" === r.type
                  ? s({ element: l, rootComponent: c })
                  : "search" === r.type
                  ? a()
                  : "app" === r.type
                  ? window.open(r.app.universalLink, "_blank")
                  : n.System.warning("NAVBAR", "Unsupported link type");
              }
              function l(e) {
                var t,
                  o = e.data,
                  s = e.rootComponent;
                s.settings.seeAllButton
                  ? ((e = s.settings.allPage),
                    "search" === n.State.router.page &&
                      (t = {
                        searchText: encodeURIComponent(
                          n.State.router.params.searchText
                        ),
                      }),
                    n.System.publish("ROUTER_NAVIGATE", null, {
                      page: e,
                      id: ("grid_of_posters" === e ? s : o).id,
                      params: t,
                    }))
                  : n.System.warning("STRIPE", "See All not available");
              }
              function c() {
                n.System.publish("ROUTER_NAVIGATE", null, {
                  page: n.Settings.router.page.default,
                });
              }
              function p() {
                n.System.publish("ROUTER_BACK");
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.element,
                    n = e.component,
                    o = e.action,
                    d = e.options,
                    u = e.event,
                    m = n.data || {},
                    h = n.component;
                  (e = {
                    seeAll: l,
                    search: a,
                    toggleParental: s,
                    prompt: i,
                    navigate: r,
                    home: c,
                    back: p,
                  }),
                    o &&
                      e[o] &&
                      e[o]({
                        data: m,
                        component: n,
                        element: t,
                        rootComponent: h,
                        options: d,
                        event: u,
                      });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      6983: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              function o(e) {
                var t = e.details,
                  o = e.options,
                  s =
                    ((e = n.System.component("modal")), t.componentId ? t : o),
                  a = s.componentId,
                  i = e.components["modal-container"].components["modal-body"];
                (t = n.System.component(a)),
                  (o = null),
                  (i.source.layout = i.source.layout || []),
                  (i.source.content = i.source.content || {}),
                  n.System.publish("MODAL_CLOSE"),
                  s.dropdown && (t = t.components.dropdown),
                  t
                    ? (i.source.layout.push(["modal-" + a]),
                      s.reuse
                        ? ((i.source.content["modal-" + a] = t.source),
                          (i.source.content["modal-" + a].settings = {
                            translateId: a,
                          }))
                        : (i.source.content["modal-" + a] = {
                            settings: { translateId: a },
                            component: a,
                          }))
                    : ((t = n.System.getSource("components", a)),
                      i.source.layout.push([a]),
                      (i.source.content[a] = t)),
                  n.System.publish("DOM_PARSE_COMPONENT", null, {
                    componentId: e.id,
                  }),
                  s.title && (o = !0 === s.title ? "title" : s.title),
                  s.data && (e.cache = s.data),
                  (e.settings.active = a),
                  (e.settings.contentComponent = "modal-".concat(a)),
                  (e.settings.backdrop = s.backdrop),
                  (e.settings.backdropClose = s.backdropClose),
                  (e.settings.fullscreen = s.fullscreen),
                  (e.settings.animate = s.animate),
                  (e.settings.title = o),
                  (e.settings.image = s.image || null),
                  (e.settings.dropdown = s.dropdown),
                  (e.settings.translateId = s.translateId || a),
                  n.System.publish("DOM_RENDER", null, { component: e }),
                  n.System.publish("PAGE_TOGGLE_SCROLLS", null, {
                    disable: !0,
                  }),
                  setTimeout(function () {
                    var e;
                    s.collectionId
                      ? n.System.publish("DATA_FETCH", null, {
                          collectionId: s.collectionId,
                          component: i.components["modal-" + a],
                        })
                      : ((e = n.System.component(a)),
                        n.System.publish("DOM_RENDER", null, { component: e }));
                  }, 0);
              }
              function s(e) {
                var t = e.options,
                  o = n.System.component("modal"),
                  s = o.components["modal-container"].components["modal-body"];
                (e = t.componentId && o.settings.active === t.componentId),
                  n.System.publish("PAGE_TOGGLE_SCROLLS", null),
                  (t.componentId && !e) ||
                    ((s.element.innerHTML = ""),
                    (s.components = {}),
                    (s.source.layout = []),
                    (s.source.content = {}),
                    (o.settings.active = !1),
                    delete o.cache,
                    delete o.data,
                    o.settings.animate && !t.noAnimate
                      ? ((o.settings.animate = null),
                        n.System.binding(o.element, "animate-close", {
                          type: "class",
                          action: "add",
                        }),
                        setTimeout(function () {
                          n.System.publish("DOM_RENDER", null, {
                            component: o,
                          }),
                            n.System.binding(o.element, "animate-close", {
                              type: "class",
                              action: "remove",
                            });
                        }, 490))
                      : n.System.publish("DOM_RENDER", null, { component: o }));
              }
              function a(e) {
                var t = e.component,
                  n = e.details;
                (e = e.options),
                  t.element === n.target &&
                    t.settings.backdropClose &&
                    s({ options: e });
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.component,
                    n = e.action,
                    i = e.details,
                    r = e.options;
                  (e = { open: o, closeBackdrop: a, close: s }),
                    n && e[n] && e[n]({ component: t, details: i, options: r });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      7814: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              function o() {
                var e = n.System.component("parental-icon");
                n.System.removeItem("parentalTimeout"),
                  n.System.setItem("parentalStatus", "locked"),
                  e && n.System.publish("DOM_REFRESH", null, { component: e }),
                  n.System.publish("DATA_FETCH_ALL", null, { tag: "parental" }),
                  n.System.publish("PARENTAL_CHANGED", null),
                  n.System.clearTimer("parentalTimeout");
              }
              function s() {
                var e = n.System.getItem(["customer", "parentalControlOn"]),
                  t = n.System.getItem("parentalStatus") || "locked";
                e &&
                  ("locked" === t
                    ? (n.System.publish("MODAL_CLOSE"),
                      n.System.publish("MODAL_OPEN", null, {
                        componentId: "parental",
                        backdrop: !0,
                        backdropClose: !0,
                      }))
                    : o());
              }
              function a(e) {
                var t = e.component;
                (e = e.details).event &&
                  (t.settings.callback = {
                    event: e.event,
                    options: e.options,
                  });
              }
              function i() {
                o();
              }
              function r() {
                n.System.component("pin-input").element.focus();
              }
              function l(e) {
                var t = e.rootComponent,
                  o = t && t.form,
                  s = n.System.component("pin-input");
                (e =
                  (o.params["pin-input"] && o.params["pin-input"].default) ||
                  ""),
                  (s.element.value = ""),
                  (o.params["pin-input"] = ""),
                  n.System.getItem(["user", "pin"]) === e
                    ? (function (e) {
                        var t = e.rootComponent,
                          o = n.System.component("parental-icon");
                        (e =
                          1e3 *
                          n.System.getItem(["customer", "pcUnlockTimeout"])),
                          n.System.publish("MODAL_CLOSE", null),
                          n.System.setItem("parentalStatus", "unlocked"),
                          o &&
                            n.System.publish("DOM_REFRESH", null, {
                              component: o,
                            }),
                          n.System.publish("DATA_FETCH_ALL", null, {
                            tag: "parental",
                          }),
                          n.System.publish("PARENTAL_CHANGED", null),
                          n.System.setItem("parentalTimeout", Date.now() + e),
                          n.System.timeout(window, "parentalTimeout", e),
                          (t =
                            (e =
                              (t = (e = { component: t }).component).settings
                                .callback && t.settings.callback.event) &&
                            t.settings.callback.options),
                          e && n.System.publish(e, null, t);
                      })({ rootComponent: t })
                    : ((t.state =
                        void 0 === e || "" === e
                          ? "errorPinEmpty"
                          : "errorPinWrong"),
                      n.System.publish("DOM_RENDER", null, { component: t }));
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.component,
                    n = e.rootComponent,
                    o = e.action,
                    c = e.details;
                  (e = {
                    toggleParental: s,
                    setCallback: a,
                    checkPin: l,
                    timeout: i,
                    focus: r,
                  }),
                    o &&
                      e[o] &&
                      e[o]({ component: t, rootComponent: n, details: c });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      2756: function (e, t, n) {
        (n = [t, n(6918), n(6510), n(5438)]),
          void 0 ===
            (n = function (e, n, o, s) {
              "use strict";
              function a(e) {
                var t = e.component,
                  o = !0 === e.show,
                  s = n.System.component("channel-change"),
                  a = n.System.component("playback-info");
                (e = n.System.component("player-close")),
                  (t.settings.showInfo = o),
                  (a.settings.visible = o),
                  (s.settings.visible = o),
                  (e.settings.visible = o),
                  n.System.publish("DOM_REFRESH", null, { component: s }),
                  n.System.publish("DOM_REFRESH", null, { component: a }),
                  n.System.publish("DOM_REFRESH", null, { component: e });
              }
              function i(e) {
                var t = n.Source.constants["content-types"],
                  o = n.System.component("channel-change");
                (o.settings.currentChannel = e.channelId || e.id),
                  (o.settings.number = e.channelNumber),
                  (o.settings.logo = e.channelLogo),
                  (o.settings.callSign = e.callSign),
                  (o.settings.enabled =
                    e.contentType === t.tv_channel ||
                    e.contentType === t.tv_schedule),
                  n.System.publish("DOM_RENDER", null, { component: o });
              }
              function r(e) {
                var t = e.data,
                  o = e.show,
                  s = e.restricted;
                (e = n.System.component("playback-info")),
                  t &&
                    ((e.settings.visible = o || !1),
                    (e.settings.title = t.playbackTitle || null),
                    (e.settings.subtitle =
                      t.subtitleList && 0 < t.subtitleList.length),
                    (e.settings.restricted = s),
                    n.System.publish("DATA_FETCH", null, {
                      component: n.System.component("genre"),
                      override: { data: t.genreList || [] },
                    }),
                    n.System.publish("DATA_FETCH", null, {
                      component: n.System.component("subtitleItems"),
                      override: { data: t.subtitleList || [] },
                    }),
                    n.System.publish("DOM_RENDER", null, { component: e }));
              }
              function l(e) {
                var t = e.component;
                (e = e.schedule),
                  (0, o.removeUI)(),
                  n.System.publish("PLAYBACK_ERROR", null, {
                    component: t,
                    error: null,
                  }),
                  n.System.publish("ROUTER_CHANGE_URL", null, {
                    page: "fullscreen",
                    id: e.id,
                    params: { type: e.contentType },
                  }),
                  n.System.publish("DATA_FETCH", null, { component: t });
              }
              function c(e) {
                var t = e.channel,
                  s = n.Source.constants["content-types"],
                  a = n.System.component("playback");
                (e = n.System.component("playback-channels")),
                  (0, o.removeUI)(),
                  n.System.publish("PLAYBACK_ERROR", null, {
                    component: a,
                    error: null,
                  }),
                  n.System.publish("ROUTER_CHANGE_URL", null, {
                    page: "fullscreen",
                    id: t.id,
                    params: { type: s.tv_channel },
                  }),
                  n.System.publish("TRICKPLAY_TOGGLE", null, {
                    component: a,
                    show: !1,
                  }),
                  e.data.length
                    ? O({ component: e })
                    : n.System.publish("DATA_FETCH", null, { component: e }),
                  f({ component: a, element: a.element });
              }
              function p(e) {
                e.episodic
                  ? n.System.publish("ROUTER_NAVIGATE", null, {
                      id: e.seriesId,
                      page: "series",
                      params: { seasonId: e.seasonId },
                    })
                  : n.System.publish("ROUTER_NAVIGATE", null, {
                      id: e.id,
                      page: "asset",
                      params: { type: e.contentType },
                    });
              }
              function d(e) {
                var t = e.component.data;
                (e = n.Source.constants["content-types"]),
                  t.contentType === e.trailer && n.State.router.params.asset
                    ? n.System.publish("ROUTER_NAVIGATE", null, {
                        id: n.State.router.params.asset,
                        page: "asset",
                        params: { type: e.asset },
                      })
                    : t.contentType === e.asset
                    ? p(t)
                    : n.System.publish("ROUTER_BACK");
              }
              function u(e) {
                var t = e.component,
                  o = t.data,
                  s = n.Source.constants["content-types"];
                (e =
                  (e = n.System.component("playback-schedule")).data &&
                  e.data[0]),
                  o.contentType === s.tv_channel &&
                    e &&
                    l({ component: t, schedule: e });
              }
              function m(e) {
                var t = e.component.data,
                  o = n.Source.constants["content-types"],
                  s =
                    ((e =
                      (s = n.System.component("playback-schedule")).data &&
                      s.data[0]),
                    {
                      page: "asset",
                      id: t.id,
                      params: { type: t.contentType },
                    });
                t.contentType === o.trailer &&
                  n.State.router.params.asset &&
                  ((s.id = n.State.router.params.asset),
                  (s.params.type = o.asset)),
                  t.contentType === o.tv_channel &&
                    e &&
                    ((s.id = e.id), (s.params.type = e.contentType)),
                  n.System.publish("ROUTER_NAVIGATE", null, s);
              }
              function h(e) {
                var t = e.component;
                (e = e.details),
                  (t.settings.trickplay = !0 === e.show),
                  n.System.publish("DOM_REFRESH", null, { component: t });
              }
              function g(e) {
                a({ component: e.component });
              }
              function f(e) {
                var t = e.component;
                (e = e.element),
                  t.settings.showInfo || a({ component: t, show: !0 }),
                  t.settings.paused || n.System.timeout(e, t.id, 3e3);
              }
              function y(e) {
                var t = e.component,
                  o = e.element;
                e.details.stop
                  ? (n.System.clearTimer(t.id),
                    (t.settings.paused = !0),
                    a({ component: t, show: !0 }))
                  : ((t.settings.paused = !1), f({ component: t, element: o }));
              }
              function v(e) {
                var t = e.component,
                  o = e.data;
                (e = { dateFrom: Date.now(), size: 1 }),
                  i(o),
                  (t.data = null),
                  n.System.publish(
                    "DATA_FETCH",
                    null,
                    {
                      component: t,
                      override: { options: { id: o.id }, params: e },
                    },
                    !1
                  );
              }
              function b(e) {
                var t = e.component;
                (e = n.System.component("player")).settings.playing &&
                  n.System.publish("PLAYER_UNLOAD", null, { component: e }),
                  n.System.publish("PLAYBACK_ERROR", null, {
                    component: t,
                    error: "restrictedContent",
                  });
              }
              function S(e) {
                var t = (i = e.component),
                  o = i.data,
                  a = n.Source.constants["content-types"],
                  i =
                    (e = n.System.component("playback-schedule")).data &&
                    e.data[0];
                o.contentType === a.tv_channel &&
                  i &&
                  Date.now() > i.end &&
                  ((t.settings.nextProgram = !0),
                  (n.System.component("player").nextTunein = !0),
                  (0, s.analyticsTune)("out"),
                  v({ component: e, data: o }));
              }
              function T(e) {
                var t = e.component,
                  o = n.Source.constants["content-types"],
                  s = n.System.component("next-schedule");
                (e = t.data).contentType === o.tv_schedule
                  ? ((t = { dateFrom: e.endDateTime, size: 1 }),
                    (s.data = null),
                    n.System.publish(
                      "DATA_FETCH",
                      null,
                      {
                        component: s,
                        override: { options: { id: e.channelId }, params: t },
                      },
                      !1
                    ))
                  : e.contentType === o.asset
                  ? p(e)
                  : e.contentType === o.trailer &&
                    n.State.router.params.asset &&
                    n.System.publish("ROUTER_NAVIGATE", null, {
                      id: n.State.router.params.asset,
                      page: "asset",
                      params: { type: o.asset },
                    });
              }
              function E(e) {
                var t = e.component;
                (e = t.data[0]) && (e.restartTV || e.catchupTV)
                  ? l({ component: t.parent, schedule: e })
                  : c({ channel: { id: e.channelId } });
              }
              function _(e) {
                var t = e.rootComponent,
                  o = e.options,
                  s = ((e = n.System.component("playback")), t.data),
                  a = t.settings.currentChannel,
                  i = null;
                if (
                  (n.System.publish("PLAYBACK_ERROR", null, {
                    component: e,
                    error: null,
                  }),
                  Array.isArray(s))
                )
                  for (var r = 0; r < s.length; r += 1)
                    if (s[r].id === a) {
                      var l = r + o.direction;
                      s[l]
                        ? (i = s[l])
                        : l === s.length
                        ? (i = s[0])
                        : -1 === l && (i = s[s.length - 1]);
                      break;
                    }
                i &&
                  i.id !== a &&
                  (n.System.clearTimer("tuneTimeout"),
                  (t.settings.logo = i.image),
                  (t.settings.number = i.number),
                  n.System.publish("DOM_REFRESH", null, { component: t }),
                  c({ channel: i }));
              }
              function I(e) {
                var t = (s = e.component).data && s.data[0],
                  o = s.parent,
                  s = (e = n.System.component("player")).settings.playing;
                n.System.clearTimer("nextProgramTimeout"),
                  t
                    ? (t.restricted
                        ? (b({ component: o }),
                          r({ data: t, show: !1, restricted: t.restricted }))
                        : (s ||
                            n.System.timeout(
                              o.element,
                              "tuneTimeout",
                              250,
                              "TUNE_TIMEOUT"
                            ),
                          r({
                            data: t,
                            show: !o.settings.nextProgram,
                            restricted: t.restricted,
                          })),
                      (o.tuneData.buttons.restart = t.catchupTV || t.restartTV),
                      (o.tuneData.buttons.info = !0),
                      n.System.publish(
                        "PLAYER_UPDATE",
                        null,
                        { component: e, buttons: o.tuneData.buttons },
                        !1
                      ),
                      n.System.timeout(
                        o.element,
                        "nextProgramTimeout",
                        t.end - Date.now(),
                        "NEXT_PROGRAM_START"
                      ))
                    : (P(),
                      s ||
                        n.System.timeout(
                          o.element,
                          "tuneTimeout",
                          250,
                          "TUNE_TIMEOUT"
                        )),
                  o.settings.nextProgram ||
                    f({ component: o, element: o.element }),
                  (o.settings.nextProgram = !1);
              }
              function w(e) {
                var t = e.component,
                  o = n.System.getItem("channels-count", "collections") || 1e3;
                -1 ===
                  [
                    (e = n.Source.constants["content-types"]).asset,
                    e.trailer,
                  ].indexOf(n.State.router.params.type) &&
                  n.System.publish(
                    "DATA_FETCH",
                    null,
                    { component: t, override: { params: { size: o } } },
                    !1
                  );
              }
              function k(e) {
                var t = e.component,
                  o = n.System.component("player");
                (e = t.tuneData.asset),
                  (t = t.tuneData.buttons),
                  n.System.publish(
                    "PLAYER_SET",
                    null,
                    { component: o, data: e, buttons: t },
                    !1
                  );
              }
              function O(e) {
                var t = e.component,
                  o = n.System.component("playback");
                (e = n.Source.constants["content-types"]),
                  (t = t.data),
                  n.State.router.params.type === e.tv_channel &&
                    ((t = (function (e, t) {
                      if (Array.isArray(e))
                        for (var n = 0; n < e.length; n += 1)
                          if (e[n].id === t) return e[n];
                      return null;
                    })(t, n.State.router.id)),
                    (o.cache = t),
                    (o.data = t),
                    n.System.publish("DOM_RENDER", null, { component: o }));
              }
              function R(e) {
                var t = e.component,
                  o = n.Source.constants["content-types"];
                (e = n.System.getItem(["customer", "enableVOD"])),
                  n.State.router.params.type !== o.tv_channel &&
                    ((n.State.router.params.type !== o.asset &&
                      n.State.router.params.type !== o.trailer) ||
                    e
                      ? ((o = o.asset === n.State.router.params.type),
                        n.System.publish("DATA_FETCH", null, {
                          component: t,
                          override: o ? { cache: { time: 0 } } : {},
                        }))
                      : n.System.publish("DOM_RENDER", null, { component: t }));
              }
              function x(e) {
                var t = e.component,
                  o = {},
                  s = t.data,
                  a = n.Source.constants["content-types"],
                  l = n.System.component("player"),
                  c = n.System.component("player-wrapper"),
                  p = n.System.component("playback-schedule");
                (e = { stop: !1, restart: !1 }),
                  (a = s && s.contentType === a.tv_channel),
                  y({
                    component: t,
                    element: t.element,
                    details: { stop: !0 },
                  }),
                  s
                    ? ((o.prmId = s.prmId),
                      (o.contentId = s.id),
                      (o.parent = c),
                      (o.contentType = s.contentType),
                      (o.fallbackStream = s.fallbackStream),
                      (o.purchaseProofToken = s.purchaseProofToken),
                      (e.stop = !a),
                      (e.restart = s.restartTV && s.isLive),
                      (t.tuneData = { asset: o, buttons: e }),
                      a
                        ? (v({ component: p, data: s }),
                          (t.tuneData = { asset: o, buttons: e }))
                        : (r({ data: s, show: !1, restricted: s.restricted }),
                          i(s),
                          f({ component: t, element: t.element }),
                          s.restricted
                            ? b({ component: t })
                            : (n.System.publish("PLAYBACK_ERROR", null, {
                                component: t,
                                error: null,
                              }),
                              n.System.publish(
                                "PLAYER_SET",
                                null,
                                { component: l, data: o, buttons: e },
                                !1
                              ))))
                    : n.System.publish("PLAYBACK_ERROR", null, {
                        component: t,
                        error: 404,
                      });
              }
              function A(e) {
                (e = e.component),
                  "unlocked" ===
                    (n.System.getItem("parentalStatus") || "locked") &&
                    (n.System.publish("PLAYBACK_ERROR", null, {
                      component: e,
                      error: null,
                    }),
                    n.System.publish("DATA_FETCH", null, { component: e }));
              }
              function P() {
                r({ data: {}, show: !1 });
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.element,
                    n = e.component,
                    o = e.rootComponent,
                    s = e.action,
                    a = e.options,
                    i = e.details;
                  (e = {
                    set: R,
                    ready: x,
                    info: m,
                    channelChange: _,
                    playbackTimeUpdated: S,
                    playbackFinished: T,
                    toggleNavAutoHide: y,
                    channelNavToggle: f,
                    hideChannelNav: g,
                    trickplayToggle: h,
                    stopContent: d,
                    restartContent: u,
                    scheduleReady: I,
                    nextScheduleReady: E,
                    channelsSet: w,
                    channelsReady: O,
                    tuneChannel: k,
                    parentalChanged: A,
                    clearPlaybackInfo: P,
                  }),
                    s &&
                      e[s] &&
                      e[s]({
                        element: t,
                        component: n,
                        rootComponent: o,
                        options: a,
                        details: i,
                      });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      7680: function (e, t, n) {
        (n = [t, n(6918), n(6510), n(5438)]),
          void 0 ===
            (n = function (e, n, o, s) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.component,
                    n = e.rootComponent,
                    o = e.element,
                    s = e.action,
                    a = e.options,
                    i = e.details;
                  (e = {
                    set: u,
                    load: m,
                    unload: h,
                    play: g,
                    skip: f,
                    close: y,
                    updateTrickPlay: v,
                  }),
                    s &&
                      e[s] &&
                      e[s]({
                        component: t,
                        rootComponent: n,
                        element: o,
                        options: a,
                        details: i,
                      });
                });
              var a = 0;
              function i(e, t) {
                var o = bitmovin.player.HttpRequestType;
                -1 !==
                  [
                    o.DRM_LICENSE_WIDEVINE,
                    o.DRM_LICENSE_FAIRPLAY,
                    o.DRM_LICENSE_PLAYREADY,
                  ].indexOf(e) &&
                  ((o = t.url.substring(0, t.url.lastIndexOf("/"))),
                  (e = n.System.getItem(["prmHosts", "drmProxyUrl"])),
                  t.headers["drm-token"] &&
                    n.System.setItem("drm-token", t.headers["drm-token"]),
                  e !== o &&
                    200 === t.status &&
                    (((t = n.System.getItem("prmHosts")).drmProxyUrl = o),
                    n.System.setItem("prmHosts", t)));
              }
              function r(e, t) {
                var o,
                  s = bitmovin.player.HttpRequestType;
                return (
                  -1 !==
                    [
                      s.DRM_LICENSE_WIDEVINE,
                      s.DRM_LICENSE_FAIRPLAY,
                      s.DRM_LICENSE_PLAYREADY,
                    ].indexOf(e) &&
                    ((o = n.System.getItem("drm-token")) &&
                      (t.headers["drm-token"] = o),
                    e === s.DRM_LICENSE_PLAYREADY &&
                      delete t.headers.SOAPAction),
                  Promise.resolve(t)
                );
              }
              function l(e) {
                var t = e.error;
                (e = e.devices),
                  n.System.publish("PLAYBACK_ERROR", null, {
                    component: n.System.component("playback"),
                    error: t,
                    devices: e,
                  });
              }
              function c(e) {
                var t,
                  o = n.Source.constants["content-types"],
                  a = n.System.component("player"),
                  i = n.System.component("playback"),
                  r = n.System.component("playback-schedule"),
                  l = i.data.contentType !== o.tv_channel || r.data;
                a.data.pauseTriggered &&
                  l &&
                  ((t =
                    i.data.contentType === o.tv_channel
                      ? (0, s.copy)(r.data[0])
                      : i.data),
                  (l =
                    i.data.contentType === o.tv_channel
                      ? "LIVE_TRICKPLAY"
                      : "ASSET_TRICKPLAY"),
                  (r = 0),
                  a.player &&
                    (r = Math.round(
                      a.player.isLive()
                        ? a.player.getTimeShift() - a.player.getMaxTimeShift()
                        : a.player.getCurrentTime()
                    )),
                  (t.trickPlayMode = e ? "PAUSE" : "SEEK"),
                  (t.trickPlayPosition =
                    i.data.contentType === o.tv_channel
                      ? Math.round((Date.now() - t.start) / 1e3)
                      : Math.round(r)),
                  n.System.publish(l, null, { prm: a.data, playback: t }));
              }
              function p(e) {
                var t,
                  i,
                  r,
                  p,
                  u,
                  m,
                  h = e.type,
                  g = bitmovin.player.PlayerEvent,
                  f = n.System.component("player"),
                  y = n.System.component("playback"),
                  v = f.player;
                switch (h) {
                  case g.Ready:
                    l({ component: f, error: null }),
                      (m = (t = { component: f }).component).player &&
                        ((u = p = r = i = !1),
                        (m = (t = m.player).subtitles.list()),
                        t.getAvailableAudio().forEach(function (e) {
                          e.lang &&
                            e.lang.toLowerCase() ===
                              n.System.getItem([
                                "user",
                                "primaryAudioLanguage",
                              ]).toLowerCase() &&
                            (i = e.id),
                            e.lang &&
                              e.lang.toLowerCase() ===
                                n.System.getItem([
                                  "user",
                                  "secondaryAudioLanguage",
                                ]).toLowerCase() &&
                              (r = e.id);
                        }),
                        m.forEach(function (e) {
                          e.lang &&
                            e.lang.toLowerCase() ===
                              n.System.getItem([
                                "user",
                                "primarySubtitleLanguage",
                              ]).toLowerCase() &&
                            (p = e.id),
                            e.lang &&
                              e.lang.toLowerCase() ===
                                n.System.getItem([
                                  "user",
                                  "secondarySubtitleLanguage",
                                ]).toLowerCase() &&
                              (u = e.id);
                        }),
                        (i || r) && t.setAudio(i || r),
                        (p || u) && t.subtitles.enable(p || u)),
                      (function (e) {
                        var t = e.component,
                          o = t.player,
                          s = t.settings.asset,
                          a = n.State.router.params.time,
                          i = n.Source.constants["content-types"];
                        (e = 0),
                          a && (e = parseInt(a, 10)),
                          o.isLive()
                            ? o.timeShift(
                                s.contentType === i.tv_schedule
                                  ? t.player.getMaxTimeShift() + e
                                  : e
                              )
                            : t.player.seek(e);
                      })({ component: f }),
                      (0, o.buildUI)({ component: f }),
                      n.System.publish("TOGGLE_NAV_AUTOHIDE", null, {
                        component: y,
                      }),
                      (0, s.analyticsTune)("in");
                    break;
                  case g.Playing:
                    (f.settings.paused = !1),
                      n.System.publish("TOGGLE_NAV_AUTOHIDE", null, {
                        component: y,
                      });
                    break;
                  case g.Paused:
                    (f.settings.paused = !0),
                      (f.data.pauseTriggered = !0),
                      n.System.publish("TOGGLE_NAV_AUTOHIDE", null, {
                        component: y,
                        stop: !0,
                      }),
                      c(!0),
                      d();
                    break;
                  case g.PlaybackFinished:
                    (f.data.playbackCompleted = !0),
                      n.System.publish("PRM_CONCURRENCY_STOP", null, {
                        component: f,
                      }),
                      n.System.publish("PLAYBACK_FINISHED", null, {
                        component: y,
                      }),
                      d(!0);
                    break;
                  case g.TimeChanged:
                    v &&
                      v.isLive() &&
                      1e3 < Date.now() - a &&
                      (n.System.publish("PLAYBACK_TIME_UPDATED", null, {
                        component: y,
                      }),
                      (a = Date.now()));
                    break;
                  case g.Seeked:
                  case g.TimeShifted:
                    c();
                    break;
                  case g.Error:
                    !(function (e) {
                      var t = e.component,
                        o = e.event,
                        s = t.parentElement,
                        a = bitmovin.player.ErrorCode;
                      o.data &&
                        o.data.serverResponse instanceof ArrayBuffer &&
                        ((e = JSON.parse(
                          new TextDecoder("utf-8").decode(o.data.serverResponse)
                        )),
                        (o.data.deviceIds = e.deviceIds),
                        (o.data.limit = e.limit)),
                        s.player &&
                          (s.player.unload(), (t.settings.playing = !1)),
                        a.DRM_FAILED_LICENSE_REQUEST === o.code
                          ? (n.System.removeItem("drm-token"),
                            n.System.publish("PRM_DRM_PROXY_ERROR", null, {
                              component: t,
                              data: o.data,
                              code: o.code,
                            }))
                          : (l({ component: t, error: "playbackFailed" }),
                            n.System.publish("PRM_CONCURRENCY_STOP", null, {
                              component: t,
                            }),
                            n.System.publish("PRM_UPDATE_RESOURCE", null, {
                              component: t,
                              data: { failed: !0, errorId: o.code },
                            }));
                    })({ component: f, event: e });
                }
              }
              function d(e) {
                var t = (a = n.System.component("player")).settings.asset,
                  o = a.player,
                  a = 0;
                "TV_SCHEDULE" === t.contentType &&
                  (e ||
                    (a = Math.round(
                      o.isLive()
                        ? o.getTimeShift() - o.getMaxTimeShift()
                        : o.getCurrentTime()
                    )),
                  n.System.publish("DATA_FETCH", null, {
                    collectionId: "bookmark",
                    component: (0, s.dummyComponent)(),
                    override: {
                      url: "user/bookmark/"
                        .concat(t.contentId, "/")
                        .concat(a, "?type=tv_schedule"),
                    },
                  }));
              }
              function u(e) {
                var t = e.component;
                (e = e.details),
                  (0, o.removeUI)(),
                  (t.details = e),
                  t.player
                    ? (n.System.publish("PRM_CONCURRENCY_STOP", null, {
                        component: t,
                      }),
                      n.System.removeItem("playbackSessionId"),
                      n.System.removeItem("playbackSessionToken"),
                      t.player.unload().then(function () {
                        (t.settings.playing = !1),
                          n.System.publish("PRM_FETCH", null, { component: t });
                      }))
                    : n.System.publish("PRM_FETCH", null, { component: t });
              }
              function m(e) {
                var t,
                  s,
                  a = e.component,
                  l = {},
                  c = a.data,
                  d = bitmovin.player,
                  u = a.settings.playerParent.element,
                  m = n.Settings.app.player;
                (e = c.encrypted && c.encrypted.toLowerCase()),
                  (m.config.network = {
                    preprocessHttpResponse: i,
                    preprocessHttpRequest: r,
                  }),
                  u.player || (a.player = new d.Player(u, m.config)),
                  c.protocol && c.url
                    ? ((t = (d = { component: a, player: d }).component),
                      (s = d.player.PlayerEvent),
                      (d = n.Settings.app["player-events"]) &&
                        d.forEach(function (e) {
                          t.player.on(s[e], p);
                        }),
                      (l[c.protocol.toLowerCase()] = c.url),
                      "none" !== e &&
                        (function (e, t, o) {
                          var s = {},
                            a = o.data,
                            i = o.settings.asset,
                            r = n.Source.constants["drm-types"],
                            l = n.System.getItem("providers"),
                            c = ""
                              .concat(
                                n.System.getItem(["prmHosts", "drmProxyUrl"]),
                                "/"
                              )
                              .concat(t);
                          (o = ""
                            .concat(
                              n.System.getItem(["prmHosts", "certificatesUrl"]),
                              "/"
                            )
                            .concat(t)),
                            l.prmv4 && a.playbackResourceToken
                              ? ((s.LA_URL = c),
                                (s.headers = {
                                  "mn-prm-session":
                                    n.System.getItem("mn-prm-session") || !1,
                                  "mn-playback": a.playbackResourceToken,
                                  "mn-packages": n.System.getItem(
                                    "mn-packages"
                                  ),
                                  "mn-services": n.System.getItem(
                                    "mn-services"
                                  ),
                                  "mn-device-filters": n.System.getItem(
                                    "deviceInfoToken"
                                  ),
                                }),
                                i.purchaseProofToken &&
                                  (s.headers["mn-purchase"] =
                                    i.purchaseProofToken),
                                t === r.fairplay &&
                                  ((s.useUint16InitData = !0),
                                  (s.certificateURL = o),
                                  (s.licenseResponseType = "arraybuffer"),
                                  (s.headers["Content-Type"] =
                                    "application/octet-stream"),
                                  (s.prepareContentId = function (e) {
                                    return /.+skd:\/\/(.+)/.exec(e)[1];
                                  }),
                                  (s.prepareMessage = function (e) {
                                    return e.message;
                                  }),
                                  (s.prepareLicense = function (e) {
                                    return new Uint8Array(e);
                                  })))
                              : t === r.widevine &&
                                (s.LA_URL = ""
                                  .concat(
                                    n.System.getItem([
                                      "providers",
                                      r.widevine,
                                      "url",
                                    ]),
                                    "?deviceId="
                                  )
                                  .concat(
                                    n.System.getItem([
                                      "device",
                                      "deviceInfo",
                                      "vuid",
                                    ])
                                  )),
                            (e.drm =
                              ((e = s),
                              (s = t) in (t = {})
                                ? Object.defineProperty(t, s, {
                                    value: e,
                                    enumerable: !0,
                                    configurable: !0,
                                    writable: !0,
                                  })
                                : (t[s] = e),
                              t));
                        })(l, e, a),
                      a.player.load(l).then(function () {
                        (a.settings.concurrencyData.status = "play"),
                          n.System.publish("PRM_CONCURRENCY_CHECK", null, {
                            component: a,
                          });
                      }))
                    : (0, o.removeUI)();
              }
              function h(e) {
                (e = e.component).player &&
                  (n.System.removeItem("playbackSessionId"),
                  n.System.removeItem("playbackSessionToken"),
                  (e.settings.playing = !1),
                  e.player.unload());
              }
              function g(e) {
                (e = e.component).player &&
                  ((e.settings.playing = !0), e.player.play());
              }
              function f(e) {
                var t = e.component,
                  o = e.options,
                  s = t.player;
                (e = o.back ? -10 : 10),
                  (o = n.System.component("playback")),
                  s &&
                    (n.System.publish("DOCUMENT_MOUSEMOVE", null, {
                      component: o,
                    }),
                    s.isLive()
                      ? ((o = s.getTimeShift() + e), s.timeShift(0 < o ? 0 : o))
                      : t.player.seek(s.getCurrentTime() + e));
              }
              function y(e) {
                (e = e.component).player &&
                  ((0, s.analyticsTune)("out"),
                  d(),
                  n.System.publish("PRM_CONCURRENCY_STOP", null, {
                    component: e,
                  }),
                  n.System.removeItem("playbackSessionId"),
                  n.System.removeItem("playbackSessionToken"),
                  e.player.unload(),
                  (e.settings.playing = !1),
                  (e.settings.paused = !1));
              }
              function v(e) {
                var t = e.component;
                (e = e.details),
                  t.nextTunein && (0, s.analyticsTune)("in"),
                  e.buttons && (t.settings.buttons = e.buttons),
                  t.player && t.playerUI && (0, o.buildUI)({ component: t });
              }
            }.apply(t, n)) || (e.exports = n);
      },
      6510: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.toggleUI = function (e) {
                  var t = n.System.component("player");
                  t.playerUI &&
                    t.playerUI.currentUi &&
                    (e && s
                      ? t.playerUI.currentUi.getUI().show()
                      : t.playerUI.currentUi.getUI().hide());
                }),
                (t.removeUI = r);
              var s = !(t.buildUI = function (e) {
                var t = e.component,
                  l = [],
                  c = [],
                  p = bitmovin.playerui,
                  d = p.PlayerUtils,
                  u = new p.SubtitleOverlay(),
                  m = new p.SubtitleListBox(),
                  h = new p.AudioTrackListBox(),
                  g = new p.PlaybackToggleButton({
                    text: n.System.translate(["index", "pause"]),
                    offText: n.System.translate(["index", "play"]),
                    cssClasses: ["float-left"],
                  }),
                  f = new p.Button({
                    text: n.System.translate(["index", "stop"]),
                    cssClasses: ["ui-stop", "float-left"],
                  }),
                  y = new p.Button({
                    text: n.System.translate(["index", "restart"]),
                    cssClasses: ["ui-restart", "float-left"],
                  });
                (e = new p.Button({
                  text: n.System.translate(["index", "info"]),
                  cssClasses: ["ui-info", "float-right"],
                })),
                  (m = new p.SettingsPanel({
                    components: [
                      new p.SettingsPanelPage({
                        components: [
                          new p.SettingsPanelItem(
                            new p.Label({
                              text: n.System.translate(["index", "audio"]),
                            }),
                            h
                          ),
                          new p.SettingsPanelItem(
                            new p.Label({
                              text: n.System.translate([
                                "index",
                                "subtitlesCC",
                              ]),
                            }),
                            m
                          ),
                        ],
                      }),
                    ],
                    hidden: !0,
                    cssClasses: ["audio-and-subtitles"],
                  })).addComponent(new p.CloseButton({ target: m })),
                  f.onClick.subscribe(function () {
                    i({ component: t, event: "TRICKPLAY_STOP" });
                  }),
                  y.onClick.subscribe(function () {
                    i({ component: t, event: "TRICKPLAY_RESTART" });
                  }),
                  e.onClick.subscribe(function () {
                    i({ component: t, event: "TRICKPLAY_INFO" });
                  }),
                  l.push(g),
                  t.settings.buttons.stop && l.push(f),
                  t.settings.buttons.restart && l.push(y),
                  !(function () {
                    var e = document.createElement("video");
                    return (e.muted = !0), e.muted;
                  })() ||
                    l.push(
                      new p.VolumeControlButton({
                        text: n.System.translate(["index", "volume"]),
                        cssClasses: [
                          "ui-volumetogglebutton",
                          "float-right",
                          (0, o.isMobileSafari)() ? "no-slider" : "",
                        ],
                      })
                    ),
                  l.push(
                    new p.FullscreenToggleButton({
                      text: n.System.translate(["index", "fullscreen"]),
                      cssClasses: ["float-right"],
                    })
                  ),
                  l.push(e),
                  l.push(
                    new p.SettingsToggleButton({
                      text: n.System.translate(["index", "subtitles"]),
                      settingsPanel: m,
                      cssClass: "ui-audiotracksettingstogglebutton",
                      cssClasses: ["float-right"],
                    })
                  ),
                  c.push(
                    new p.Container({
                      components: l,
                      cssClasses: ["controlbar-bottom float"],
                    })
                  ),
                  c.push(
                    new p.Container({
                      components: [
                        new p.SeekBar({ label: new p.SeekBarLabel() }),
                        new p.PlaybackTimeLabel({
                          timeLabelMode: p.PlaybackTimeLabelMode.CurrentTime,
                          cssClasses: ["float-right", "current"],
                          hideInLivePlayback: !0,
                        }),
                        new p.PlaybackTimeLabel({
                          timeLabelMode: p.PlaybackTimeLabelMode.TotalTime,
                          cssClasses: ["float-right", "left-sep"],
                        }),
                      ],
                      cssClasses: ["controlbar-top"],
                    })
                  ),
                  (c = new p.ControlBar({ components: c })),
                  (d = new p.UIContainer({
                    components: [
                      u,
                      new p.BufferingOverlay(),
                      new p.PlaybackToggleOverlay(),
                      new p.CastStatusOverlay(),
                      m,
                      c,
                    ],
                    hidePlayerStateExceptions: [d.PlayerState.Paused],
                    hideDelay: 3e3,
                  })),
                  r(),
                  (t.playerUI = new p.UIManager(t.player, d)),
                  t.playerUI.currentUi.onControlsHide.subscribe(a),
                  t.playerUI.currentUi.onControlsShow.subscribe(a),
                  a(),
                  (s = !0);
              });
              function a() {
                var e =
                    0 <
                    document.getElementsByClassName("bmpui-controls-shown")
                      .length,
                  t = n.System.component("playback");
                n.System.publish("TRICKPLAY_TOGGLE", null, {
                  component: t,
                  show: e,
                });
              }
              function i(e) {
                var t = e.component,
                  o = e.event;
                (e = n.Source.constants["content-types"]),
                  "TRICKPLAY_RESTART" === o &&
                  t.settings.asset.contentType === e.tv_schedule
                    ? (e = t.player).isLive()
                      ? e.timeShift(t.player.getMaxTimeShift())
                      : t.player.seek(0)
                    : n.System.publish(o, null, {
                        component: n.System.component("playback"),
                      });
              }
              function r() {
                var e = n.System.component("player");
                e.playerUI &&
                  (e.playerUI.release(), (e.playerUI = null), (s = !1)),
                  a();
              }
            }.apply(t, n)) || (e.exports = n);
      },
      7058: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.component,
                    n = e.rootComponent,
                    o = e.element,
                    s = e.action,
                    a = e.options,
                    i = e.details;
                  (e = {
                    fetch: O,
                    ready: R,
                    refreshTokens: u,
                    updateResource: m,
                    retrySource: w,
                    sourceError: f,
                    registerError: g,
                    prmRegistered: k,
                    drmProxyError: y,
                    sessionError: h,
                    sessionTokenError: v,
                    sessionTokenSourceError: b,
                    concurrencySuccess: I,
                    concurrencyError: S,
                    concurrencyCheck: _,
                    concurrencyCheckInterval: T,
                    concurrencyStop: E,
                  }),
                    s &&
                      e[s] &&
                      e[s]({
                        component: t,
                        rootComponent: n,
                        element: o,
                        options: a,
                        details: i,
                      });
                });
              var s = { drm: !0, source: !0, register: !0, metadata: !0 };
              function a(e) {
                n.System.setItem("prmStatus", {
                  configured: !0,
                  registered: e,
                });
              }
              function i(e) {
                var t = n.System.getItem("providers"),
                  s = (0, o.dummyComponent)();
                t.prmv4 && e
                  ? n.System.publish(
                      "DATA_FETCH",
                      null,
                      { collectionId: "prm-register-retry", component: s },
                      !1
                    )
                  : n.System.publish(
                      "DATA_FETCH",
                      null,
                      {
                        collectionId: "prm-register",
                        component: s,
                        override: {
                          reply: { success: { event: "PRM_REGISTERED" } },
                        },
                      },
                      !1
                    );
              }
              function r() {
                return n.System.getItem("providers").prmv4
                  ? n.System.getItem("mn-services")
                  : n.System.getItem("serviceSessionId");
              }
              function l(e) {
                var t = e.error,
                  o = e.devices;
                (e = e.limit),
                  n.System.publish("PLAYBACK_ERROR", null, {
                    component: n.System.component("playback"),
                    error: t,
                    devices: o,
                    limit: e,
                  });
              }
              function c(e) {
                var t = [e.contentType, e.prmId].join("_");
                return (t = n.System.getItem(t, "session")) &&
                  t.expireTime &&
                  Date.now() > t.expireTime
                  ? (d(e), !1)
                  : t;
              }
              function p(e, t) {
                t.cacheDuration &&
                  (t.expireTime = Date.now() + 1e3 * t.cacheDuration),
                  n.System.setItem(
                    "".concat(e.contentType, "_").concat(e.prmId),
                    t,
                    "session"
                  );
              }
              function d(e) {
                n.System.removeItem(
                  "".concat(e.contentType, "_").concat(e.prmId),
                  "session"
                );
              }
              function u() {
                n.System.publish(
                  "DATA_FETCH",
                  null,
                  {
                    collectionId: "customer",
                    component: (0, o.dummyComponent)(),
                  },
                  !1
                );
              }
              function m(e) {
                var t = e.component,
                  s = e.details;
                (e = t.settings.asset),
                  (t = s.data || {}),
                  (s = "".concat(e.contentType, "_").concat(e.prmId)),
                  (e = n.System.getItem(s, "session")) &&
                    n.System.setItem(s, (0, o.deepOverride)(e, t), "session");
              }
              function h(e) {
                var t = e.retry;
                (e = n.System.component("player")) &&
                  !t &&
                  (d(e.settings.asset), l({ error: "playbackFailed" })),
                  a(!1);
              }
              function g() {
                a(!1), f();
              }
              function f() {
                var e = n.System.component("player");
                e &&
                  (d(e.settings.asset),
                  e.settings.asset.fallbackStream &&
                  !e.settings.asset.fallbackStream.empty
                    ? ((e.data = e.settings.asset.fallbackStream),
                      n.System.publish("PLAYER_LOAD", null, e))
                    : l({ error: "playbackFailed" }));
              }
              function y(e) {
                var t = e.details,
                  o = t.data,
                  a = { error: "playbackFailed" };
                switch (((e = n.System.component("player")), o.responseCode)) {
                  case 403:
                  case 480:
                    if (s.drm)
                      return (
                        (s.drm = !1),
                        void v({ renewTokens: 480 === o.responseCode })
                      );
                    break;
                  case 465:
                  case 466:
                  case 467:
                    (a.error = o.responseCode),
                      (a.devices = o.deviceIds),
                      (a.limit = o.limit);
                    break;
                  case 481:
                    if (s.metadata)
                      return (
                        (s.metadata = !1),
                        void n.System.publish("DATA_FETCH", null, {
                          component: n.System.component("playback"),
                          override: { cache: { time: 0 } },
                        })
                      );
                    break;
                  case 482:
                    a.error = "playbackFailedCas";
                }
                (s.drm = !0),
                  (s.metadata = !0),
                  l(a),
                  E({ component: e }),
                  m({
                    component: e,
                    details: { data: { failed: !0, errorId: t.code } },
                  });
              }
              function v(e) {
                (e = e.renewTokens),
                  h({ retry: s.register && s.source }),
                  s.register && s.source
                    ? ((s.register = !1), i(e))
                    : ((s.register = !0), (s.source = !0));
              }
              function b(e) {
                (e = e.renewTokens),
                  h({ retry: s.source }),
                  s.source ? ((s.source = !1), i(e)) : (s.source = !0);
              }
              function S(e) {
                var t,
                  s,
                  i = e.component,
                  r = n.System.getItem("prm-concurrency", "collections"),
                  c = n.System.getItem(
                    ["prm-concurrency", "status"],
                    "collections"
                  ),
                  p = r.playbackSessionId;
                if (
                  ((e = r.playbackSessionToken),
                  p && n.System.setItem("playbackSessionId", p),
                  e && n.System.setItem("playbackSessionToken", e),
                  n.System.error("PRM", "Concurrency error", r),
                  "play" === i.settings.concurrencyData.status)
                ) {
                  var d = i.settings.concurrencyData.skipOnError,
                    u = { error: "prmConnectivity", devices: [], limit: null },
                    m = !1;
                  switch (c) {
                    case 400:
                      (m = !0), (u.error = null);
                      break;
                    case 403:
                      a(!1),
                        n.System.removeItem("playbackSessionId"),
                        n.System.removeItem("playbackSessionToken");
                      break;
                    case 465:
                    case 466:
                    case 467:
                      (u.error = c),
                        (u.devices = r.deviceIds),
                        (u.limit = r.limit);
                      break;
                    default:
                      d && ((m = !0), (u.error = null)),
                        500 !== c &&
                          ((t = c),
                          (s = n.System.getItem([
                            "prmHosts",
                            "accessErrorUrl",
                          ])),
                          (t = {
                            prmUrl: n.System.getItem([
                              "prmHosts",
                              "concurrencyCheckUrl",
                            ]),
                            errorInfo: { error: t.toString() },
                          }),
                          n.System.publish(
                            "DATA_FETCH",
                            null,
                            {
                              collectionId: "prm-access-error",
                              component: (0, o.dummyComponent)(),
                              override: { url: s, params: t },
                            },
                            !1
                          ));
                  }
                  l(u),
                    m
                      ? n.System.publish("PLAYER_PLAY", null, i)
                      : (n.System.publish("PLAYER_UNLOAD", null, i),
                        E({ component: i }));
                }
              }
              function T(e) {
                var t = e.component,
                  s = t.settings.concurrencyData,
                  a = n.System.getItem("playReportTimeInterval");
                (e = n.System.getItem(["prmHosts", "concurrencyCheckUrl"])),
                  (s = {
                    status: s.status,
                    playbackResourceId: s.playbackResourceId,
                    playbackResourceToken: s.playbackResourceToken,
                  }),
                  n.System.clearTimer(t.id),
                  n.System.interval(
                    t.element,
                    t.id,
                    1e3 * a,
                    "PRM_CONCURRENCY_CHECK_INTERVAL"
                  ),
                  n.System.publish(
                    "DATA_FETCH",
                    null,
                    {
                      collectionId: "prm-concurrency",
                      component: (0, o.dummyComponent)(),
                      override: { url: e, params: s },
                    },
                    !1
                  );
              }
              function E(e) {
                (e = e.component).settings.concurrency &&
                  "play" === e.settings.concurrencyData.status &&
                  ((e.settings.concurrencyData.status = "stop"),
                  T({ component: e }),
                  n.System.clearTimer(e.id));
              }
              function _(e) {
                var t = e.component;
                (e = c(t.settings.asset)) && e.concurrency
                  ? ((t.settings.concurrency = !0),
                    (t.settings.concurrencyData.playbackResourceId =
                      e.playbackResourceId),
                    (t.settings.concurrencyData.playbackResourceToken =
                      e.playbackResourceToken),
                    (t.settings.concurrencyData.skipOnError =
                      e.skipConcurrencyOnError),
                    T({ component: t }))
                  : ((t.settings.concurrency = !1),
                    n.System.publish("PLAYER_PLAY", null, { component: t }));
              }
              function I(e) {
                var t = e.component,
                  o = e.details.responseURL;
                (e = n.System.getItem("prmHosts")),
                  o &&
                    o !== e.concurrencyCheckUrl &&
                    ((e.concurrencyCheckUrl = o),
                    n.System.setItem("prmHosts", e)),
                  "play" !== t.settings.concurrencyData.status ||
                    t.settings.paused ||
                    n.System.publish("PLAYER_PLAY", null, t);
              }
              function w(e) {
                var t = e.component,
                  o = (s = t.settings.asset).prmId,
                  s = ((e = s.contentType), { contentId: o });
                (o = n.System.getItem("deviceInfoToken")),
                  (e = ""
                    .concat(
                      n.System.getItem(["prmHosts", "contentSourceUrl"]),
                      "/"
                    )
                    .concat(e, "/")),
                  (s.deviceInfoToken = encodeURIComponent(o)),
                  (s.serviceSessionId = encodeURIComponent(r())),
                  n.System.publish("DATA_FETCH", null, {
                    component: t,
                    override: { url: e, params: s, method: "GET" },
                  });
              }
              function k(e) {
                (e = e.component),
                  (s.register = !0),
                  sessionStorage.clear(),
                  a(!0),
                  n.System.publish("PRM_RETRY_SOURCE", null, { component: e });
              }
              function O() {
                var e,
                  t = n.System.component("player"),
                  o = t.details,
                  a = o.data,
                  l = a.prmId,
                  p = a.contentType,
                  d = { contentId: l },
                  u = n.System.getItem("prmStatus"),
                  m = r(),
                  h = n.System.getItem("deviceInfoToken");
                (l = c(a)),
                  (s.drm = !0),
                  (t.cache = null),
                  (t.state = null),
                  (t.settings.asset = a),
                  (t.settings.buttons = o.buttons),
                  (t.settings.playerParent = a.parent),
                  u && u.configured
                    ? l
                      ? l.failed
                        ? ((d.errorId = l.errorId),
                          (d.deviceInfoToken = h),
                          (d.serviceSessionId = m),
                          (d.playbackResourceId = l.playbackResourceId),
                          (d.playbackResourceToken = l.playbackResourceToken),
                          (e = ""
                            .concat(
                              n.System.getItem([
                                "prmHosts",
                                "contentSourceErrorUrl",
                              ]),
                              "/"
                            )
                            .concat(p, "/")),
                          n.System.publish("DATA_FETCH", null, {
                            component: t,
                            override: {
                              url: e,
                              params: d,
                              method: "POST",
                              contentPath: [],
                            },
                          }))
                        : ((t.cache = l),
                          n.System.publish("DOM_RENDER", null, {
                            component: t,
                          }))
                      : u.configured && !u.registered
                      ? i(!0)
                      : ((d.deviceInfoToken = encodeURIComponent(h)),
                        (d.serviceSessionId = encodeURIComponent(m)),
                        (e = ""
                          .concat(
                            n.System.getItem(["prmHosts", "contentSourceUrl"]),
                            "/"
                          )
                          .concat(p, "/")),
                        n.System.publish("DATA_FETCH", null, {
                          component: t,
                          override: {
                            url: e,
                            params: d,
                            method: "GET",
                            contentPath: ["playback_resources", "0"],
                          },
                        }))
                    : ((t.cache = a.fallbackStream),
                      n.System.publish("DOM_RENDER", null, { component: t }));
              }
              function R(e) {
                var t = e.component;
                (e = t.data),
                  (s.source = !0),
                  e && e.fallback
                    ? e.empty
                      ? l({ error: "playbackFailed" })
                      : n.System.publish("PLAYER_LOAD", null, t)
                    : e && e.allowed
                    ? (p(t.settings.asset, e),
                      n.System.publish("PLAYER_LOAD", null, t))
                    : (n.System.publish("PLAYER_UNLOAD", null, t),
                      e.failed ||
                        e.isError ||
                        e.empty ||
                        p(t.settings.asset, e),
                      e.isError && d(t.settings.asset),
                      n.System.publish("PLAYER_LOAD", null, t),
                      l({ error: e.errorCode || "prmNotAllowed" }));
              }
            }.apply(t, n)) || (e.exports = n);
      },
      7797: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              function s() {
                n.System.component("pin-input").element.focus();
              }
              function a(e) {
                var t = e.rootComponent,
                  o = t && t.form,
                  s = n.System.component("pin-input");
                (e = o.params["pin-input"].default),
                  (s.element.value = ""),
                  (o.params["pin-input"] = ""),
                  n.System.getItem(["user", "pin"]) === e
                    ? i({ rootComponent: t })
                    : ((t.state =
                        void 0 === e || "" === e
                          ? "errorPinEmpty"
                          : "errorPinWrong"),
                      n.System.publish("DOM_RENDER", null, { component: t }));
              }
              function i(e) {
                var t = e.rootComponent;
                ((e = { purchase: {} }).purchase.price = t.settings.price),
                  (e.purchase.content = t.settings.uri),
                  (e.purchase.share =
                    !1 === n.System.getItem(["user", "recordPrivate"])),
                  n.System.publish(
                    "DATA_FETCH",
                    null,
                    { component: t, override: { params: e } },
                    !1
                  );
              }
              function r(e) {
                e.component;
                var t,
                  o = e.details[0],
                  s = {
                    id: o.contentId,
                    page: "fullscreen",
                    type: o.contentType,
                  };
                d(),
                  !o ||
                    ((t = n.System.component("asset")).settings &&
                      t.settings.cache &&
                      (((e = n.System.getItem(
                        t.settings.cache.key,
                        t.settings.cache.type
                      )).data = { content: o }),
                      n.System.setItem(
                        t.settings.cache.key,
                        e,
                        t.settings.cache.type
                      ))),
                  n.System.publish("ROUTER_NAVIGATE", null, s);
              }
              function l(e) {
                var t = e.component;
                (e = e.details),
                  (t.state = e),
                  n.System.publish("DOM_RENDER", null, { component: t });
              }
              function c(e) {
                (e = e.rootComponent.data),
                  n.System.publish(
                    "MODAL_OPEN",
                    null,
                    {
                      componentId: "purchase",
                      data: e,
                      title: e.title,
                      image: e["image-poster"],
                      backdrop: !0,
                      backdropClose: !0,
                    },
                    !0
                  );
              }
              function p(e) {
                var t = e.component,
                  s = n.System.component("modal").data,
                  a = (0, o.stringInsert)(
                    n.System.translate(["purchase", "rent-text"]),
                    [s["rent-label"], s["rent-duration"]]
                  );
                (e = (0, o.stringInsert)(
                  n.System.translate(["purchase", "rent-text-pin"]),
                  [s["rent-label"], s["rent-duration"]]
                )),
                  (t.settings.price = s.price),
                  (t.settings.uri = s.uri),
                  (t.settings.pinRequired = n.System.getItem([
                    "user",
                    "requiresPin",
                  ])),
                  (t.settings.rentLabel = t.settings.pinRequired ? e : a);
              }
              function d() {
                n.System.publish("MODAL_CLOSE");
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.component,
                    n = e.rootComponent,
                    o = e.action,
                    u = e.details;
                  (e = {
                    checkPin: a,
                    focus: s,
                    open: c,
                    prepare: p,
                    close: d,
                    send: i,
                    success: r,
                    error: l,
                  }),
                    o &&
                      e[o] &&
                      e[o]({ component: t, rootComponent: n, details: u });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      8785: function (e, t, n) {
        (n = [t, n(6918), n(3254), n(5438)]),
          void 0 ===
            (n = function (e, n, o, s) {
              "use strict";
              var a, i;
              function r(e, t) {
                var n;
                if (
                  "undefined" == typeof Symbol ||
                  null == e[Symbol.iterator]
                ) {
                  if (
                    Array.isArray(e) ||
                    (n = (function (e, t) {
                      if (e) {
                        if ("string" == typeof e) return l(e, t);
                        var n = Object.prototype.toString.call(e).slice(8, -1);
                        return (
                          "Object" === n &&
                            e.constructor &&
                            (n = e.constructor.name),
                          "Map" === n || "Set" === n
                            ? Array.from(e)
                            : "Arguments" === n ||
                              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
                            ? l(e, t)
                            : void 0
                        );
                      }
                    })(e)) ||
                    (t && e && "number" == typeof e.length)
                  ) {
                    n && (e = n);
                    var o = 0;
                    return {
                      s: (t = function () {}),
                      n: function () {
                        return o >= e.length
                          ? { done: !0 }
                          : { done: !1, value: e[o++] };
                      },
                      e: function (e) {
                        throw e;
                      },
                      f: t,
                    };
                  }
                  throw new TypeError(
                    "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                  );
                }
                var s,
                  a = !0,
                  i = !1;
                return {
                  s: function () {
                    n = e[Symbol.iterator]();
                  },
                  n: function () {
                    var e = n.next();
                    return (a = e.done), e;
                  },
                  e: function (e) {
                    (i = !0), (s = e);
                  },
                  f: function () {
                    try {
                      a || null == n.return || n.return();
                    } finally {
                      if (i) throw s;
                    }
                  },
                };
              }
              function l(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for (var n = 0, o = new Array(t); n < t; n++) o[n] = e[n];
                return o;
              }
              function c(e) {
                var t,
                  o =
                    !!e._reference && (e._reference.component || e._reference),
                  s = o && o.components["scroll-wrapper"].iscroll;
                (e = n.State.system.scrolled || 0),
                  s &&
                    e <= 800 &&
                    ((t =
                      o.components["scroll-wrapper"].components.scroll
                        .components),
                    Object.keys(t).forEach(function (e) {
                      var o = t[e].components["info-container"];
                      (e =
                        (e = (60 / n.State.system.scrolled).toFixed(2)) <= 0.1
                          ? 0
                          : e < 1 && 0.1 < e
                          ? e
                          : 1),
                        n.System.binding(o.element, e, {
                          type: "style",
                          style: "opacity",
                          action: "add",
                        });
                    }));
              }
              function p(e) {
                var t = e._reference.component;
                "super-hero" === t.origin &&
                  t.settings.autoAdvance &&
                  "scroll-wrapper" === e._reference.id &&
                  (n.System.checkTimer(e._reference.id) ||
                    n.System.interval(
                      e,
                      e._reference.id,
                      1e3 * t.settings.rotationFrequency
                    ));
              }
              function d(e) {
                n.System.clearTimer(e._reference.id);
              }
              function u(e, t) {
                var o = e.component || e,
                  s = o.origin || o.id,
                  a =
                    (i = n.System.component("epg-container")) &&
                    "epg-timeslot" === s,
                  i =
                    ((s = i && "epg-schedules-all" === e.id),
                    n.System.component("stripes"));
                (i = "page" === e.id && i),
                  o &&
                    (a || s
                      ? n.System.publish("EPG_PAGINATION", null, t)
                      : i
                      ? n.System.publish("STRIPE_PAGINATION", null, t)
                      : (i = o.collection) &&
                        i.options &&
                        ("prev" === t && i.state.visiblePrev
                          ? ((i.state.visibleAppend = !1),
                            (i.state.visiblePrepend = !0),
                            (o.refresh = !0),
                            n.System.publish("DOM_PAGINATE", null, {
                              component: o,
                            }))
                          : "next" === t &&
                            i.state.visibleNext &&
                            ((i.state.visiblePrepend = !1),
                            (i.state.visibleAppend = !0),
                            (o.refresh = !0),
                            n.System.publish("DOM_PAGINATE", null, {
                              component: o,
                            }))));
              }
              function m(e, t, o, s) {
                var a,
                  i = o.maxScrollX - o.x,
                  r = s.component || s,
                  l = { maxItems: !1, havePrev: !1, haveNext: !1 };
                if (
                  ((l = (r.collection && r.collection.state) || l),
                  "next" === t && i < 0)
                )
                  Math.abs(i) < e
                    ? o.scrollBy(i, 0, 300)
                    : o.scrollBy(-Math.abs(e), 0, 300),
                    n.System.binding(
                      s.components["arrow-left"].element,
                      "hidden",
                      { type: "class", action: "remove" }
                    ),
                    Math.abs(i) - e <= 0 &&
                      !l.haveNext &&
                      n.System.binding(
                        s.components["arrow-right"].element,
                        "hidden",
                        { type: "class", action: "add" }
                      );
                else {
                  if ("next" === t && 0 == i)
                    return void n.System.binding(
                      s.components["arrow-right"].element,
                      "hidden",
                      { type: "class", action: "add" }
                    );
                  "prev" === t &&
                    o.x < 0 &&
                    (o.x <= -Math.abs(e) && o.scrollBy(e, 0, 300),
                    o.x < 0 && o.x > -Math.abs(e) && o.scrollTo(0, 0, 300),
                    n.System.binding(
                      s.components["arrow-right"].element,
                      "hidden",
                      { type: "class", action: "remove" }
                    ),
                    (a = l.maxItems || (!l.maxItems && !l.havePrev)),
                    setTimeout(function () {
                      0 === o.x &&
                        a &&
                        n.System.binding(
                          s.components["arrow-left"].element,
                          "hidden",
                          { type: "class", action: "add" }
                        );
                    }, 310));
                }
                o._events.scrollEnd[0].bind(o)();
              }
              function h(e, t) {
                "next" === e ? t.next() : t.prev();
              }
              function g(e) {
                var t = e.component;
                (e = e.details),
                  (t.settings.scrolls = !e.disable),
                  n.System.publish("DOM_REFRESH", null, { component: t });
              }
              function f() {
                y({ component: n.System.component("page") });
              }
              function y(e) {
                var t,
                  o,
                  a = e.component,
                  i = a;
                if (
                  -1 !==
                  ["grid_of_posters", "series"].indexOf(n.State.router.page)
                ) {
                  if (
                    (e = (p = (i = n.System.component("scroll-wrapper"))
                      .components.scroll.element.children)[0])
                  ) {
                    m = e.offsetHeight;
                    var l = r(p);
                    try {
                      for (l.s(); !(c = l.n()).done; ) {
                        var c = c.value;
                        if (c.offsetTop + m > -i.iscroll.y) {
                          (t = c.offsetTop),
                            (o =
                              c._reference.path[c._reference.path.length - 1]),
                            (i.parent.ready = !1);
                          break;
                        }
                      }
                    } catch (e) {
                      l.e(e);
                    } finally {
                      l.f();
                    }
                  }
                } else {
                  var p,
                    d = r(
                      (
                        (p = n.System.component("stripes")) ||
                        i.components.scroll
                      ).element.children
                    );
                  try {
                    for (d.s(); !(h = d.n()).done; ) {
                      var u = h.value;
                      if (!u.classList.contains("hidden")) {
                        var m,
                          h = (0, s.offsetTop)(u);
                        if (h + (m = u.offsetHeight) > -i.iscroll.y) {
                          (t = h), (o = u._reference.id);
                          break;
                        }
                      }
                    }
                  } catch (e) {
                    d.e(e);
                  } finally {
                    d.f();
                  }
                }
                t &&
                  ((a.scrollToElement = o),
                  (a.orientationChangeFocusVisibility =
                    Math.round((-(t + i.iscroll.y) / (m / 100)) * 100) / 100));
              }
              function v(e) {
                var t,
                  o,
                  a,
                  i = e.component;
                i.scrollToElement &&
                  (-1 !==
                  ["grid_of_posters", "series"].indexOf(n.State.router.page)
                    ? (a = (o = (t = n.System.component("scroll-wrapper"))
                        .components.scroll.components[i.scrollToElement]
                        .element).offsetTop)
                    : !i.iscroll ||
                      "series" === n.State.router.page ||
                      ((e = n.System.component(i.scrollToElement)) &&
                        ((o = e.element), (a = (0, s.offsetTop)(o)), (t = i)))),
                  o &&
                    a &&
                    (t.iscroll.scrollTo(
                      0,
                      -(
                        a +
                        Math.round(
                          i.orientationChangeFocusVisibility *
                            (o.offsetHeight / 100)
                        )
                      )
                    ),
                    y({ component: i }));
              }
              function b(e) {
                var t = e.component,
                  s = e.element,
                  a = e.options,
                  r = e.settings;
                t.iscroll
                  ? t.iscroll.refresh()
                  : (n.State.system.responsive.touch && !a.snap
                      ? (s.addEventListener("scroll", function () {
                          var e;
                          (t.iscroll.x = -Math.abs(s.scrollLeft)),
                            (t.iscroll.y = -Math.abs(s.scrollTop)),
                            n.System.publish("SCROLLING", s),
                            s.scrollWidth > s.offsetWidth &&
                            t.iscroll.isHorizontal
                              ? (e = s.scrollWidth - s.offsetWidth) -
                                  (e < 400 ? e / 2 : e / 4) <
                                s.scrollLeft
                                ? s.beforeEndX ||
                                  (n.System.publish("SCROLL_BEFORE_END", s),
                                  (s.beforeEndX = !0))
                                : (s.beforeEndX = !1)
                              : s.scrollHeight > s.offsetHeight &&
                                ((e = s.scrollHeight - s.offsetHeight) -
                                  (e < 400 ? e / 2 : e / 4) <
                                s.scrollTop
                                  ? s.beforeEndY ||
                                    (n.System.publish("SCROLL_BEFORE_END", s),
                                    (s.beforeEndY = !0))
                                  : (s.beforeEndY = !1)),
                            clearTimeout(i),
                            (i = setTimeout(function () {
                              s.scrollWidth > s.offsetWidth &&
                              t.iscroll.isHorizontal
                                ? (0 === s.scrollLeft && u(t, "prev"),
                                  s.scrollLeft + s.offsetWidth ===
                                    s.scrollWidth && u(t, "next"))
                                : s.scrollHeight > s.offsetHeight &&
                                  (0 === s.scrollTop && u(t, "prev"),
                                  s.scrollTop + s.offsetHeight ===
                                    s.scrollHeight && u(t, "next")),
                                n.System.publish("SCROLL_OPTIMIZED", s, !1, !0),
                                n.System.publish("SCROLL_END", s),
                                (i = !1);
                            }, 200));
                        }),
                        (t.iscroll = {
                          isHorizontal: a.horizontal || a.both,
                          refresh: function () {
                            return (
                              (this.x = -Math.abs(s.scrollLeft)),
                              (this.y = -Math.abs(s.scrollTop)),
                              (this.maxScrollX = s.scrollWidth),
                              (this.maxScrollY = s.scrollHeight),
                              this
                            );
                          },
                          scrollTo: function (e, t) {
                            s.scrollTo(Math.abs(e), Math.abs(t));
                          },
                          scrollBy: function (e, t, n) {
                            n && 0 < n
                              ? s.scrollBy({
                                  top: t,
                                  left: e,
                                  behavior: "smooth",
                                })
                              : s.scrollBy(e, t);
                          },
                          x: -Math.abs(s.scrollLeft),
                          y: -Math.abs(s.scrollTop),
                          maxScrollX: s.scrollWidth,
                          maxScrollY: s.scrollHeight,
                          wrapperWidth: s.offsetWidth,
                        }))
                      : (a.scrollbars && (r.scrollbars = "custom"),
                        a.page &&
                          ((r.extendSpace = !0), (t.isPageComponent = !0)),
                        a.snap &&
                          ((r.snap =
                            "string" == typeof a.snap ? a.snap : "span"),
                          (r.snapSpeed = 300),
                          (r.snapThreshold = 0.1),
                          (r.eventPassthrough = !0)),
                        a.horizontal && ((r.scrollX = !0), (r.scrollY = !1)),
                        a.both && ((r.scrollX = !0), (r.scrollY = !0)),
                        a.disableWheel && (r.mouseWheel = !1),
                        a.disableMouse && (r.disableMouse = !0),
                        a.disablePointer && (r.disablePointer = !0),
                        a.bounce &&
                          ((r.bounce = !0),
                          (r.wrap =
                            t.component &&
                            "super-hero" === t.component.origin &&
                            t.component.settings.wrap &&
                            2 < t.component.data.length)),
                        !1 === a.momentum && (r.momentum = !1),
                        t.parent.parent &&
                          "grid-of-posters" === t.parent.parent.id &&
                          ((r.scrollbars = "custom"),
                          (r.scrollX = !1),
                          (r.scrollY = !0),
                          (r.disableMouse = !1),
                          (r.disablePointer = !1),
                          (r.mouseWheel = !0)),
                        (e = r.snap && document.querySelector(r.snap)),
                        (r.snap && !e) ||
                          ((t.iscroll = new o.default(s, r)),
                          t.iscroll.on("scrollStart", function () {
                            t.iscroll.refreshed ||
                              (t.iscroll.refresh(), (t.iscroll.refreshed = !0)),
                              n.System.publish("SCROLL_START", s, !1, !0);
                          }),
                          t.iscroll.on("scrollEnd", function () {
                            setTimeout(function () {
                              t.component
                                ? (t.component.scrolling = !1)
                                : (t.scrolling = !1);
                            }, 0),
                              a.horizontal && this.maxScrollX < 0
                                ? (this.x === this.maxScrollX && u(t, "next"),
                                  0 === this.x && u(t, "prev"))
                                : this.maxScrollY < 0 &&
                                  (this.y === this.maxScrollY && u(t, "next"),
                                  0 === this.y && u(t, "prev")),
                              n.System.publish("SCROLL_END", s);
                          }),
                          t.iscroll.on("scrollReady", function () {
                            n.System.publish("SCROLL_READY", s);
                          }),
                          t.iscroll.on("scroll", function () {
                            var e;
                            t.component
                              ? (t.component.scrolling = !0)
                              : (t.scrolling = !0),
                              t.isPageComponent &&
                                t.iscroll.maxScrollY < 0 &&
                                n.System.publish(
                                  "PAGE_SCROLL",
                                  null,
                                  t.iscroll
                                ),
                              n.System.publish("SCROLLING", s),
                              a.horizontal && this.maxScrollX < 0
                                ? ((e =
                                    (e = Math.abs(this.maxScrollX)) < 400
                                      ? e / 2
                                      : e / 4),
                                  this.maxScrollX + e > this.x
                                    ? this.beforeEndX ||
                                      (n.System.publish("SCROLL_BEFORE_END", s),
                                      (this.beforeEndX = !0))
                                    : (this.beforeEndX = !1))
                                : this.maxScrollY < 0 &&
                                  ((e =
                                    (e = Math.abs(this.maxScrollY)) < 400
                                      ? e / 2
                                      : e / 4),
                                  this.maxScrollY + e > this.y
                                    ? this.beforeEndY ||
                                      (n.System.publish("SCROLL_BEFORE_END", s),
                                      (this.beforeEndY = !0))
                                    : (this.beforeEndY = !1)),
                              clearTimeout(i),
                              (i = setTimeout(function () {
                                n.System.publish("SCROLL_OPTIMIZED", s, !1, !0),
                                  (i = !1);
                              }, 200));
                          }),
                          t.component &&
                            "super-hero" === t.component.origin &&
                            "scroll-wrapper" === t.id &&
                            t.component.settings.autoAdvance &&
                            p(s))),
                    n.System.publish("SCROLL_SET", s));
              }
              function S(e) {
                p(e.element);
              }
              function T(e) {
                d((e = e.element)), c(e);
              }
              function E(e) {
                var t = e.component;
                (e = e.options),
                  d(t.parent.element),
                  h(e.direction, t.parent.iscroll),
                  p(t.parent.element);
              }
              function _(e) {
                (e = e.component).iscroll.isVisibleInViewport()
                  ? h("next", e.iscroll)
                  : p(e.element);
              }
              function I(e) {
                var t = e.component,
                  n = t.id + t.index,
                  o = 0;
                Object.keys(t.parent.components).forEach(function (e, t) {
                  e === n && (o = t - 1);
                }),
                  (e = o),
                  t.parent.parent.iscroll.goToPage(e, 0);
              }
              function w(e) {
                var t = e.component,
                  n = e.options;
                (e = t.parent) &&
                  e.iscroll &&
                  e.iscroll.maxScrollX < 0 &&
                  ((t = Math.abs(e.iscroll.maxScrollX)),
                  m(
                    e.iscroll.wrapperWidth > t ? t : e.iscroll.wrapperWidth,
                    n.direction,
                    e.iscroll,
                    e
                  ));
              }
              function k(e) {
                var t = e.component,
                  n = e.rootComponent,
                  o = e.options,
                  s = t.parent;
                s &&
                  s.iscroll &&
                  s.iscroll.maxScrollX < 0 &&
                  ((e = 100),
                  s.components.scroll &&
                    s.components.scroll.components.poster &&
                    (t =
                      s.components.scroll.components[
                        Object.keys(s.components.scroll.components)[1]
                      ]) &&
                    (e = t.element.offsetWidth + 5),
                  n.settings &&
                    n.settings.scrollItems &&
                    1 !== n.settings.scrollItems &&
                    ((n = Math.abs(s.iscroll.maxScrollX)),
                    (e =
                      s.iscroll.wrapperWidth > n ? n : s.iscroll.wrapperWidth)),
                  m(e, o.direction, s.iscroll, s));
              }
              function O(e) {
                var t,
                  o = e.element,
                  s = e.details;
                "fullscreen" !== n.State.router.page &&
                  ((t = Math.abs(s.y)),
                  (e = n.System.component("search-form")),
                  n.System.publish("DROPDOWN_CLOSE"),
                  (s =
                    t === (s = n.State.system.scrolled || 0) || s < t
                      ? "down"
                      : "up"),
                  (n.State.system.scrolled = t),
                  (n.State.system.scrollDirection = s),
                  60 < t
                    ? (n.System.binding(o, -60, {
                        type: "style",
                        style: "top",
                        unit: "px",
                        action: "add",
                      }),
                      n.System.binding(e.element, -52, {
                        type: "style",
                        style: "top",
                        unit: "px",
                        action: "add",
                      }),
                      "up" === s &&
                        (n.System.binding(o, 0, {
                          type: "style",
                          style: "top",
                          action: "remove",
                        }),
                        n.System.binding(e.element, 0, {
                          type: "style",
                          style: "top",
                          action: "remove",
                        })))
                    : (n.System.binding(o, 0, {
                        type: "style",
                        style: "top",
                        action: "remove",
                      }),
                      n.System.binding(e.element, 0, {
                        type: "style",
                        style: "top",
                        action: "remove",
                      })));
              }
              function R(e) {
                var t = e.element;
                (e =
                  t.previousSibling &&
                  !t.previousSibling.classList.contains("stripe") &&
                  !t.previousSibling.classList.contains("super-hero")),
                  (t.previousSibling && !e) || c(t);
              }
              function x(e) {
                var t = (s = (o = e.component).collection
                    ? o.components["scroll-wrapper"]
                    : o).parent.collection,
                  o = ((e = s.iscroll), s.components["arrow-left"].element),
                  s = s.components["arrow-right"].element;
                "grid_of_posters" !== n.State.router.page &&
                e &&
                0 !== e.maxScrollX
                  ? (n.System.binding(s, "hidden", {
                      type: "class",
                      action: "remove",
                    }),
                    n.System.binding(o, "hidden", {
                      type: "class",
                      action: "remove",
                    }),
                    0 !== e.x
                      ? e.x !== e.maxScrollX ||
                        t.state.visibleNext ||
                        n.System.binding(s, "hidden", {
                          type: "class",
                          action: "add",
                        })
                      : n.System.binding(o, "hidden", {
                          type: "class",
                          action: "add",
                        }))
                  : (n.System.binding(s, "hidden", {
                      type: "class",
                      action: "add",
                    }),
                    n.System.binding(o, "hidden", {
                      type: "class",
                      action: "add",
                    }));
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.element,
                    n = e.component,
                    o = e.action,
                    s = e.options,
                    a = e.details,
                    i = n.component || n;
                  (e = {
                    pageScrolls: g,
                    setScroll: b,
                    startWrap: S,
                    stopWrap: T,
                    btnItem: E,
                    auto: _,
                    btnIndex: I,
                    btnEpgDates: w,
                    btn: k,
                    header: O,
                    superhero: R,
                    setArrows: x,
                    scrollEnd: y,
                    scrollEndGop: f,
                    orientationChanged: v,
                  }),
                    o &&
                      e[o] &&
                      e[o]({
                        component: n,
                        element: t,
                        rootComponent: i,
                        options: s,
                        settings: {
                          bounce: !1,
                          mouseWheel: !0,
                          interactiveScrollbars: !0,
                          probeType: 3,
                          shrinkScrollbars: !1,
                        },
                        details: a,
                      });
                }),
                (o = (a = o) && a.__esModule ? a : { default: a });
            }.apply(t, n)) || (e.exports = n);
      },
      8703: function (e, t, n) {
        (n = [t, n(6918), n(5438), n(5438)]),
          void 0 ===
            (n = function (e, n, o, s) {
              "use strict";
              function a(e) {
                var t = e.rootComponent,
                  o = n.Source.constants["content-types"];
                (e = { options: { id: n.State.router.id } }),
                  n.State.router.params.seasonId &&
                    n.State.router.params.type === o.series &&
                    (e.url = n.Settings.app.endpoints.series),
                  n.System.publish("DATA_FETCH", null, {
                    component: t,
                    override: e,
                  });
              }
              function i(e) {
                var t = e.seriesData,
                  o = e.seasonsData,
                  s = e.rootComponent,
                  a = n.Source.constants["content-types"],
                  i = n.System.component("seasons");
                (s.data && s.data.restricted) ||
                  (t &&
                    ((e = { options: { id: n.State.router.id } }),
                    n.State.router.params.seasonId &&
                    n.State.router.params.type === a.series
                      ? ((i.cache = [{ id: n.State.router.params.seasonId }]),
                        n.System.publish("DOM_RENDER", null, { component: i }),
                        r({ seriesData: t, seasonsData: o, rootComponent: s }))
                      : n.System.publish("DATA_FETCH", null, {
                          component: i,
                          override: e,
                        })));
              }
              function r(e) {
                var t = e.seriesData,
                  o = e.seasonsData,
                  s = e.rootComponent,
                  a = o && o[0];
                (e = n.Source.constants["content-types"]),
                  t &&
                    a &&
                    ((o = {
                      options: {
                        id: (a = n.State.router.params.seasonId || o[0].id),
                      },
                    }),
                    n.State.router.params.seasonId &&
                      n.State.router.params.type === e.series &&
                      (o.url = n.Settings.app.endpoints.season),
                    s.settings.id || (s.settings.id = a),
                    n.System.publish("DATA_FETCH", null, {
                      component: n.System.component("season"),
                      override: o,
                    }));
              }
              function l(e) {
                var t = e.seasonData,
                  a = e.rootComponent;
                if (t) {
                  var i = n.Source.constants["content-types"];
                  if (t.contentType === i.season && t.restricted)
                    return (
                      (a.data.restricted = !0),
                      void n.System.publish("DOM_RENDER", null, {
                        component: a,
                      })
                    );
                  (e = n.Source.constants),
                    (e = {
                      params: {
                        page: 0,
                        size:
                          2 *
                          (e = (0, o.getRequestSize)(e.sizes.episode.visible)),
                      },
                      options: {
                        id: a.settings.id,
                        visibleItems: e,
                        initialItems: 2 * e,
                        domItems: 3 * e,
                        memoryItems: 3 * e,
                      },
                    }),
                    n.State.router.params.seasonId &&
                      n.State.router.params.type === i.series &&
                      ((e.url = n.Settings.app.endpoints.season),
                      (e.contentPath = ["content", "episodes", "episode"]),
                      t.number &&
                        0 < t.number &&
                        (i = n.System.component(
                          "seasons-item" + n.State.router.params.seasonId
                        )).data &&
                        ((i.data.number = t.number),
                        n.System.publish("DOM_RENDER", null, {
                          component: i,
                        }))),
                    n.System.publish("DATA_FETCH", null, {
                      collectionId: "episodes",
                      component: (0, s.dummyComponent)(),
                      override: e,
                    }),
                    n.System.publish("DATA_FETCH", null, {
                      component: n.System.component("genre-stripe"),
                      override: { data: t.genre },
                    });
                }
              }
              function c(e) {
                var t = e.data,
                  o = e.component;
                n.State.router.params.seasonId &&
                  t &&
                  t.scheduleId &&
                  (((e = n.System.getSource(
                    "collections",
                    "asset"
                  )).options.action = !1),
                  (e.url += "tv_schedule/".concat(t.scheduleId)),
                  (o.collection = e),
                  n.System.publish("DATA_FETCH", null, {
                    collectionId: "asset",
                    component: o,
                  }));
              }
              function p(e) {
                var t = e.data;
                (e = e.rootComponent.settings),
                  t &&
                    e.id !== t.id &&
                    ((e.id = t.id),
                    (n.System.component("episodes").data = null),
                    (n.System.component("episodes").clearData = !0),
                    n.System.publish("CHANGE_SEASON"),
                    n.System.publish("DATA_FETCH", null, {
                      component: n.System.component("season"),
                      override: { options: { id: t.id } },
                    }));
              }
              function d(e) {
                var t = e.details,
                  o = Array.isArray(t) ? t : [],
                  s = o;
                (e = "locked" === n.System.getItem("parentalStatus")),
                  t &&
                    e &&
                    ((s = []),
                    o.forEach(function (e) {
                      e.restricted || s.push(e);
                    })),
                  (n.System.component("episodes").cache = s.length ? s : null),
                  n.System.publish("DOM_RENDER", null, {
                    component: n.System.component("episodes"),
                  });
              }
              function u(e) {
                var t = e.component,
                  o = n.Source.constants["content-types"],
                  s = n.System.component("season").data;
                (e = n.System.getItem("parentalStatus") || "locked"),
                  ((t.data.baseRestricted && t.data.contentType !== o.series) ||
                    (s.baseRestricted && s.contentType === o.season)) &&
                  "locked" === e
                    ? (n.System.publish("ROUTER_CHANGE_URL", null, {
                        page: n.Settings.router.page.default,
                      }),
                      n.System.publish("ROUTER_PARSE"))
                    : n.System.publish("DATA_FETCH", null, { component: t });
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.action,
                    o = e.component,
                    s = e.details,
                    m = n.System.component("series"),
                    h = m.data,
                    g = n.System.component("seasons").data,
                    f = n.System.component("season").data,
                    y = o.data;
                  (e = {
                    prepare: a,
                    ready: i,
                    season: r,
                    episodes: l,
                    getEpisode: c,
                    changeSeason: p,
                    episodesReady: d,
                    parentalChanged: u,
                  }),
                    t &&
                      e[t] &&
                      e[t]({
                        seriesData: h,
                        seasonsData: g,
                        seasonData: f,
                        data: y,
                        component: o,
                        rootComponent: m,
                        details: s,
                      });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      8406: function (e, t) {
        var n = function (e) {
          "use strict";
          function n(e) {
            var t = e.element;
            (e = e.component),
              "" !== t.value ? (e.state = "default") : (e.state = "invalid");
          }
          Object.defineProperty(e, "__esModule", { value: !0 }),
            (t.default = function (e) {
              var t = e.element,
                o = e.component,
                s = e.action;
              (e = { required: n }),
                s && e[s] && e[s]({ element: t, component: o });
            });
        }.apply(t, [t]);
        void 0 === n || (e.exports = n);
      },
      6417: function (e, t, n) {
        (n = [t, n(6918), n(4738)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              var s;
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e, t) {
                  var o =
                      2 < arguments.length && void 0 !== arguments[2]
                        ? arguments[2]
                        : {},
                    s =
                      3 < arguments.length && void 0 !== arguments[3]
                        ? arguments[3]
                        : {};
                  return new Promise(function (i, p) {
                    (a = a || n.System.getItem("providers")).analytics.url &&
                      ((t = a.analytics.url + t),
                      (-1 === r ? l : c)(e, t, o, s).then(i, p));
                  });
                }),
                (o = (s = o) && s.__esModule ? s : { default: s });
              var a,
                i = !1,
                r = -1;
              function l(e, t, o, s) {
                return new Promise(function (a, l) {
                  n.System.request("GET", t + s.getUrl, null, s).then(function (
                    n
                  ) {
                    n.response && ((i = !1), (r = n.response)),
                      -1 !== r
                        ? c(e, t, o, s).then(a, l)
                        : l("Analytics Error: No token.");
                  },
                  l);
                });
              }
              function c(e, t, s, c) {
                return new Promise(function (p, d) {
                  var u, m, h, g;
                  (u = e),
                    (m = t),
                    (h = s),
                    (g = c),
                    new Promise(function (e, t) {
                      var s =
                          ((p = Math.round(Date.now() / 1e3)),
                          !1 === i && (i = p - r),
                          p + i),
                        l = a ? a.analytics.params.serviceProviderId : null,
                        c = a
                          ? (0, o.default)(a.analytics.params.privateKey + s)
                          : null,
                        p = {
                          eventHeader: {
                            1: 1,
                            2: 10,
                            3: n.System.getItem("deviceId"),
                            4: n.System.getItem(["customer", "id"]),
                            5: parseInt(
                              n.System.getItem(["user", "accountId"]),
                              10
                            ),
                          },
                        };
                      (g.headers = [
                        { type: "puid", info: l },
                        { type: "token", info: s },
                        { type: "chk", info: c },
                        {
                          type: "Content-Type",
                          info: "application/json; charset=UTF-8",
                        },
                      ]),
                        h.event && (p.eventHeader.event = h.event),
                        null !== p && (p = JSON.stringify(p)),
                        l
                          ? n.System.request(u, m + g.postUrl, p, g).then(e, t)
                          : n.System.error(
                              "ANALYTICS",
                              "Missing analytics provider data."
                            );
                    }).then(function (n) {
                      -1 !== (r = n.response) || c.retry
                        ? d("Analytics Error: No token on POST.")
                        : ((c.retry = !0), l(e, t, s, c).then(p, d));
                    }, d);
                });
              }
            }.apply(t, n)) || (e.exports = n);
      },
      7030: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e, t) {
                  var s =
                      2 < arguments.length && void 0 !== arguments[2]
                        ? arguments[2]
                        : {},
                    a =
                      3 < arguments.length && void 0 !== arguments[3]
                        ? arguments[3]
                        : {};
                  return new Promise(function (i, r) {
                    var l = (l = n.System.getItem([
                      "providers",
                      "epgCache",
                      "url",
                    ]))
                      ? l + "api/"
                      : n.Settings["base-api"];
                    (t = -1 < t.indexOf("http") ? t : l + t),
                      "GET" === e &&
                        ((l = (0, o.paramsBuilder)(s, a.encode)),
                        -1 < t.indexOf("?") && (l = l.replace("?", "&")),
                        (t += l),
                        (s = null)),
                      null !== s && (s = JSON.stringify(s)),
                      n.System.request(e, t, s, a).then(i, r);
                  });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      5343: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e, t) {
                  var s =
                      2 < arguments.length && void 0 !== arguments[2]
                        ? arguments[2]
                        : {},
                    a =
                      3 < arguments.length && void 0 !== arguments[3]
                        ? arguments[3]
                        : {};
                  return new Promise(function (i, r) {
                    var l = n.Settings["base-api"];
                    (t = -1 < t.indexOf("http") ? t : l + t),
                      "GET" === e &&
                        ((l = (0, o.paramsBuilder)(s, a.encode)),
                        -1 < t.indexOf("?") && (l = l.replace("?", "&")),
                        (t += l),
                        (s = null)),
                      null !== s && (s = JSON.stringify(s)),
                      n.System.request(e, t, s, a).then(i, r);
                  });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      3916: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e, t) {
                  var s =
                      2 < arguments.length && void 0 !== arguments[2]
                        ? arguments[2]
                        : {},
                    a =
                      3 < arguments.length && void 0 !== arguments[3]
                        ? arguments[3]
                        : {};
                  return new Promise(function (i, r) {
                    var l = (l = n.System.getItem(["providers", "edge", "url"]))
                      ? l + "xtv-ws-client/api/"
                      : n.Settings["base-api"];
                    (t = -1 < t.indexOf("http") ? t : l + t),
                      (a.authorization = n.System.getItem("auth-token")),
                      "GET" === e &&
                        ((l = (0, o.paramsBuilder)(s, a.encode)),
                        -1 < t.indexOf("?") && (l = l.replace("?", "&")),
                        (t += l),
                        (s = null)),
                      null !== s && (s = JSON.stringify(s)),
                      n.System.request(e, t, s, a).then(i, r);
                  });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      9191: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e, t) {
                  var o =
                    2 < arguments.length && void 0 !== arguments[2]
                      ? arguments[2]
                      : {};
                  return new Promise(function (s, a) {
                    var i;
                    n.System.getItem(["device", "deviceInfo", "vuid"])
                      ? a({})
                      : ((i = (i = n.System.getItem([
                          "providers",
                          "multirights",
                          "url",
                        ]))
                          ? i + "xtv-ws-client/api/"
                          : n.Settings["base-api"]),
                        (t = -1 < t.indexOf("http") ? t : i + t),
                        (o.authorization = n.System.getItem("auth-token")),
                        n.System.request(e, t, null, o).then(s, a));
                  });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      9672: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e, t) {
                  var s =
                      2 < arguments.length && void 0 !== arguments[2]
                        ? arguments[2]
                        : {},
                    a =
                      3 < arguments.length && void 0 !== arguments[3]
                        ? arguments[3]
                        : {};
                  return new Promise(function (i, r) {
                    var l,
                      c = n.System.getItem("providers"),
                      p = c.prmv4,
                      d = {
                        type: "Content-Type",
                        info: "application/json; charset=UTF-8",
                      };
                    if (!c.prm && !p)
                      return (
                        n.System.setItem("prmStatus", {
                          configured: !1,
                          registered: !1,
                        }),
                        void r({ status: 1e3 })
                      );
                    (a.authorization = n.System.getItem("auth-token")),
                      a.headers && a.headers.length
                        ? (a.headers.forEach(function (e) {
                            e.info = n.System.getItem(e.type);
                          }),
                          a.headers.push(d))
                        : (a.headers = [d]),
                      p &&
                        p.url === t &&
                        ((l = "mn-customer"),
                        a.headers.push({ type: l, info: n.System.getItem(l) })),
                      "GET" === e &&
                        ((l = (0, o.paramsBuilder)(s, a.encode)),
                        -1 < t.indexOf("?") && (l = l.replace("?", "&")),
                        (t += l),
                        (s = null)),
                      null !== s && (s = JSON.stringify(s)),
                      n.System.request(e, t, s, a).then(i, r);
                  });
                });
            }.apply(t, n)) || (e.exports = n);
      },
      2685: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              function s(e) {
                var t,
                  n,
                  o = e / 60;
                return (
                  (n = "".concat(Math.floor(o), "min")),
                  59 < o &&
                    ((e = 60 * (t = Math.floor(o / 60))),
                    (e = (o = Math.floor(o - e)) < 10 ? "0" : ""),
                    (n =
                      0 === o
                        ? "".concat(t, "h")
                        : "".concat(t, "h ").concat(e + o, "min"))),
                  n
                );
              }
              function a(e) {
                var t = e.data,
                  o = n.Source.constants["content-types"],
                  s = n.State.router.params.type,
                  a = n.State.router.id;
                return (
                  (e = "vod"),
                  s === o.tv_schedule && (e = "tv_schedule"),
                  s === o.tv_channel && (e = "tv_channel"),
                  s === o.trailer && (e = "trailer"),
                  (s !== o.movie && s !== o.episode) || (e = "movie"),
                  t + "".concat(e, "/").concat(a)
                );
              }
              function i(e) {
                var t = e.data;
                return (
                  (e = t[1] ? " (".concat(t[1], ")") : ""),
                  "".concat(t[0]).concat(e)
                );
              }
              function r(e) {
                return (e = e.data)[0] || e[1];
              }
              function l(e) {
                if ((e = e.options) && e.data)
                  return (0, o.formatSubtitle)(
                    e.data[1] || 0,
                    e.data[2] || 0,
                    e.data[3] || ""
                  ).join(" ");
              }
              function c(e) {
                if ((e = e.data)) {
                  var t = [];
                  return (
                    (0, o.formatSubtitle)(e[1] || 0, e[2] || 0, e[3] || "").map(
                      function (e) {
                        t.push({ label: e });
                      }
                    ),
                    t
                  );
                }
              }
              function p(e) {
                var t = e.data;
                if (((e = e.fallback), (e = t || e)))
                  return (0, o.formatDate)(
                    new Date(e),
                    n.Settings.app.localization.airDateTime
                  );
              }
              function d(e) {
                if (0 < (e = (e = e.data)[0] || e[1])) return s(e);
              }
              function u(e) {
                var t = e.data,
                  o = e.fallback;
                return (
                  (e = e.parsed),
                  (t = t || o),
                  -1 !==
                    [
                      (o = n.Source.constants["content-types"]).episode,
                      o.movie,
                    ].indexOf(e.contentType) && (t = e.id),
                  t
                );
              }
              function m(e) {
                return s(e.data || 0);
              }
              function h(e) {
                var t,
                  o = e.data,
                  s = e.fallback,
                  a = e.parsed,
                  i = n.Source.constants["content-types"],
                  r = 0;
                return (
                  a.contentType === i.tv_schedule && a.isLive
                    ? ((t = o[0] || s),
                      (e = o[1] || s),
                      (r = Math.ceil(((Date.now() - t) / (e - t)) * 100)))
                    : a.contentType === i.asset &&
                      ((i = o[2] || s),
                      (s = o[3] || o[4] || s),
                      (o = o[5] ? 100 : 0),
                      (r = 0 < i ? Math.ceil((i / s) * 100) : o)),
                  Math.min(r, 100)
                );
              }
              function g(e) {
                var t = e.data;
                if (
                  ((e =
                    (e = e.options) && e.limit
                      ? e.limit
                      : n.Settings.app.asset[
                          n.State.system.responsive.small
                            ? "genreLimitPhone"
                            : "genreLimit"
                        ] || t.length),
                  Array.isArray(t) && 0 < t.length)
                ) {
                  var o = [];
                  return (
                    t.forEach(function (e) {
                      o.push({
                        type: "page",
                        label: e,
                        pageId: "search",
                        params: { searchText: encodeURIComponent(e) },
                      });
                    }),
                    0 < e && (o = o.slice(0, e)),
                    o
                  );
                }
              }
              function f(e) {
                var t = e.data;
                if (
                  ((e = e.options),
                  t &&
                    ((e =
                      e && e.limit
                        ? e.limit
                        : n.Settings.app.asset[
                            n.State.system.responsive.small
                              ? "castLimitPhone"
                              : "castLimit"
                          ] || t.length),
                    Array.isArray(t) && 0 < t.length))
                ) {
                  var o = [];
                  return (
                    t.forEach(function (e) {
                      (e = e.firstName
                        ? "".concat(e.firstName, " ").concat(e.lastName)
                        : e.lastName),
                        o.push({
                          type: "page",
                          label: e,
                          pageId: "search",
                          params: { searchText: '"'.concat(e, '"') },
                        });
                    }),
                    0 < e && (o = o.slice(0, e)),
                    o
                  );
                }
              }
              function y(e) {
                var t = e.data;
                if (
                  ((e = e.options),
                  t &&
                    ((e =
                      e && e.limit
                        ? e.limit
                        : n.Settings.app.asset[
                            n.State.system.responsive.small
                              ? "directorsLimitPhone"
                              : "directorsLimit"
                          ] || t.length),
                    Array.isArray(t) && 0 < t.length))
                ) {
                  var o = [];
                  return (
                    t.forEach(function (e) {
                      (e = e.firstName
                        ? "".concat(e.firstName, " ").concat(e.lastName)
                        : e.lastName),
                        o.push({
                          type: "page",
                          label: e,
                          pageId: "search",
                          params: { searchText: '"'.concat(e, '"') },
                        });
                    }),
                    0 < e && (o = o.slice(0, e)),
                    o
                  );
                }
              }
              function v(e) {
                return e.parsed.seriesId;
              }
              function b(e) {
                var t = e.data,
                  o = e.fallback,
                  s = e.parsed;
                return (
                  (e = n.Source.constants["content-types"]),
                  (o = t[0] || t[1] || o),
                  s.contentType !== e.tv_schedule ||
                    s.isLive ||
                    s.catchup ||
                    (o = 0),
                  o
                );
              }
              function S(e) {
                var t = e.data,
                  o =
                    ((e = e.fallback), n.System.getItem("fallbackStreamRules"));
                return (
                  (t || [])
                    .reduce(function (e, t) {
                      var s = o[n.Settings.app.player.drm],
                        a = t.protocol.toLowerCase(),
                        i = t.encryption.toLowerCase(),
                        r = a + "-" + (i || "none");
                      return (
                        s &&
                          -1 !== s.protocols.indexOf(a) &&
                          s.priority.hasOwnProperty(r) &&
                          e.push({
                            url: t.url,
                            fallback: !0,
                            protocol: a,
                            encrypted: i,
                            priority: s.priority[r],
                          }),
                        e
                      );
                    }, [])
                    .sort(function (e, t) {
                      return e.priority - t.priority;
                    })
                    .shift() || e
                );
              }
              function T(e) {
                var t = e.data;
                return (
                  (e = n.System.translate([
                    "purchase",
                    1 < t ? "days" : "day",
                  ])),
                  "".concat(t, " ").concat(e)
                );
              }
              function E(e) {
                return (
                  (e = e.parsed),
                  ""
                    .concat(n.System.translate(["index", "rent-for"]), " ")
                    .concat(e["rent-label"])
                );
              }
              function _(e) {
                var t,
                  o,
                  s,
                  a,
                  i,
                  r = e.data,
                  l = e.fallback;
                return (
                  "ASSET" === e.parsed.contentType &&
                    ((i = n.System.getItem([
                      "customer",
                      "currencyStyle",
                      "decimalSep",
                    ])),
                    (t = n.System.getItem([
                      "customer",
                      "currencyStyle",
                      "thousandsSep",
                    ])),
                    (o = n.System.getItem([
                      "customer",
                      "localizationInfo",
                      "currencyprefixed",
                    ])),
                    (s = n.System.getItem([
                      "customer",
                      "localizationInfo",
                      "currencysymbol",
                    ])),
                    (e = [(a = r.toString().split("."))[0]]),
                    "string" == typeof t &&
                      0 < t.length &&
                      3 < a[0].length &&
                      (e = [
                        [
                          (r = a[0]).substr(0, r.length - 3),
                          r.substr(r.length - 3),
                        ].join(t),
                      ]),
                    "string" == typeof i &&
                      0 < i.length &&
                      !a[1] &&
                      (a[1] = "00"),
                    ("string" == typeof i && 0 < i.length) ||
                      !a[1] ||
                      (i = "."),
                    a[1] && e.push(a[1]),
                    (i = [e.join(i)]).splice(
                      0 === parseInt(o, 10) ? 1 : 0,
                      0,
                      s
                    ),
                    (l = i.join(""))),
                  l
                );
              }
              function I(e) {
                var t = e.data,
                  o = e.fallback,
                  s = e.parsed;
                return (
                  (e = t || o),
                  (t = s.number),
                  (o = n.Source.constants["content-types"]),
                  s.contentType === o.tv_channel && (e = t),
                  e
                );
              }
              function w(e) {
                var t = e.data,
                  o = e.fallback,
                  s = e.parsed,
                  a = o;
                return (
                  (e = t[0]),
                  (o = t[1]),
                  (t = n.Source.constants["content-types"]),
                  s.contentType === t.asset && (a = !o && 0 !== e),
                  a
                );
              }
              function k(e) {
                var t = e.data;
                return (
                  (e = e.fallback),
                  ((0, o.hasService)("Mobile CatchUp TV") && t) || e
                );
              }
              function O(e) {
                var t = e.data,
                  o = e.parsed,
                  s = n.Source.constants["content-types"];
                return (
                  (e = Date.now()),
                  !!(o.contentType === s.tv_schedule && t < e && o.catchup) ||
                    o.contentType === s.asset ||
                    void 0
                );
              }
              function R(e) {
                var t = e.data,
                  n = e.fallback,
                  o = t[0];
                return (
                  (e = t[1]),
                  (t = t[2] || n),
                  o <= (n = Date.now()) && n <= e && t
                );
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.data,
                    n = e.action,
                    o = e.fallback,
                    s = e.options,
                    x = e.parsed,
                    A = o;
                  return (
                    (e = {
                      url: a,
                      title: i,
                      episode: r,
                      subtitle: l,
                      subtitleList: c,
                      airtime: p,
                      duration: d,
                      programId: u,
                      progressTime: m,
                      progress: h,
                      genre: g,
                      cast: f,
                      directors: y,
                      episodic: v,
                      bookmarkPos: b,
                      catchup: k,
                      playable: O,
                      restart: R,
                      fallbackStream: S,
                      rentLabel: _,
                      rentDuration: T,
                      rentButtonLabel: E,
                      purchased: w,
                      channelNumber: I,
                    }),
                    n &&
                      e[n] &&
                      (A = e[n]({
                        data: t,
                        fallback: o,
                        options: s,
                        parsed: x,
                      })),
                    A
                  );
                });
            }.apply(t, n)) || (e.exports = n);
      },
      8015: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              function s(e) {
                var t,
                  s,
                  a,
                  i,
                  r = e.data,
                  l = r,
                  c = e.options.key;
                (t = r),
                  (s = Date.now()),
                  (i = (0, o.findInObject)(t, ["parentalControlOn"])),
                  (e = n.System.getItem("parentalStatus")),
                  (t = n.System.getItem("parentalTimeout")),
                  "unlocked" !== (i = e || (i ? "locked" : "unlocked")) ||
                    isNaN(t) ||
                    (s < t
                      ? n.System.timeout(window, "parentalTimeout", t - s)
                      : (i = "locked")),
                  n.System.setItem("parentalStatus", i),
                  (i = (i = r).subscribedServices),
                  (a = []),
                  i &&
                    i.length &&
                    i.forEach(function (e) {
                      a.push(e.name);
                    }),
                  n.System.setItem("services", a),
                  (i = r),
                  (i = (0, o.findInObject)(i, ["refreshAfter"])) &&
                    (n.System.clearTimer("refreshTokens"),
                    n.System.timeout(
                      window,
                      "refreshTokens",
                      1e3 * i,
                      "REFRESH_CUSTOMER_TOKENS"
                    )),
                  (l.currencyStyle = (function (e) {
                    var t,
                      n = 0,
                      o = { decimalSep: "", thousandsSep: "" },
                      s = e;
                    if ("string" == typeof s && 0 < s.length)
                      for (var a = s.length - 1; 0 <= a; --a)
                        (t = s[a]),
                          (n += 1),
                          isNaN(parseInt(t, 10)) &&
                            (3 === n
                              ? (o.decimalSep = t)
                              : (4 !== n && 7 !== n) || (o.thousandsSep = t));
                    return o;
                  })(
                    (0, o.findInObject)(r, ["localizationInfo", "decimalstyle"])
                  )),
                  n.System.setItem(c, r);
              }
              function a(e) {
                var t = e.data,
                  o = e.options;
                Array.isArray(t)
                  ? t.forEach(function (e) {
                      "P" === e.accountType && n.System.setItem(o.key, e);
                    })
                  : n.System.setItem(o.key, t);
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.data,
                    n = e.action,
                    o = e.fallback,
                    i = e.parsed,
                    r = e.options,
                    l = o;
                  return (
                    (e = { store: s, selectAccount: a }),
                    n &&
                      e[n] &&
                      (l = e[n]({
                        data: t,
                        fallback: o,
                        parsed: i,
                        options: r,
                      })),
                    l
                  );
                });
            }.apply(t, n)) || (e.exports = n);
      },
      8876: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              function s(e) {
                return e.data.catchupTv;
              }
              function a(e) {
                return e.data < Date.now();
              }
              function i(e) {
                if (
                  ((e = e.data),
                  Array.isArray(e) &&
                    0 <
                      (e = (0, o.formatSubtitle)(
                        e[1] || 0,
                        e[2] || 0,
                        e[3] || ""
                      )).length)
                )
                  return e.join(" · ");
              }
              function r(e) {
                var t = e.data;
                if ("number" == typeof t) {
                  var n,
                    o = t / 60;
                  return (
                    (n = "".concat(Math.floor(o), "min")),
                    59 < o &&
                      ((t = 60 * (e = Math.floor(o / 60))),
                      (t = (o = Math.floor(o - t)) < 10 ? "0" : ""),
                      (n =
                        0 === o
                          ? "".concat(e, "h")
                          : "".concat(e, "h ").concat(t + o, "min"))),
                    n
                  );
                }
              }
              function l(e) {
                var t = e.data,
                  o = e.options,
                  s = e.parsed;
                if (n.System.component("epg-container")) {
                  var a = n.System.component("epg-container").settings
                    .percentView;
                  return (
                    (e = n.State.system.responsive.small ? a / 60 : a / 120),
                    (a = Math.floor(s.start / 1e3)),
                    (s = Math.floor(s.end / 1e3)),
                    (a = Math.floor(o.params.dateFrom / 1e3) - a),
                    (o = s - Math.floor(o.params.dateTo / 1e3)),
                    "".concat(
                      e * ((t - (0 < a ? a : 0) - (0 < o ? o : 0)) / 60),
                      "vw"
                    )
                  );
                }
              }
              function c(e) {
                var t = (i = e.component).component,
                  o = n.System.component("epg-container").settings;
                if (t && t.data && i.data) {
                  var s = i.data.start,
                    a = i.data.end,
                    i =
                      ((e = s < (e = t.collection.params.dateFrom) ? e : s),
                      (s = a < (t = t.collection.params.dateTo) ? a : t),
                      (a = n.System.component("epg-dates-itemtoday").data
                        .selected),
                      (t = o.currentTime.getTime() < o.now.getTime() && !a),
                      (a = o.currentTime.getTime() > o.now.getTime() && !a),
                      i.data.catchupTV ? "303030" : "282828");
                  return (
                    (100 < (e = ((o.now.getTime() - e) / (s - e)) * 100) ||
                      t) &&
                      (e = 100),
                    (e < 0 || a) && (e = 0),
                    0 === e
                      ? null
                      : "padding-box linear-gradient(90deg, #"
                          .concat(i, " ")
                          .concat(e, "%, #181818 ")
                          .concat(e, "%)")
                  );
                }
              }
              function p(e) {
                var t = e.component,
                  o = t.component,
                  s = n.System.component("epg-container").settings;
                if (
                  ((e = s.percentView),
                  o &&
                    o.data &&
                    t.data &&
                    ((o = t.data.start), 1 === t.mapIndex && o > s.dateFrom))
                )
                  return (
                    (e = n.State.system.responsive.small ? e / 60 : e / 120),
                    ((o - s.dateFrom) / 6e4) * e
                  );
              }
              function d(e) {
                var t = (r = e.component).component,
                  o = 0,
                  s = (i = n.System.component("epg-schedules-all")).iscroll
                    ? ((o = Math.abs(i.iscroll.x)), i.iscroll.wrapperWidth + o)
                    : ((o = Math.abs(i.element.scrollLeft)),
                      i.element.offsetWidth + o);
                if (t && t.data && r.data && i) {
                  var a = r.parentElement.offsetLeft,
                    i =
                      ((e =
                        r.parentElement.offsetLeft +
                        r.parentElement.offsetWidth),
                      o <= a && s < e && a < s),
                    r = a < o && s < e;
                  if ((t = a < o && e <= s && o < e) || i || r)
                    return "calc(100% - ".concat(
                      (i || r ? e - s : 0) + (t || r ? o - a : 0),
                      "px)"
                    );
                }
              }
              function u(e) {
                var t = (r = e.component).component,
                  o = 0,
                  s = (i = n.System.component("epg-schedules-all")).iscroll
                    ? ((o = Math.abs(i.iscroll.x)), i.iscroll.wrapperWidth + o)
                    : ((o = Math.abs(i.element.scrollLeft)),
                      i.element.offsetWidth + o);
                if (t && t.data && r.data && i) {
                  var a = r.parentElement.offsetLeft,
                    i =
                      ((e =
                        r.parentElement.offsetLeft +
                        r.parentElement.offsetWidth),
                      o <= a && s < e && a < s),
                    r = a < o && s < e;
                  if ((t = a < o && e <= s && o < e) || i || r)
                    return (
                      (a = t || r ? o - a : 0),
                      "0 ".concat(i || r ? e - s : 0, "px 0 ").concat(a, "px")
                    );
                }
              }
              function m(e) {
                return (e = e.data), Array.isArray(e) || (e = []), e[0] || e[1];
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.data,
                    n = e.action,
                    o = e.options,
                    h = e.component,
                    g = e.fallback,
                    f = e.parsed;
                  return (
                    (e = g || t),
                    (g = {
                      isCatchup: s,
                      subtitle: i,
                      past: a,
                      duration: r,
                      width: l,
                      shadow: c,
                      marginLeft: p,
                      marginWidth: d,
                      margin: u,
                      channelId: m,
                    }),
                    n &&
                      g[n] &&
                      (e = g[n]({
                        data: t,
                        options: o,
                        parsed: f,
                        component: h,
                      })),
                    e
                  );
                });
            }.apply(t, n)) || (e.exports = n);
      },
      5861: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              function s(e) {
                var t = e.data,
                  s = [],
                  a =
                    ((e = n.System.getSource("collections", "epg-channels")
                      .url),
                    (0, o.getHistoryData)("url")),
                  i = n.Source.constants["content-types"],
                  r = [
                    {
                      id: "all",
                      url: e,
                      selected: !a || a === e,
                      name: "all-channels",
                    },
                  ];
                return (
                  t.forEach(function (e) {
                    e.type === i.channel &&
                      (s.push(e),
                      (e.url =
                        n.System.getSource("collections", "favorite").url +
                        e.id),
                      (e.selected = !!a && a === e.url),
                      r.push(e));
                  }),
                  (n.Source.collections["channels-list"] = { data: r }),
                  s
                );
              }
              function a(e) {
                return ((e = e.data) && e.length) || 0;
              }
              function i(e) {
                var t,
                  n = e.data,
                  o = e.key;
                return (
                  o &&
                    n.forEach(function (e) {
                      e.name === o && (t = e.id);
                    }),
                  t
                );
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.data,
                    n = e.action,
                    o = e.options,
                    r = e.fallback;
                  return (
                    (e = o.key),
                    (o = { channels: s, dataCount: a, id: i }),
                    t && n && o[n] && (r = o[n]({ data: t, key: e })),
                    r
                  );
                });
            }.apply(t, n)) || (e.exports = n);
      },
      6364: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              function o(e, t, o, s, a, i, r, l, c) {
                var p,
                  d = t.zoom || "zoom" === e.style,
                  u = t.ext || "jpg",
                  m = o && o[e.size] ? o[e.size].width : 0,
                  h = o && o[e.size] ? o[e.size].height : 0,
                  g = 0,
                  f = 0;
                return (
                  0 === m &&
                    0 === h &&
                    ((p = r && r[s] && r[s][e.size]) &&
                      Object.keys(p).forEach(function (e, t) {
                        var o, a, i;
                        n.State.system.responsive[e] &&
                          ((o = n.State.system.breakpoint),
                          (a = p[e].count),
                          (i = p[e].screen),
                          (e = l[s]),
                          (m = Math.floor((o * i) / 100 / a)),
                          (h = Math.floor(m * e)));
                      }),
                    o &&
                      o.width &&
                      o.height &&
                      ((m = o.width), (h = o.height))),
                  t.size && ((m = o[t.size].width), (h = o[t.size].height)),
                  d && ((m = Math.ceil(1.2 * m)), (h = Math.ceil(1.2 * h))),
                  c && ((m = Math.ceil(2 * m)), (h = Math.ceil(2 * h))),
                  (a !== i.vod_series && a !== i.season) ||
                    ((g = 6), (f = 8), (u = "png")),
                  { width: m, height: h, left: g, top: f, ext: u }
                );
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t,
                    s = e.data,
                    a = e.options,
                    i = e.fallback,
                    r = e.component,
                    l = ((e = e.parsed), i),
                    c = r.settings || {},
                    p =
                      ((r = n.Source.constants),
                      a.orientation || c.orientation),
                    d = e.contentType,
                    u = ((e = e.id), r.sizes[p]),
                    m =
                      "grid_of_posters" === n.State.router.page
                        ? r["stripe-grid-sizes"]
                        : r["stripe-sizes"],
                    h = r["stripe-ratio"],
                    g = n.State.system.responsive.retina,
                    f = r["content-types"],
                    y = n.System.getItem(["providers", "imagesvc", "url"]),
                    v = n.System.getItem(["providers", "imagesvcHttp", "url"]);
                  return (
                    (r =
                      (!a.metadataImage && d === f.asset) ||
                      d === f.vod_season ||
                      d === f.vod_series),
                    y &&
                      (r
                        ? ((r = o(c, a, u, p, d, f, m, h, g)),
                          (t = ""),
                          a.tag
                            ? ("super-hero" === p &&
                                (t += "&mtags=".concat(
                                  encodeURIComponent("SUPERHERO," + a.tag)
                                )),
                              "asset" === p &&
                                (t += "&mtags=".concat(
                                  encodeURIComponent("SCENE," + a.tag)
                                )))
                            : c.tags &&
                              Object.keys(c.tags).forEach(function (e) {
                                t += "&"
                                  .concat(e, "=")
                                  .concat(encodeURIComponent(c.tags[e]));
                              }),
                          (l = ""
                            .concat(y, "image/")
                            .concat(d, "/")
                            .concat(e, "/")
                            .concat(r.width, "/")
                            .concat(r.height, "/")
                            .concat(r.left, "/")
                            .concat(r.top, "?type=")
                            .concat(r.ext)
                            .concat(t)))
                        : s &&
                          s.length &&
                          s.forEach(function (e) {
                            var t = o(c, a, u, p, d, f, m, h, g),
                              n = a.usage || "BROWSE";
                            (n =
                              d === f.tv_channel || a.channelLogo
                                ? "CH_LOGO"
                                : n),
                              "DEFAULT" !== e.imageSource &&
                                ("landscape" === p &&
                                  d === f.tv_schedule &&
                                  (n = "S_DESC"),
                                d === f.tv_channel && (t.ext = "png"),
                                (n && n !== e.usage) ||
                                  ((n =
                                    v && -1 !== e.URLprefix.indexOf(v)
                                      ? e.URLprefix.replace(v, y)
                                      : e.URLprefix),
                                  (l = ""
                                    .concat(n, "/")
                                    .concat(t.width, "/")
                                    .concat(t.height, "/")
                                    .concat(t.left, "/")
                                    .concat(t.top, "/")
                                    .concat(e.URLsuffix, ".")
                                    .concat(t.ext))));
                          })),
                    l
                  );
                });
            }.apply(t, n)) || (e.exports = n);
      },
      7384: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.data,
                    o = e.action,
                    s = e.fallback,
                    a = e.options,
                    i = ((s = s), { navbar: p, locales: d, stripes: u });
                  return (
                    t &&
                      o &&
                      i[o] &&
                      (t.forEach(function (e, t) {
                        i[o]({
                          item: e.item,
                          index: t,
                          config: n.Settings.maui,
                          source: n.Source,
                          defaultPage: n.Settings.router.page,
                          options: a,
                        });
                      }),
                      (s = t)),
                    s
                  );
                });
              var s = ["VOD", "Continue Watching", "Last Chance To Watch"],
                a = [
                  "continue_watching",
                  "minerva_popular_catchup",
                  "catchup_tv",
                  "last_chance_to_watch",
                ],
                i = ["fixed_live_tv", "minerva_popular_catchup", "catchup_tv"];
              function r(e, t) {
                return t[e] || "eng";
              }
              function l(e, t, n) {
                var o = e.stripe.titles,
                  s = e.stripe.showAllText,
                  a =
                    t.locales["s".concat(e.stripe.id)] ||
                    "stripe".concat(e.stripe.id);
                s &&
                  s.forEach(function (e) {
                    var o = r(e.language, t.languages);
                    n[o] &&
                      ((n[o][a] = n[o][a] || {}), (n[o][a].seeAll = e.title));
                  }),
                  o.forEach(function (e) {
                    var o = r(e.language, t.languages);
                    n[o] &&
                      ((n[o][a] = n[o][a] || {}),
                      (n[o][a].title = e.title),
                      (n[o][a].header = e.title));
                  });
              }
              function c(e, t, r, l) {
                var c,
                  p,
                  d,
                  u,
                  m,
                  h,
                  g = e.stripe,
                  f = n.System.getItem(["customer", "enableVOD"]),
                  y = r.stripes[g.id] || "stripe".concat(g.id),
                  v = !!g.style.configuration && g.style.configuration[0],
                  b = (0, o.copy)(n.Settings.app["default-stripe"]),
                  S = r.targets[g.id] || "grid_of_posters",
                  T = "default" === g.stripeTarget ? S : g.stripeTarget,
                  E = g.pageId
                    ? r.pages[g.pageId] || "page".concat(g.pageId)
                    : T,
                  _ = "Y" === g.sourceInfo.dynamic,
                  I = g.sourceInfo.sourceType,
                  w = -1 !== s.indexOf(g.contentType) && !f,
                  k = r.providers[I] || "edge",
                  O = null;
                return w
                  ? null
                  : (v
                      ? ((b.id = y),
                        "default" === g.style.styleType
                          ? ((c = g),
                            (d = b),
                            (u = k),
                            (m = I),
                            (h = E),
                            (e = (p = v).posterScaling
                              ? p.posterScaling.toLowerCase()
                              : "medium"),
                            (S = p.maxItems ? parseInt(p.maxItems, 10) : 18),
                            (T =
                              "edge" === u && c.sourceInfo.uri
                                ? c.sourceInfo.uri.replace("/api/", "")
                                : c.sourceInfo.uri),
                            (f =
                              -1 !== s.indexOf(c.contentType)
                                ? "VOD"
                                : c.contentType),
                            (r = p.orientation
                              ? p.orientation.toLowerCase()
                              : "portrait"),
                            (w =
                              p.onClick && "Detailed Page" !== p.onClick
                                ? "fullscreen"
                                : "asset"),
                            (E = !1),
                            -1 !== i.indexOf(m) && (w = "fullscreen"),
                            T &&
                              -1 < T.indexOf("filter") &&
                              (E = ["result", "filteredVods"]),
                            T &&
                              -1 < T.indexOf("favorites") &&
                              ((w = "fullscreen"),
                              (E = ["contents", "favoriteContent"])),
                            (m = (0, o.getRequestSize)(
                              n.Source.constants["stripe-sizes"][r][e]
                            )),
                            (0, o.setStripe)({
                              component: d,
                              responseType: f.toLowerCase().replace(/ /g, "-"),
                              title: "On" === p.stripeTitle,
                              header: "On" === p.rowHeader,
                              seeAll:
                                "On" === p.showAll || p.showAll.toLowerCase(),
                              headerSvg: c.svgId
                                ? String.fromCharCode(parseInt(c.svgId, 16))
                                : null,
                              allPage: h,
                              page: w,
                              info:
                                "On Selected" === p.contentInfo
                                  ? "selected"
                                  : "All On" === p.contentInfo,
                              bigInfo: p.showExpandedMetadata,
                              progress: "On" === p.progressBar,
                              orientation: r,
                              style: p.focusStyle
                                ? p.focusStyle.toLowerCase()
                                : "frame",
                              effect:
                                !(!p.effects || "None" === p.effects) &&
                                p.effects.toLowerCase(),
                              size: e,
                              scrollItems:
                                "Row Length" === p.itemsToScroll ? "all" : 1,
                              tags: c.style.imageTags || !1,
                              provider: u,
                              url: T,
                              contentPath: E,
                              visibleItems: m,
                              maxItems: !isNaN(S) && S,
                            }),
                            _ &&
                              l["dynamic-stripes"] &&
                              ((k = "unsupported"),
                              (l[
                                "dynamic-stripes"
                              ].url = g.sourceInfo.uri.replace("/api/", ""))),
                            "unsupported" !== k &&
                              (t &&
                                (t.content.content.stripes.settings.layout.push(
                                  [y]
                                ),
                                (t.content.content.stripes.settings.content[
                                  y
                                ] = b)),
                              (O = n.Settings.stripes[y] = b),
                              -1 !== a.indexOf(I) &&
                                (O.collection.cache = { time: 0 })))
                          : "superhero" === g.style.styleType
                          ? ((b = g),
                            (I = v),
                            (v = l = (0, o.copy)(
                              n.Settings.app["default-super-hero"]
                            )),
                            (k = {
                              provider: (k = k),
                              url:
                                "edge" === k && b.sourceInfo.uri
                                  ? b.sourceInfo.uri.replace("/api/", "")
                                  : b.sourceInfo.uri,
                              response: {
                                pageId: {
                                  default:
                                    "Detailed Page" === I.onClick
                                      ? "asset"
                                      : "fullscreen",
                                },
                              },
                            }),
                            (v.settings = {
                              tags: b.style.imageTags || !1,
                              autoAdvance: "On" === I.autoAdvance,
                              rotationFrequency: I.rotationFrequency || 5,
                              wrap: "On" === I.wrap,
                              showTitle:
                                "On Selected" === I.contentTitle
                                  ? "selected"
                                  : "On" === I.contentTitle,
                              showInfo:
                                "On Selected" === I.contentInfo
                                  ? "selected"
                                  : "All On" === I.contentInfo,
                            }),
                            k.url &&
                              -1 < k.url.indexOf("filter") &&
                              (k.contentPath = ["result", "filteredVods"]),
                            (v.collection = (0, o.deepOverride)(
                              v.collection,
                              k
                            )),
                            t &&
                              (t.content.content.stripes.settings.layout.push([
                                y,
                              ]),
                              (t.content.content.stripes.settings.content[
                                y
                              ] = l)),
                            (O = n.Settings.stripes[y] = l))
                          : n.System.warning(
                              "MAUI",
                              "Unsupported stripe style for stripe id: ".concat(
                                g.id
                              )
                            ))
                      : n.System.warning(
                          "MAUI",
                          "Missing stripe configuration for stripe id: ".concat(
                            g.id
                          )
                        ),
                    O);
              }
              function p(e) {
                var t = e.item,
                  s = e.index,
                  a = e.config,
                  i = e.source;
                0 === s && (i.collections.navbar.data = []);
                var r,
                  p,
                  d =
                    !!n.System.getItem("tpapp", "collections") &&
                    n.System.getItem("tpapp", "collections").apps,
                  u = i.collections.navbar.data,
                  m = { type: "page" },
                  h = ["page", "epg", "stripe", "parental", "apps"];
                (!n.System.getItem(["customer", "enableVOD"]) && t.isVod) ||
                  ("parental" === t.itemType &&
                  n.System.getItem(["customer", "parentalControlOn"]) &&
                  -1 < h.indexOf(t.itemType)
                    ? ((m.type = "parental"),
                      (m.lock = String.fromCharCode(
                        parseInt(t.parentalUnlockIconId, 16)
                      )),
                      (m.unlock = String.fromCharCode(
                        parseInt(t.parentalLockIconId, 16)
                      )),
                      (m.lockTxt = "unlock".concat(t.id)),
                      (m.unlockTxt = "lock".concat(t.id)),
                      u.push(m))
                    : "search" === t.itemType && -1 < h.indexOf(t.itemType)
                    ? ((m.type = "search"),
                      (m.svg = String.fromCharCode(
                        parseInt(t.svgId || "e989", 16)
                      )),
                      (m.label = a.locales[t.id] || "item".concat(t.id)),
                      u.push(m))
                    : "page" === t.itemType || "epg" === t.itemType
                    ? -1 < h.indexOf(t.itemType) &&
                      ((p = t.page ? "page".concat(t.page.id) : null),
                      "epg" === t.itemType && (p = "epg"),
                      (m.pageId = a.navbar[t.id] || p),
                      (m.svg = String.fromCharCode(
                        parseInt(t.svgId || "e989", 16)
                      )),
                      (m.label = a.locales[t.id] || "item".concat(t.id)),
                      -1 === [3, 4, 5].indexOf(m.pageId) && u.push(m))
                    : "stripe" === t.itemType && -1 < h.indexOf(t.itemType)
                    ? (r = t.stripe) &&
                      -1 ===
                        ["Search", "Profile", "Recordings"].indexOf(
                          r.contentType
                        ) &&
                      ((e = (0, o.copy)(n.Settings.app["stripe-page"])),
                      (s = "stripe_page".concat(r.id)),
                      (p = c({ stripe: r }, e, a, n.Source.collections)),
                      (i.pages[s] = e),
                      l({ stripe: r }, a, n.Source.locales),
                      p &&
                        p.settings &&
                        p.settings.allPage &&
                        ((m.svg = String.fromCharCode(
                          parseInt(t.svgId || "e989", 16)
                        )),
                        (m.label = a.locales[t.id] || "item".concat(t.id)),
                        (m.pageId = s),
                        (m.linkId = p.id),
                        u.push(m)))
                    : "app" === t.itemType &&
                      d &&
                      d[t.app.id] &&
                      -1 < h.indexOf(t.itemType) &&
                      ((m.type = "app"),
                      (m.svg = String.fromCharCode(
                        parseInt(t.svgId || "e989", 16)
                      )),
                      (m.label = a.locales[t.id] || "item".concat(t.id)),
                      (m.app = d[t.app.id]),
                      u.push(m)));
              }
              function d(e) {
                var t = e.item,
                  n = e.config,
                  o = e.source,
                  s = ((e = t.page && t.page.stripes), o.locales);
                t.name.forEach(function (e) {
                  var o = r(e.language, n.languages);
                  s[o] &&
                    ((s[o].navbar = s[o].navbar || {}),
                    "parental" === t.itemType
                      ? ((s[o].navbar["lock".concat(t.id)] = e.title),
                        (s[o].navbar["unlock".concat(t.id)] = e.secondaryTitle))
                      : (s[o].navbar[n.locales[t.id] || "item".concat(t.id)] =
                          e.title));
                }),
                  e &&
                    0 < e.length &&
                    e.forEach(function (e) {
                      Object.keys(e).length && l(e, n, s);
                    });
              }
              function u(e) {
                var t,
                  s = e.item,
                  a = e.index,
                  i = e.config,
                  r = e.source,
                  l = e.defaultPage,
                  p = r.collections;
                (e = r.pages),
                  0 === a && (n.Settings.stripes = {}),
                  "page" === s.itemType &&
                    s.page &&
                    ((r = s.page),
                    (a = i.pages[r.id] || "page".concat(r.id)),
                    (t = (0, o.copy)(n.Settings.app["stripe-page"])),
                    s.isHome && (l.default = a),
                    r.stripes &&
                      0 < r.stripes.length &&
                      (r.stripes.forEach(function (e) {
                        Object.keys(e).length && c(e, t, i, p);
                      }),
                      (e[a] = t)));
              }
            }.apply(t, n)) || (e.exports = n);
      },
      8272: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              function o() {
                return "locked" === n.System.getItem("parentalStatus");
              }
              function s(e) {
                var t = e.parsed,
                  s = e.result;
                return (
                  (e = n.Source.constants["content-types"]),
                  o() && !0 === s && t.contentType !== e.series
                );
              }
              function a() {
                return (
                  n.System.getItem(["customer", "parentalControlOn"]) &&
                  "locked" !== n.System.getItem("parentalStatus")
                );
              }
              function i() {
                return n.System.getItem(["customer", "parentalControlOn"]);
              }
              function r(e) {
                var t = e.options,
                  n = e.parsed;
                return (
                  (e = e.result),
                  n && "parental" === n.type
                    ? ((t.locked = n[t.locked]),
                      (t.unlocked = n[t.unlocked]),
                      l({ options: t }))
                    : e
                );
              }
              function l(e) {
                var t = e.options,
                  o = "",
                  s = n.System.getItem(["customer", "parentalControlOn"]);
                return (
                  (e = n.System.getItem("parentalStatus")),
                  (o = s ? t.locked : t.unlocked),
                  s && e && (o = "locked" === e ? t.locked : t.unlocked),
                  o
                );
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.data,
                    n = e.action,
                    c = e.options,
                    p = e.fallback;
                  return (
                    (e = e.parsed),
                    (p = p || t),
                    (t = {
                      restricted: s,
                      locked: o,
                      adult: a,
                      setParental: l,
                      haveParental: i,
                      navbar: r,
                    }),
                    n &&
                      t[n] &&
                      (p = t[n]({ options: c, parsed: e, result: p })),
                    p
                  );
                });
            }.apply(t, n)) || (e.exports = n);
      },
      5855: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              function o() {
                var e = n.System.getItem(["providers", "prm", "url"]);
                return n.System.getItem(["providers", "prmv4", "url"]) || e;
              }
              function s(e) {
                return !(
                  (e = e.parsed).allowed &&
                  ((e = e.encrypted.toLowerCase()),
                  n.Settings.app.player.drm === e || "none" === e)
                );
              }
              function a() {
                n.System.setItem("prmStatus", {
                  configured: !0,
                  registered: !0,
                });
              }
              function i(e) {
                return (e = e.parsed).url && "" !== e.url;
              }
              function r(e) {
                return void 0 !== e.options.params.errorId;
              }
              function l(e) {
                var t = e.parsed,
                  o = t.contentType,
                  s = n.Source.constants["content-types"];
                return (e = t.id), o === s.asset && (e = t.resourceId), e;
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.data,
                    n = e.action,
                    c = e.component,
                    p = e.options,
                    d = e.fallback,
                    u = e.parsed,
                    m = d || t;
                  return (
                    (e = {
                      registerEndpoint: o,
                      compatible: s,
                      setStatus: a,
                      allowed: i,
                      isError: r,
                      prmId: l,
                    }),
                    n &&
                      e[n] &&
                      (m = e[n]({
                        data: t,
                        component: c,
                        options: p,
                        fallback: d,
                        parsed: u,
                      })),
                    m
                  );
                });
            }.apply(t, n)) || (e.exports = n);
      },
      6290: function (e, t) {
        var n = function (e) {
          "use strict";
          function n(e) {
            var t = e.data;
            return (
              (e = parseInt(t[0], 10)),
              0 < (t = parseInt(t[1], 10)) ? t : 0 < e ? e : void 0
            );
          }
          function o(e) {
            var t = e.data;
            if (Array.isArray(t) && ((e = t[0]), (t = t[1]) && e))
              return "".concat(e).concat(t / 1e3);
          }
          Object.defineProperty(e, "__esModule", { value: !0 }),
            (t.default = function (e) {
              var t = e.data,
                s = e.action,
                a = e.fallback;
              return (
                (e = { number: n, scheduleId: o }),
                t && s && e[s] && (a = e[s]({ data: t })),
                a
              );
            });
        }.apply(t, [t]);
        void 0 === n || (e.exports = n);
      },
      5836: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.data;
                  return (
                    (t =
                      (e.fallback, (e = e.parsed)).pageId ===
                      n.State.router.page),
                    (e = !e.linkId || e.linkId === n.State.router.id),
                    t && e && "selected"
                  );
                });
            }.apply(t, n)) || (e.exports = n);
      },
      6215: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = [],
                    o = n.State.router.id;
                  return (
                    e.forEach(function (e) {
                      e.content.forEach(function (e) {
                        e.contentId !== o && t.push(e);
                      });
                    }),
                    t.sort(function (e, t) {
                      return e.startDateTime < t.startDateTime
                        ? -1
                        : e.startDateTime > t.startDateTime
                        ? 1
                        : 0;
                    }),
                    t
                  );
                });
            }.apply(t, n)) || (e.exports = n);
      },
      5351: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              function o(e) {
                var t = e.key;
                return (e = e.type), n.System.getItem(t, e);
              }
              function s(e) {
                var t = e.data,
                  o = e.key;
                if (((e = e.type), t)) return n.System.setItem(o, t, e), t;
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.data,
                    n = e.action,
                    a = t,
                    i = (r = e.options).key,
                    r = ((e = r.type), { get: o, set: s });
                  return (
                    n && r[n] && (a = r[n]({ data: t, key: i, type: e })), a
                  );
                });
            }.apply(t, n)) || (e.exports = n);
      },
      8724: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              function s(e) {
                var t = e.data;
                return (
                  t === (e = n.Source.constants["content-types"]).vod_series ||
                  t === e.season
                );
              }
              function a(e) {
                var t = e.data,
                  n = e.fallback,
                  o = Date.now();
                return (e = t[0] || n), (n = t[1] || n), e <= o && o < n;
              }
              function i(e) {
                var t = e.data;
                return (e = e.fallback), Date.now() < (t || e);
              }
              function r(e) {
                var t = e.data;
                if (
                  (e = e.component) &&
                  e.settings &&
                  "landscape" === e.settings.orientation &&
                  ("string" == typeof t || "number" == typeof t)
                )
                  return "(".concat(t, ")");
              }
              function l(e) {
                var t,
                  o,
                  s,
                  a = e.data,
                  i = e.parsed;
                return (
                  (e = n.Source.constants["content-types"]),
                  Array.isArray(a) && ((t = a[0]), (o = a[1]), (s = a[2])),
                  !(t !== e.tv_schedule || !i.isLive) ||
                    (t === e.asset && (0 < o || s))
                );
              }
              function c(e) {
                var t,
                  o = e.data,
                  s = e.component,
                  a = e.parsed;
                Array.isArray(o) || (o = []);
                var i = [],
                  r = o[0] || 0,
                  l = o[1] || 0,
                  c = o[2] || 0,
                  p = o[3] || "",
                  d = o[4],
                  u = n.System.translate(["index", "season-short"]);
                return (
                  (e = n.System.translate(["index", "episode-short"])),
                  (o = n.Source.constants["content-types"]),
                  a.contentType === o.tv_schedule && d
                    ? (0 < c && i.push(u + (c < 10 ? "0".concat(c) : c)),
                      0 < l && i.push(e + (l < 10 ? "0".concat(l) : l)),
                      s &&
                        s.settings &&
                        "landscape" === s.settings.orientation &&
                        p &&
                        i.push(p),
                      0 < i.length && (t = i.join(" ")))
                    : a.contentType === o.season &&
                      0 < r &&
                      (t = u + (r < 10 ? "0".concat(r) : r)),
                  t
                );
              }
              function p(e) {
                var t = e.data,
                  o = e.parsed;
                if (((e = n.Source.constants["content-types"]), o)) {
                  if (
                    "asset" === t &&
                    (o.contentType === e.season ||
                      o.contentType === e.vod_series)
                  )
                    return "series";
                  if (
                    o.contentType === e.tv_schedule &&
                    "fullscreen" === t &&
                    ((!o.catchupTv && !o.isLive) || o.isFuture)
                  )
                    return "asset";
                  if (o.isLive) return "fullscreen";
                }
                return t;
              }
              function d(e) {
                var t = e.data,
                  o = e.parsed;
                if (((e = n.Source.constants["content-types"]), o)) {
                  if (
                    o.contentType === e.episode &&
                    o.pageId &&
                    "fullscreen" !== o.pageId &&
                    o.scheduleId
                  )
                    return e.tv_schedule;
                  if (
                    o.contentType === e.season &&
                    o.pageId &&
                    "fullscreen" !== o.pageId
                  )
                    return !1;
                  if (o.isLive) return e.tv_channel;
                }
                return t;
              }
              function u(e) {
                var t = e.data,
                  o = e.parsed;
                return (
                  (e = n.Source.constants["content-types"]),
                  !(
                    !o ||
                    o.contentType !== e.season ||
                    !o.pageId ||
                    "fullscreen" === o.pageId
                  ) && t
                );
              }
              function m(e) {
                var t = e.data,
                  o = e.parsed;
                if (((e = n.Source.constants["content-types"]), o)) {
                  if (
                    o.contentType === e.episode &&
                    o.pageId &&
                    "fullscreen" !== o.pageId &&
                    o.scheduleId
                  )
                    return o.scheduleId;
                  if (
                    o.contentType === e.season &&
                    o.pageId &&
                    "fullscreen" !== o.pageId
                  )
                    return o.seriesId;
                  if (o.isLive && o.channelId) return o.channelId;
                }
                return t;
              }
              function h(e) {
                var t = e.data,
                  o = e.parsed;
                if (
                  ((e = n.Source.constants["content-types"]),
                  o && o.contentType === e.tv_channel)
                )
                  return t;
              }
              function g(e) {
                return (
                  (e = e.data),
                  (0, o.formatDate)(
                    new Date(e),
                    n.Settings.app.localization.airDate
                  )
                );
              }
              function f(e) {
                return (
                  (e = e.data),
                  (0, o.formatTime)(
                    new Date(e),
                    n.Settings.app.localization.airTime
                  )
                );
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.data,
                    n = e.action,
                    o = e.fallback,
                    y = e.parsed,
                    v = e.component,
                    b = e.options,
                    S = o;
                  return (
                    (e = {
                      isStack: s,
                      isLive: a,
                      isFuture: i,
                      releasedYear: r,
                      progressBar: l,
                      subtitle: c,
                      channel: h,
                      paramsType: d,
                      paramsSeason: u,
                      pageId: p,
                      linkId: m,
                      airDate: g,
                      airTime: f,
                    }),
                    t &&
                      n &&
                      e[n] &&
                      (S = e[n]({
                        data: t,
                        fallback: o,
                        parsed: y,
                        component: v,
                        options: b,
                      })),
                    S
                  );
                });
            }.apply(t, n)) || (e.exports = n);
      },
      7443: function (e, t, n) {
        (n = [t, n(6918)]),
          void 0 ===
            (n = function (e, n) {
              "use strict";
              function o(e) {
                return (o =
                  "function" == typeof Symbol &&
                  "symbol" == typeof Symbol.iterator
                    ? function (e) {
                        return typeof e;
                      }
                    : function (e) {
                        return e &&
                          "function" == typeof Symbol &&
                          e.constructor === Symbol &&
                          e !== Symbol.prototype
                          ? "symbol"
                          : typeof e;
                      })(e);
              }
              Object.defineProperty(e, "__esModule", { value: !0 });
              var s = [
                {
                  name: "id",
                  type: "string",
                  optional: !(t.default = function (e) {
                    e = e.data;
                    var t = {},
                      a = {};
                    return (
                      e &&
                        e.forEach(function (e) {
                          (t = (function (e) {
                            var t,
                              a,
                              i = {};
                            for (t = 0; t < s.length; t += 1)
                              if (
                                "undefined" ===
                                (a =
                                  "array" === s[t].type &&
                                  Array.isArray(e[s[t].name])
                                    ? "array"
                                    : o(e[s[t].name]))
                              ) {
                                if (!1 === s[t].optional)
                                  return (
                                    n.System.warning(
                                      "TPApp",
                                      "Dropping app because of " +
                                        s[t].name +
                                        ", which is missing!"
                                    ),
                                    !1
                                  );
                                i[s[t].name] = e[s[t].name];
                              } else {
                                if (a !== s[t].type)
                                  return (
                                    n.System.warning(
                                      "TPApp",
                                      "Dropping app because of " +
                                        s[t].name +
                                        ", which is of a different type!"
                                    ),
                                    !1
                                  );
                                i[s[t].name] = e[s[t].name];
                              }
                            return i;
                          })(e)) && (a[e.id] = t);
                        }),
                      a
                    );
                  }),
                },
                { name: "universalLink", type: "string", optional: !1 },
                { name: "appType", type: "string", optional: !1 },
                { name: "contentType", type: "string", optional: !1 },
                { name: "name", type: "object", optional: !1 },
                { name: "appStripeOrder", type: "number", optional: !1 },
                { name: "priority", type: "number", optional: !1 },
                { name: "promptSkin", type: "object", optional: !0 },
                { name: "triggers", type: "object", optional: !0 },
                { name: "domains", type: "array", optional: !0 },
                { name: "offeredTime", type: "number", optional: !0 },
                { name: "offeredDelay", type: "number", optional: !0 },
                { name: "notificationTimeout", type: "number", optional: !0 },
                { name: "appImage", type: "object", optional: !0 },
                { name: "trickPlayImage", type: "string", optional: !0 },
                { name: "regions", type: "array", optional: !0 },
                { name: "services", type: "array", optional: !0 },
                { name: "deviceTypes", type: "array", optional: !1 },
                { name: "events", type: "array", optional: !0 },
              ];
            }.apply(t, n)) || (e.exports = n);
      },
      9067: function (e, t, n) {
        (n = [t, n(6918), n(5438)]),
          void 0 ===
            (n = function (e, n, o) {
              "use strict";
              function s(e) {
                e = e.data;
                var t = {};
                return (
                  e.forEach(function (e) {
                    var o = n.Settings.ssl ? "baseHttpsUrl" : "baseHttpUrl",
                      s = n.Settings.ssl ? "baseHttpUrl" : "baseHttpsUrl";
                    ("token" !== e.auth && "analytics" !== e.name) ||
                      ((t[e.name] = {
                        url: e[o] || e[s],
                        params: e.parameters,
                      }),
                      ("prm" !== e.name && "prmv4" !== e.name) ||
                        n.System.setItem("prmStatus", {
                          configured: !0,
                          registered: !1,
                        })),
                      ("epgCache" !== e.name && "widevine" !== e.name) ||
                        (t[e.name] = { url: e[o] || e[s] }),
                      "imagesvc" === e.name &&
                        ((t[e.name] = { url: e[o] || e[s] }),
                        (t[e.name + "Http"] = { url: e.baseHttpUrl })),
                      "edge" === e.name &&
                        (t.multirights = { url: e.baseHttpsUrl });
                  }),
                  t
                );
              }
              function a(e) {
                var t = e.data,
                  n = e.options;
                return (e = e.fallback), n[t] || e || t;
              }
              function i(e) {
                return (e = e.data), (n.Status.logged = !0), e;
              }
              function r(e) {
                var t = e.data,
                  o = (t = t.replace("Bearer ", "")).split(".");
                try {
                  (t = JSON.parse(atob(o[1])).exp),
                    n.System.setItem("token-expire", t);
                } catch (e) {
                  t = null;
                }
                return t;
              }
              function l(e) {
                var t = e.data;
                return (e = e.fallback), encodeURIComponent(t || e);
              }
              function c(e) {
                return (e = e.data), encodeURI(e);
              }
              function p() {
                return new Date().getTime();
              }
              function d(e) {
                var t = e.data,
                  o = e.options,
                  s = o.source;
                return (
                  (e = o.id),
                  s &&
                    ("router" === s && (e = n.State.router[o.key || "id"]),
                    "storage" === s && (e = n.System.getItem(o.key, o.type))),
                  t + e
                );
              }
              function u(e) {
                var t = e.data,
                  o = e.options,
                  s = o.source;
                return (
                  (e = o.id),
                  s &&
                    ("router" === s && (e = n.State.router[o.key || "id"]),
                    "storage" === s && (e = n.System.getItem(o.key, o.type))),
                  o.search ? t.replace(o.search, e) : t
                );
              }
              function m(e) {
                var t,
                  n = e.data;
                return (
                  (e = e.options),
                  n &&
                    "padding" === e.type &&
                    2 === e.zero &&
                    (t = n < 10 ? "00" + n : n < 100 ? "0" + n : n),
                  t
                );
              }
              function h(e) {
                var t = e.data;
                return (e = e.fallback), t[0] || t[1] || e;
              }
              function g(e) {
                return (e = e.options), (0, o.generateDevice)({}, e);
              }
              function f() {
                return n.System.getItem("deviceId");
              }
              function y() {
                var e = "prod" !== n.State.system.environment,
                  t = !e && location.hostname.indexOf("minervanetworks.com");
                return !(!e && !t) && n.State.system.version;
              }
              function v() {
                return (0, o.setFallbackStreamRules)();
              }
              function b(e) {
                var t = e.data;
                return (
                  (e = n.System.getItem("device")),
                  (t = t.vuid || t.vuId),
                  e &&
                    t &&
                    ((e.deviceInfo.vuid = t), n.System.setItem("device", e)),
                  t
                );
              }
              function S(e) {
                var t = e.data,
                  n = e.component;
                (e = e.options).property &&
                  n.settings &&
                  (e = n.settings[e.property]) &&
                  e.options &&
                  (e.options.data = t);
              }
              function T(e) {
                var t = e.data,
                  n = e.options;
                return (
                  (e = e.fallback),
                  (e = t || e) &&
                    0 < e.length &&
                    n.limit &&
                    e.length > n.limit &&
                    ((e = e.substring(0, n.limit)), (e += "...")),
                  e
                );
              }
              function E(e) {
                var t = e.data,
                  n = [];
                if (Array.isArray(t)) {
                  e = t[0];
                  var o = t[1];
                  if (
                    ("string" == typeof e &&
                      "" !== e &&
                      (e = e.replace(/, /g, "/").replace(/,/g, "/"))
                        .split("/")
                        .forEach(function (e) {
                          "" !== e && n.push(e.trim());
                        }),
                    void 0 === e &&
                      void 0 !== o &&
                      o.genre &&
                      Array.isArray(o.genre) &&
                      0 < o.genre.length)
                  )
                    for (var s = 0; s < o.genre.length; s += 1)
                      o.genre[s] &&
                        void 0 !== o.genre[s].name &&
                        n.push(o.genre[s].name);
                }
                return n;
              }
              function _(e) {
                var t = e.data;
                if (
                  ((e = (e = e.options) && e.index ? e.index : 0),
                  t && Array.isArray(t) && 0 < t.length && t[e])
                )
                  return t[e].trim();
              }
              function I(e) {
                var t = e.data;
                if (
                  ((e = e.options),
                  t &&
                    ((e = e && e.limit ? e.limit : 0),
                    Array.isArray(t) && 0 < t.length))
                )
                  return 0 < e && (t = t.slice(0, e)), t;
              }
              function w(e) {
                var t = e.data;
                if (
                  ((e = e.options),
                  t && Array.isArray(t) && 0 < t.length && e && e.join)
                )
                  return t.join(e.join);
              }
              Object.defineProperty(e, "__esModule", { value: !0 }),
                (t.default = function (e) {
                  var t = e.data,
                    n = e.action,
                    o = e.component,
                    k = e.options,
                    O = e.fallback,
                    R = O || t;
                  return (
                    (e = {
                      providers: s,
                      login: i,
                      decodeToken: r,
                      error: a,
                      encode: l,
                      encodeUri: c,
                      timestamp: p,
                      urlAppend: d,
                      dataReplace: u,
                      number: m,
                      dataFallback: h,
                      setDevice: g,
                      getDeviceId: f,
                      getVersion: y,
                      updateStreamRules: v,
                      updateDevice: b,
                      setSettings: S,
                      truncate: T,
                      prepareGenres: E,
                      itemFromArray: _,
                      arraySlice: I,
                      arrayJoin: w,
                    }),
                    n &&
                      e[n] &&
                      (R = e[n]({
                        data: t,
                        component: o,
                        options: k,
                        fallback: O,
                      })),
                    R
                  );
                });
            }.apply(t, n)) || (e.exports = n);
      },
    },
    __webpack_module_cache__ = {};
  function __webpack_require__(e) {
    if (__webpack_module_cache__[e]) return __webpack_module_cache__[e].exports;
    var t = (__webpack_module_cache__[e] = { exports: {} });
    return __webpack_modules__[e](t, t.exports, __webpack_require__), t.exports;
  }
  __webpack_require__(6918);
})();
